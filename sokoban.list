ca65 V2.19 - Git ab8bb268
Main file   : sokoban.asm
Current file: sokoban.asm

000000r 1               .include "x16.inc"
000000r 2               .ifndef X16_INC
000000r 2               X16_INC  = 1
000000r 2               
000000r 2               .ifndef __CX16__
000000r 2               __CX16__ = 1
000000r 2               .endif
000000r 2               
000000r 2               SD_DEVICE   = 1
000000r 2               HOST_DEVICE = 8
000000r 2               DISK_DEVICE = HOST_DEVICE
000000r 2               
000000r 2               
000000r 2               ; RAM Addresses
000000r 2               
000000r 2               ; Kernal Registers
000000r 2               r0						= $02
000000r 2               r0L					= r0
000000r 2               r0H					= r0+1
000000r 2               r1						= $04
000000r 2               r1L					= r1
000000r 2               r1H					= r1+1
000000r 2               r2						= $06
000000r 2               r2L					= r2
000000r 2               r2H					= r2+1
000000r 2               r3						= $08
000000r 2               r3L					= r3
000000r 2               r3H					= r3+1
000000r 2               r4						= $0A
000000r 2               r4L					= r4
000000r 2               r4H					= r4+1
000000r 2               r5						= $0C
000000r 2               r5L					= r5
000000r 2               r5H					= r5+1
000000r 2               r6						= $0E
000000r 2               r6L					= r6
000000r 2               r6H					= r6+1
000000r 2               r7						= $10
000000r 2               r7L					= r7
000000r 2               r7H					= r7+1
000000r 2               r8						= $12
000000r 2               r8L					= r8
000000r 2               r8H					= r8+1
000000r 2               r9						= $14
000000r 2               r9L					= r9
000000r 2               r9H					= r9+1
000000r 2               r10					= $16
000000r 2               r10L					= r10
000000r 2               r10H					= r10+1
000000r 2               r11					= $18
000000r 2               r11L					= r11
000000r 2               r11H					= r11+1
000000r 2               r12					= $1A
000000r 2               r12L					= r12
000000r 2               r12H					= r12+1
000000r 2               r13					= $1C
000000r 2               r13L					= r13
000000r 2               r13H					= r13+1
000000r 2               r14					= $1E
000000r 2               r14L					= r14
000000r 2               r14H					= r14+1
000000r 2               r15					= $20
000000r 2               r15L					= r15
000000r 2               r15H					= r15+1
000000r 2               
000000r 2               ; Zero-Page userspace
000000r 2               ZP_PTR_1          = $00	; first four pointers for temporary use only
000000r 2               ZP_PTR_2          = $22
000000r 2               ZP_PTR_3          = $24
000000r 2               ZP_PTR_4          = $26
000000r 2               
000000r 2               ; I/O Registers
000000r 2               VERA_addr_low     = $9F20
000000r 2               VERA_addr_high    = $9F21
000000r 2               VERA_addr_bank    = $9F22
000000r 2               VERA_data0        = $9F23
000000r 2               VERA_data1        = $9F24
000000r 2               VERA_ctrl         = $9F25
000000r 2               VERA_ien          = $9F26
000000r 2               VERA_isr          = $9F27
000000r 2               VERA_irqline_l    = $9F28
000000r 2               VERA_dc_video     = $9F29
000000r 2               VERA_dc_hscale    = $9F2A
000000r 2               VERA_dc_vscale    = $9F2B
000000r 2               VERA_dc_border    = $9F2C
000000r 2               VERA_dc_hstart    = $9F29
000000r 2               VERA_dc_hstop     = $9F2A
000000r 2               VERA_dc_vsstart   = $9F2B
000000r 2               VERA_dc_vstop     = $9F2C
000000r 2               VERA_L0_config    = $9F2D
000000r 2               VERA_L0_mapbase   = $9F2E
000000r 2               VERA_L0_tilebase  = $9F2F
000000r 2               VERA_L0_hscroll_l = $9F30
000000r 2               VERA_L0_hscroll_h = $9F31
000000r 2               VERA_L0_vscroll_l = $9F32
000000r 2               VERA_L0_vscroll_h = $9F33
000000r 2               VERA_L1_config    = $9F34
000000r 2               VERA_L1_mapbase   = $9F35
000000r 2               VERA_L1_tilebase  = $9F36
000000r 2               VERA_L1_hscroll_l = $9F37
000000r 2               VERA_L1_hscroll_h = $9F38
000000r 2               VERA_L1_vscroll_l = $9F39
000000r 2               VERA_L1_vscroll_h = $9F3A
000000r 2               VERA_audio_ctrl   = $9F3B
000000r 2               VERA_audio_rate   = $9F3C
000000r 2               VERA_audio_data   = $9F3D
000000r 2               VERA_spi_data     = $9F3E
000000r 2               VERA_spi_ctrl     = $9F3F
000000r 2               
000000r 2               
000000r 2               ROM_BANK          = $9F60
000000r 2               RAM_BANK          = $9F61
000000r 2               
000000r 2               YM_reg            = $9FE0
000000r 2               YM_data           = $9FE1
000000r 2               
000000r 2               ; Emulator Registers
000000r 2               GIF_ctrl          = $9FB5
000000r 2               
000000r 2               ; ROM Banks
000000r 2               KERNAL_ROM_BANK   = 0
000000r 2               BASIC_ROM_BANK    = 4
000000r 2               
000000r 2               ; Banked Addresses
000000r 2               RAM_WIN           = $A000
000000r 2               RAM_WIN_SIZE      = $2000
000000r 2               ROM_WIN           = $C000
000000r 2               
000000r 2               ; Kernal Subroutines
000000r 2               CONSOLE_set_paging_message		:= $FED5
000000r 2               CONSOLE_put_image					:= $FED8
000000r 2               CONSOLE_init						:= $FEDB
000000r 2               CONSOLE_put_char					:= $FEDE
000000r 2               CONSOLE_get_char					:= $FEE1
000000r 2               MEMORY_FILL                   := $FEE4
000000r 2               MEMORY_COPY                   := $FEE7
000000r 2               MEMORY_CRC                    := $FEEA
000000r 2               MEMORY_DECOMPRESS             := $FEED
000000r 2               SPRITE_set_image					:= $FEF0
000000r 2               SPRITE_set_position				:= $FEF3
000000r 2               FB_init                 		:= $FEF6
000000r 2               FB_get_info             		:= $FEF9
000000r 2               FB_set_palette          		:= $FEFC
000000r 2               FB_cursor_position      		:= $FEFF
000000r 2               FB_cursor_next_line     		:= $FF02
000000r 2               FB_get_pixel            		:= $FF05
000000r 2               FB_get_pixels           		:= $FF08
000000r 2               FB_set_pixel            		:= $FF0B
000000r 2               FB_set_pixels           		:= $FF0E
000000r 2               FB_set_8_pixels         		:= $FF11
000000r 2               FB_set_8_pixels_opaque  		:= $FF14
000000r 2               FB_fill_pixels          		:= $FF17
000000r 2               FB_filter_pixels        		:= $FF1A
000000r 2               FB_move_pixels          		:= $FF1D
000000r 2               GRAPH_init							:= $FF20
000000r 2               GRAPH_clear							:= $FF23
000000r 2               GRAPH_set_window					:= $FF26
000000r 2               GRAPH_set_colors					:= $FF29
000000r 2               GRAPH_draw_line					:= $FF2C
000000r 2               GRAPH_draw_rect					:= $FF2F
000000r 2               GRAPH_move_rect					:= $FF32
000000r 2               GRAPH_draw_oval					:= $FF35
000000r 2               GRAPH_draw_image					:= $FF38
000000r 2               GRAPH_set_font						:= $FF3B
000000r 2               GRAPH_get_char_size				:= $FF3E
000000r 2               GRAPH_put_char						:= $FF41
000000r 2               MONITOR								:= $FF44
000000r 2               ENTER_BASIC							:= $FF47
000000r 2               CLOCK_SET_DATE_TIME           := $FF4D
000000r 2               CLOCK_GET_DATE_TIME           := $FF50
000000r 2               JOYSTICK_SCAN                 := $FF53
000000r 2               JOYSTICK_GET                  := $FF56
000000r 2               SCREEN_SET_MODE					:= $FF5F
000000r 2               SCREEN_SET_CHARSET				:= $FF62
000000r 2               
000000r 2               MOUSE_CONFIG                  := $FF68
000000r 2               MOUSE_GET			            := $FF6B
000000r 2               MOUSE_SCAN                    := $FF71
000000r 2               SCINIT                        := $FF81
000000r 2               IOINIT                        := $FF84
000000r 2               RAMTAS                        := $FF87
000000r 2               RESTOR                        := $FF8A
000000r 2               SETLFS                        := $FFBA
000000r 2               SETNAM                        := $FFBD
000000r 2               OPEN                          := $FFC0
000000r 2               CLOSE                         := $FFC3
000000r 2               CHKIN                         := $FFC6
000000r 2               CHKOUT                        := $FFC9
000000r 2               CLRCHN                        := $FFCC
000000r 2               CHRIN                         := $FFCF
000000r 2               CHROUT                        := $FFD2
000000r 2               LOAD                          := $FFD5
000000r 2               SAVE                          := $FFD8
000000r 2               SETTIM                        := $FFDB
000000r 2               RDTIM                         := $FFDE
000000r 2               STOP                          := $FFE1
000000r 2               GETIN                         := $FFE4
000000r 2               CLALL									:= $FFE7
000000r 2               UDTIM									:= $FFEA
000000r 2               SCREEN								:= $FFED
000000r 2               PLOT									:= $FFF0
000000r 2               IOBASE								:= $FFF3
000000r 2               
000000r 2               ; BASIC Vectors
000000r 2               BASIC_PANIC       := $C000
000000r 2               BASIC_INIT        := $C003
000000r 2               
000000r 2               
000000r 2               ; VRAM Addresses
000000r 2               VRAM_petscii   = $0F800
000000r 2               VRAM_psg       = $1F9C0
000000r 2               VRAM_palette   = $1FA00
000000r 2               VRAM_sprattr   = $1FC00
000000r 2               
000000r 2               ; IRQs
000000r 2               IRQVec         := $0314
000000r 2               BRKVec         := $0316
000000r 2               NMIVec         := $0318
000000r 2               
000000r 2               ;   Macros
000000r 2               
000000r 2               .macro VERA_SET_ADDR addr, stride
000000r 2               	.ifnblank stride
000000r 2                     .if stride < 0
000000r 2                        lda #((^addr) | $08 | ((0-stride) << 4))
000000r 2                     .else
000000r 2                        lda #((^addr) | (stride << 4))
000000r 2                     .endif
000000r 2               	.else
000000r 2               		lda #(^addr) | $10
000000r 2               	.endif
000000r 2               
000000r 2               	sta VERA_addr_bank
000000r 2               	lda #(>addr)
000000r 2               	sta VERA_addr_high
000000r 2               	lda #(<addr)
000000r 2               	sta VERA_addr_low
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .endif
000000r 2               
000000r 1               
000000r 1               ; constants
000000r 1               NEWLINE = $0D
000000r 1               UPPERCASE = $8E
000000r 1               CLEARSCREEN = 147
000000r 1               LEVELHEADER = 12
000000r 1               MAXUNDO = 10
000000r 1               SCREENWIDTH = 40        ; screen width/height in 16x16 tiles
000000r 1               SCREENHEIGHT = 30
000000r 1               RAMBANK = $a000         ; Ram Bank 0
000000r 1               
000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1               ; VERA Registers
00080D  1               VERA_LOW            = $9F20
00080D  1               VERA_MID            = $9F21
00080D  1               VERA_HIGH           = $9F22
00080D  1               VERA_DATA0          = $9F23
00080D  1               VERA_CTRL           = $9F25
00080D  1               
00080D  1  4C 19 09        jmp start
000810  1               
000810  1               ; string constants
000810  1  52 45 41 4C  quitaskmessage:      .byte "really quit? y/n",0
000814  1  4C 59 20 51  
000818  1  55 49 54 3F  
000821  1  53 45 4C 45  selectmessage:    .byte "select a level (1-",0
000825  1  43 54 20 41  
000829  1  20 4C 45 56  
000834  1  29 3A 20 00  selectendmessage: .byte "): ",0
000838  1  52 45 41 4C  resetmessage:     .byte "really reset level? y/n",0
00083C  1  4C 59 20 52  
000840  1  45 53 45 54  
000850  1  50 52 45 53  quitmessage:      .byte "press q to quit",0
000854  1  53 20 51 20  
000858  1  54 4F 20 51  
000860  1  4C 45 56 45  winstatement:     .byte "level complete! new level? y/n",0
000864  1  4C 20 43 4F  
000868  1  4D 50 4C 45  
00087F  1  28 43 29 32  help0:            .byte "(c)2021 venom",0
000883  1  30 32 31 20  
000887  1  56 45 4E 4F  
00088D  1  4B 45 59 42  help1:            .byte "keyboard shortcuts:",0
000891  1  4F 41 52 44  
000895  1  20 53 48 4F  
0008A1  1  43 55 52 53  help2:            .byte "cursor - moves player",0
0008A5  1  4F 52 20 2D  
0008A9  1  20 4D 4F 56  
0008B7  1  20 20 20 20  help3:            .byte "     q - quit",0
0008BB  1  20 51 20 2D  
0008BF  1  20 51 55 49  
0008C5  1  20 20 20 20  help4:            .byte "     u - undo move(s)",0
0008C9  1  20 55 20 2D  
0008CD  1  20 55 4E 44  
0008DB  1  20 20 20 20  help5:            .byte "     r - reset level",0
0008DF  1  20 52 20 2D  
0008E3  1  20 52 45 53  
0008F0  1  4D 28 45 4E  done0:            .byte "m(enu)",0
0008F4  1  55 29 00     
0008F7  1  4E 28 45 58  done1:            .byte "n(ext)",0
0008FB  1  54 29 00     
0008FE  1  51 28 55 49  done2:            .byte "q(uit)",0
000902  1  54 29 00     
000905  1               
000905  1               ; variables that the program uses during execution
000905  1  00           currentlevel:   .byte 0 ; will need to be filled somewhere in the future in the GUI, or asked from the user
000906  1  00           no_levels:      .byte 0 ; will be read by initfield
000907  1  00           no_goals:       .byte 0 ; will be read by initfield, depending on the currentlevel
000908  1  00           no_goalsreached:.byte 0 ; static now, reset for each game
000909  1  00           fieldwidth:     .byte 0 ; will be read by initfield, depending on the currentlevel
00090A  1  00           fieldheight:    .byte 0 ; will be read by initfield, depending on the currentlevel
00090B  1  00           vera_byte_low:  .byte 0
00090C  1  00           vera_byte_mid:  .byte 0
00090D  1  00 00 00 00  undostack:      .byte 0,0,0,0,0,0,0,0,0,0
000911  1  00 00 00 00  
000915  1  00 00        
000917  1  00           undoindex:      .byte 0
000918  1  00           undocounter:    .byte 0
000919  1               
000919  1               ; usage of zeropage address space:
000919  1               ; ZP_PTR_1 - temporary pointer
000919  1               ; ZP_PTR_2 - temporary pointer
000919  1               ; ZP_PTR_3 - position of player
000919  1               ZP_PTR_FIELD = $28
000919  1               temp = $30  ; used for temp 8/16 bit storage $30/$31
000919  1               ZP_PTR_UNDO = $32 ; used to point to the 'undo stack'
000919  1               
000919  1               start:
000919  1                   ; force uppercase
000919  1  A9 8E            lda #UPPERCASE
00091B  1  20 D2 FF         jsr CHROUT
00091E  1               
00091E  1  20 5F 0F         jsr loadtiles       ; load tiles from normal memory to VRAM
000921  1  20 F3 10         jsr layerconfig     ; configure layer 0/1 on screen
000924  1               
000924  1  20 03 0E         jsr resetvars
000927  1  20 C2 10         jsr cleartiles
00092A  1               
00092A  1  20 2E 10         jsr displaytitlescreen
00092D  1  20 90 0D         jsr selectlevel
000930  1  20 C2 10         jsr cleartiles      ; cls tiles
000933  1               
000933  1  20 26 0E         jsr initfield       ; load correct startup values for selected field
000936  1  20 3B 11         jsr printfield2
000939  1               
000939  1               keyloop:
000939  1  20 E4 FF         jsr GETIN
00093C  1               @checkdown:
00093C  1  C9 11            cmp #$11
00093E  1  D0 05            bne @checkup
000940  1  20 BA 0B         jsr handledown
000943  1  80 61            bra @done
000945  1               @checkup:
000945  1  C9 91            cmp #$91
000947  1  D0 05            bne @checkleft
000949  1  20 54 0B         jsr handleup
00094C  1  80 58            bra @done
00094E  1               @checkleft:
00094E  1  C9 9D            cmp #$9d
000950  1  D0 05            bne @checkright
000952  1  20 FB 0A         jsr handleleft
000955  1  80 4F            bra @done
000957  1               @checkright:
000957  1  C9 1D            cmp #$1d
000959  1  D0 05            bne @checkundo
00095B  1  20 A2 0A         jsr handleright
00095E  1  80 46            bra @done
000960  1               @checkundo:
000960  1  C9 55            cmp #$55 ; 'u'
000962  1  D0 05            bne @checkreset
000964  1  20 DD 09         jsr handle_undocommand
000967  1  80 3D            bra @done
000969  1               @checkreset:
000969  1  C9 52            cmp #$52 ; 'r'
00096B  1  D0 21            bne @checkquit
00096D  1  20 88 0A         jsr askreset
000970  1  B0 0B            bcs @resetgame
000972  1  20 59 0F         jsr cls
000975  1  20 C2 10         jsr cleartiles
000978  1  20 3B 11         jsr printfield2
00097B  1  80 29            bra @done
00097D  1               @resetgame:
00097D  1  20 59 0F         jsr cls
000980  1  20 C2 10         jsr cleartiles
000983  1  20 03 0E         jsr resetvars
000986  1  20 26 0E         jsr initfield
000989  1  20 3B 11         jsr printfield2
00098C  1  80 AB            bra keyloop
00098E  1               @checkquit:
00098E  1  C9 51            cmp #$51 ; 'q'
000990  1  D0 14            bne @done
000992  1  20 6E 0A         jsr askquit
000995  1  B0 0B            bcs @exit
000997  1  20 59 0F         jsr cls
00099A  1  20 C2 10         jsr cleartiles
00099D  1  20 3B 11         jsr printfield2
0009A0  1  80 04            bra @done
0009A2  1               @exit:
0009A2  1  20 E7 10         jsr resetlayerconfig
0009A5  1  60               rts
0009A6  1               @done:
0009A6  1                   ; check if we have reached all goals
0009A6  1  AD 07 09         lda no_goals
0009A9  1  CD 08 09         cmp no_goalsreached
0009AC  1  D0 2C            bne @donenextkey
0009AE  1  20 05 0A         jsr asknewlevel
0009B1  1  C9 4D            cmp #$4d ; Menu
0009B3  1  F0 08            beq @gotomenu   ; reset game / let user decide on new level
0009B5  1  C9 51            cmp #$51 ; Quit
0009B7  1  D0 07            bne @nextgame
0009B9  1  20 E7 10         jsr resetlayerconfig
0009BC  1  60               rts
0009BD  1               @gotomenu:
0009BD  1  4C 19 09         jmp start
0009C0  1               @nextgame:
0009C0  1                   ; check if this was the last level
0009C0  1  AD 06 09         lda no_levels
0009C3  1  CD 05 09         cmp currentlevel
0009C6  1  F0 F5            beq @gotomenu   ; select another game
0009C8  1  EE 05 09         inc currentlevel ; next level
0009CB  1  20 59 0F         jsr cls
0009CE  1  20 03 0E         jsr resetvars
0009D1  1  20 C2 10         jsr cleartiles
0009D4  1               
0009D4  1  20 26 0E         jsr initfield       ; load correct startup values for selected field
0009D7  1  20 3B 11         jsr printfield2
0009DA  1               
0009DA  1               @donenextkey:
0009DA  1  4C 39 09         jmp keyloop
0009DD  1               
0009DD  1               handle_undocommand:
0009DD  1  20 8B 0C         jsr pull_undostack
0009E0  1                   ; x now contains previous move
0009E0  1                   ;   as #%000MUDRL - Multiple move / Up / Down / Right / Left
0009E0  1                   ; we will give x to the handle_undo_**** routine, so it can see the combined bit (4) and act on it
0009E0  1               @checkup:
0009E0  1  8A               txa
0009E1  1  29 08            and #%00001000
0009E3  1  F0 04            beq @checkdown
0009E5  1  20 7F 0B         jsr handle_undo_up
0009E8  1  60               rts
0009E9  1               @checkdown:
0009E9  1  8A               txa
0009EA  1  29 04            and #%00000100
0009EC  1  F0 04            beq @checkright
0009EE  1  20 E5 0B         jsr handle_undo_down
0009F1  1  60               rts
0009F2  1               @checkright:
0009F2  1  8A               txa
0009F3  1  29 02            and #%00000010
0009F5  1  F0 04            beq @checkleft
0009F7  1  20 C2 0A         jsr handle_undo_right
0009FA  1  60               rts
0009FB  1               @checkleft:
0009FB  1  8A               txa
0009FC  1  29 01            and #%00000001
0009FE  1  F0 04            beq @emptystack
000A00  1  20 1B 0B         jsr handle_undo_left
000A03  1  60               rts
000A04  1               @emptystack:
000A04  1                   ; do nothing
000A04  1  60               rts
000A05  1               
000A05  1               asknewlevel:
000A05  1                   ; display level complete tilesetj
000A05  1  20 59 0F         jsr cls
000A08  1  A9 3B            lda #<completescreen
000A0A  1  85 00            sta ZP_PTR_1
000A0C  1  A9 32            lda #>completescreen
000A0E  1  85 01            sta ZP_PTR_1+1
000A10  1  20 F8 0F         jsr displaytileset
000A13  1               
000A13  1  9C 25 9F         stz VERA_CTRL
000A16  1  A2 09            ldx #$9 ; color brown
000A18  1  A9 10            lda #$10
000A1A  1  8D 22 9F         sta VERA_HIGH
000A1D  1               
000A1D  1  A9 F0            lda #<done0
000A1F  1  85 00            sta ZP_PTR_1
000A21  1  A9 08            lda #>done0
000A23  1  85 01            sta ZP_PTR_1+1
000A25  1  A9 25            lda #37
000A27  1  8D 21 9F         sta VERA_MID
000A2A  1  A9 4C            lda #38*2
000A2C  1  8D 20 9F         sta VERA_LOW
000A2F  1  20 E1 0F         jsr printverastring
000A32  1               
000A32  1  A9 F7            lda #<done1
000A34  1  85 00            sta ZP_PTR_1
000A36  1  A9 08            lda #>done1
000A38  1  85 01            sta ZP_PTR_1+1
000A3A  1  A9 29            lda #41
000A3C  1  8D 21 9F         sta VERA_MID
000A3F  1  A9 4C            lda #38*2
000A41  1  8D 20 9F         sta VERA_LOW
000A44  1  20 E1 0F         jsr printverastring
000A47  1               
000A47  1  A9 FE            lda #<done2
000A49  1  85 00            sta ZP_PTR_1
000A4B  1  A9 08            lda #>done2
000A4D  1  85 01            sta ZP_PTR_1+1
000A4F  1  A9 2D            lda #45
000A51  1  8D 21 9F         sta VERA_MID
000A54  1  A9 4C            lda #38*2
000A56  1  8D 20 9F         sta VERA_LOW
000A59  1  20 E1 0F         jsr printverastring
000A5C  1               
000A5C  1               @keyloop:
000A5C  1  20 E4 FF         jsr GETIN
000A5F  1               @checkmenu:
000A5F  1  C9 4D            cmp #$4D ; M (enu)
000A61  1  D0 01            bne @checknext
000A63  1  60               rts
000A64  1               @checknext:
000A64  1  C9 4E            cmp #$4E ; N (ext)
000A66  1  D0 01            bne @checkquit
000A68  1  60               rts
000A69  1               @checkquit:
000A69  1  C9 51            cmp #$51 ; Q (uit)
000A6B  1  D0 EF            bne @keyloop
000A6D  1  60               rts
000A6E  1               
000A6E  1               askquit:
000A6E  1                   ; ask if the user would like to quit, and return carry on 'y'
000A6E  1  A9 10            lda #<quitaskmessage
000A70  1  85 00            sta ZP_PTR_1
000A72  1  A9 08            lda #>quitaskmessage
000A74  1  85 01            sta ZP_PTR_1+1
000A76  1  20 B2 0F         jsr displaymessagescreen
000A79  1               
000A79  1               @keyloop:
000A79  1  20 E4 FF         jsr GETIN
000A7C  1               @checkyes:
000A7C  1  C9 59            cmp #$59 ; Y
000A7E  1  D0 02            bne @checkno
000A80  1  38               sec
000A81  1  60               rts
000A82  1               @checkno:
000A82  1  C9 4E            cmp #$4e ; N
000A84  1  D0 F3            bne @keyloop
000A86  1  18               clc
000A87  1  60               rts
000A88  1               
000A88  1               askreset:
000A88  1                   ; ask if the user would like to reset, and return carry on 'y'
000A88  1  A9 38            lda #<resetmessage
000A8A  1  85 00            sta ZP_PTR_1
000A8C  1  A9 08            lda #>resetmessage
000A8E  1  85 01            sta ZP_PTR_1+1
000A90  1  20 B2 0F         jsr displaymessagescreen
000A93  1               
000A93  1               @keyloop:
000A93  1  20 E4 FF         jsr GETIN
000A96  1               @checkyes:
000A96  1  C9 59            cmp #$59 ; Y
000A98  1  D0 02            bne @checkno
000A9A  1  38               sec
000A9B  1  60               rts
000A9C  1               @checkno:
000A9C  1  C9 4E            cmp #$4e ; N
000A9E  1  D0 F3            bne @keyloop
000AA0  1  18               clc
000AA1  1  60               rts
000AA2  1               
000AA2  1               handleright:
000AA2  1                   ; pointers
000AA2  1                   ; 3 - player
000AA2  1                   ; 2 - block to the right of the player
000AA2  1                   ; 1 - block to the right of that block
000AA2  1               
000AA2  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1x position
000AA2  1  18               clc
000AA3  1  A5 24            lda ZP_PTR_3
000AA5  1  69 01            adc #$1               ; 1x position
000AA7  1  85 22            sta ZP_PTR_2
000AA9  1  A5 25            lda ZP_PTR_3+1
000AAB  1  69 00            adc #$0
000AAD  1  85 23            sta ZP_PTR_2+1
000AAF  1               
000AAF  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2x position
000AAF  1  18               clc
000AB0  1  A5 24            lda ZP_PTR_3
000AB2  1  69 02            adc #$2               ; 2x position
000AB4  1  85 00            sta ZP_PTR_1
000AB6  1  A5 25            lda ZP_PTR_3+1
000AB8  1  69 00            adc #$0
000ABA  1  85 01            sta ZP_PTR_1+1
000ABC  1               
000ABC  1  A2 02            ldx #%00000010 ; right direction
000ABE  1  20 20 0C         jsr handlemove
000AC1  1  60               rts
000AC2  1               
000AC2  1               handle_undo_right:
000AC2  1                   ; 3 - player
000AC2  1               
000AC2  1  DA               phx ; store x to stack
000AC3  1                   ; point 1 to player
000AC3  1               
000AC3  1  A5 24            lda ZP_PTR_3
000AC5  1  85 00            sta ZP_PTR_1
000AC7  1  A5 25            lda ZP_PTR_3+1
000AC9  1  85 01            sta ZP_PTR_1+1
000ACB  1               
000ACB  1                   ; pointer 2 will point to the left of the player
000ACB  1                   ; so the player will move back to the left
000ACB  1  38               sec
000ACC  1  A5 24            lda ZP_PTR_3
000ACE  1  E9 01            sbc #$1
000AD0  1  85 22            sta ZP_PTR_2
000AD2  1  A5 25            lda ZP_PTR_3+1
000AD4  1  E9 00            sbc #$0
000AD6  1  85 23            sta ZP_PTR_2+1
000AD8  1               
000AD8  1  20 F3 0C         jsr moveplayeronfield
000ADB  1  20 A9 0C         jsr moveplayerposition
000ADE  1               
000ADE  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000ADE  1  FA               plx
000ADF  1  8A               txa
000AE0  1  29 10            and #%00010000 ; was a crate moved in this move?
000AE2  1  F0 10            beq @done
000AE4  1               
000AE4  1                   ; load pointer 2 to the right of the previous player's position
000AE4  1  18               clc
000AE5  1  A5 00            lda ZP_PTR_1
000AE7  1  69 01            adc #$1
000AE9  1  85 22            sta ZP_PTR_2
000AEB  1  A5 01            lda ZP_PTR_1+1
000AED  1  69 00            adc #$0
000AEF  1  85 23            sta ZP_PTR_2+1
000AF1  1               
000AF1  1  20 B2 0C         jsr movecrateonfield
000AF4  1               @done:
000AF4  1  20 59 0F         jsr cls
000AF7  1  20 3B 11         jsr printfield2
000AFA  1  60               rts
000AFB  1               
000AFB  1               handleleft:
000AFB  1                   ; pointers
000AFB  1                   ; 3 - player
000AFB  1                   ; 2 - block to the left of the player
000AFB  1                   ; 1 - block to the left of that block
000AFB  1               
000AFB  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1x position
000AFB  1  38               sec
000AFC  1  A5 24            lda ZP_PTR_3
000AFE  1  E9 01            sbc #$1               ; 1x position
000B00  1  85 22            sta ZP_PTR_2
000B02  1  A5 25            lda ZP_PTR_3+1
000B04  1  E9 00            sbc #$0
000B06  1  85 23            sta ZP_PTR_2+1
000B08  1               
000B08  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2x position
000B08  1  38               sec
000B09  1  A5 24            lda ZP_PTR_3
000B0B  1  E9 02            sbc #$2               ; 2x position
000B0D  1  85 00            sta ZP_PTR_1
000B0F  1  A5 25            lda ZP_PTR_3+1
000B11  1  E9 00            sbc #$0
000B13  1  85 01            sta ZP_PTR_1+1
000B15  1               
000B15  1  A2 01            ldx #%00000001 ; left direction
000B17  1  20 20 0C         jsr handlemove
000B1A  1               
000B1A  1               @done:
000B1A  1  60               rts
000B1B  1               
000B1B  1               handle_undo_left:
000B1B  1                   ; 3 - player
000B1B  1               
000B1B  1  DA               phx ; store x to stack
000B1C  1               
000B1C  1                   ; point 1 to player
000B1C  1  A5 24            lda ZP_PTR_3
000B1E  1  85 00            sta ZP_PTR_1
000B20  1  A5 25            lda ZP_PTR_3+1
000B22  1  85 01            sta ZP_PTR_1+1
000B24  1               
000B24  1                   ; pointer 2 will point to the right of the player
000B24  1                   ; so the player will move back to the right
000B24  1  18               clc
000B25  1  A5 24            lda ZP_PTR_3
000B27  1  69 01            adc #$1
000B29  1  85 22            sta ZP_PTR_2
000B2B  1  A5 25            lda ZP_PTR_3+1
000B2D  1  69 00            adc #$0
000B2F  1  85 23            sta ZP_PTR_2+1
000B31  1               
000B31  1  20 F3 0C         jsr moveplayeronfield
000B34  1  20 A9 0C         jsr moveplayerposition
000B37  1               
000B37  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000B37  1  FA               plx
000B38  1  8A               txa
000B39  1  29 10            and #%00010000 ; was a crate moved in this move?
000B3B  1  F0 10            beq @done
000B3D  1               
000B3D  1                   ; load pointer 2 to the left of the previous player's position
000B3D  1  38               sec
000B3E  1  A5 00            lda ZP_PTR_1
000B40  1  E9 01            sbc #$1
000B42  1  85 22            sta ZP_PTR_2
000B44  1  A5 01            lda ZP_PTR_1+1
000B46  1  E9 00            sbc #$0
000B48  1  85 23            sta ZP_PTR_2+1
000B4A  1               
000B4A  1  20 B2 0C         jsr movecrateonfield
000B4D  1               @done:
000B4D  1  20 59 0F         jsr cls
000B50  1  20 3B 11         jsr printfield2
000B53  1  60               rts
000B54  1               
000B54  1               handleup:
000B54  1                   ; pointers
000B54  1                   ; 3 - player
000B54  1                   ; 2 - block to the top of the player
000B54  1                   ; 1 - block to the top of that block
000B54  1               
000B54  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1xFIELDWIDTH
000B54  1  AD 09 09         lda fieldwidth
000B57  1  85 30            sta temp
000B59  1  38               sec
000B5A  1  A5 24            lda ZP_PTR_3
000B5C  1  E5 30            sbc temp
000B5E  1  85 22            sta ZP_PTR_2
000B60  1  A5 25            lda ZP_PTR_3+1
000B62  1  E9 00            sbc #$0
000B64  1  85 23            sta ZP_PTR_2+1
000B66  1               
000B66  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2xFIELDWIDTH
000B66  1  AD 09 09         lda fieldwidth
000B69  1  0A               asl ; 2x
000B6A  1  85 30            sta temp
000B6C  1  38               sec
000B6D  1  A5 24            lda ZP_PTR_3
000B6F  1  E5 30            sbc temp
000B71  1  85 00            sta ZP_PTR_1
000B73  1  A5 25            lda ZP_PTR_3+1
000B75  1  E9 00            sbc #$0
000B77  1  85 01            sta ZP_PTR_1+1
000B79  1               
000B79  1  A2 08            ldx #%00001000 ; up direction
000B7B  1  20 20 0C         jsr handlemove
000B7E  1               
000B7E  1  60               rts
000B7F  1               
000B7F  1               handle_undo_up:
000B7F  1                   ; 3 - player
000B7F  1               
000B7F  1  DA               phx ; store x to stack
000B80  1               
000B80  1                   ; point 1 to player
000B80  1  A5 24            lda ZP_PTR_3
000B82  1  85 00            sta ZP_PTR_1
000B84  1  A5 25            lda ZP_PTR_3+1
000B86  1  85 01            sta ZP_PTR_1+1
000B88  1               
000B88  1                   ; pointer 2 will point to the position down of the player
000B88  1                   ; so the player will move back down
000B88  1  18               clc
000B89  1  A5 24            lda ZP_PTR_3
000B8B  1  6D 09 09         adc fieldwidth
000B8E  1  85 22            sta ZP_PTR_2
000B90  1  A5 25            lda ZP_PTR_3+1
000B92  1  69 00            adc #$0
000B94  1  85 23            sta ZP_PTR_2+1
000B96  1               
000B96  1  20 F3 0C         jsr moveplayeronfield
000B99  1  20 A9 0C         jsr moveplayerposition
000B9C  1               
000B9C  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000B9C  1  FA               plx
000B9D  1  8A               txa
000B9E  1  29 10            and #%00010000 ; was a crate moved in this move?
000BA0  1  F0 11            beq @done
000BA2  1               
000BA2  1                   ; load pointer 2 to the top of the previous player's position
000BA2  1  38               sec
000BA3  1  A5 00            lda ZP_PTR_1
000BA5  1  ED 09 09         sbc fieldwidth
000BA8  1  85 22            sta ZP_PTR_2
000BAA  1  A5 01            lda ZP_PTR_1+1
000BAC  1  E9 00            sbc #$0
000BAE  1  85 23            sta ZP_PTR_2+1
000BB0  1               
000BB0  1  20 B2 0C         jsr movecrateonfield
000BB3  1               @done:
000BB3  1  20 59 0F         jsr cls
000BB6  1  20 3B 11         jsr printfield2
000BB9  1  60               rts
000BBA  1               
000BBA  1               handledown:
000BBA  1                   ; pointers
000BBA  1                   ; 3 - player
000BBA  1                   ; 2 - block to the bottom of the player
000BBA  1                   ; 1 - block to the bottom of that block
000BBA  1               
000BBA  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1xFIELDWIDTH
000BBA  1  AD 09 09         lda fieldwidth
000BBD  1  85 30            sta temp
000BBF  1  18               clc
000BC0  1  A5 24            lda ZP_PTR_3
000BC2  1  65 30            adc temp
000BC4  1  85 22            sta ZP_PTR_2
000BC6  1  A5 25            lda ZP_PTR_3+1
000BC8  1  69 00            adc #$0
000BCA  1  85 23            sta ZP_PTR_2+1
000BCC  1               
000BCC  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2xFIELDWIDTH
000BCC  1  AD 09 09         lda fieldwidth
000BCF  1  0A               asl ; 2x
000BD0  1  85 30            sta temp
000BD2  1  18               clc
000BD3  1  A5 24            lda ZP_PTR_3
000BD5  1  65 30            adc temp
000BD7  1  85 00            sta ZP_PTR_1
000BD9  1  A5 25            lda ZP_PTR_3+1
000BDB  1  69 00            adc #$0
000BDD  1  85 01            sta ZP_PTR_1+1
000BDF  1               
000BDF  1  A2 04            ldx #%00000100 ; down direction
000BE1  1  20 20 0C         jsr handlemove
000BE4  1               
000BE4  1  60               rts
000BE5  1               
000BE5  1               handle_undo_down:
000BE5  1                   ; 3 - player
000BE5  1               
000BE5  1  DA               phx ; store x to stack
000BE6  1               
000BE6  1                   ; point 1 to player
000BE6  1  A5 24            lda ZP_PTR_3
000BE8  1  85 00            sta ZP_PTR_1
000BEA  1  A5 25            lda ZP_PTR_3+1
000BEC  1  85 01            sta ZP_PTR_1+1
000BEE  1               
000BEE  1                   ; pointer 2 will point to the position up of the player
000BEE  1                   ; so the player will move back up
000BEE  1  38               sec
000BEF  1  A5 24            lda ZP_PTR_3
000BF1  1  ED 09 09         sbc fieldwidth
000BF4  1  85 22            sta ZP_PTR_2
000BF6  1  A5 25            lda ZP_PTR_3+1
000BF8  1  E9 00            sbc #$0
000BFA  1  85 23            sta ZP_PTR_2+1
000BFC  1               
000BFC  1  20 F3 0C         jsr moveplayeronfield
000BFF  1  20 A9 0C         jsr moveplayerposition
000C02  1               
000C02  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000C02  1  FA               plx
000C03  1  8A               txa
000C04  1  29 10            and #%00010000 ; was a crate moved in this move?
000C06  1  F0 11            beq @done
000C08  1               
000C08  1                   ; load pointer 2 to the bottom of the previous player's position
000C08  1  18               clc
000C09  1  A5 00            lda ZP_PTR_1
000C0B  1  6D 09 09         adc fieldwidth
000C0E  1  85 22            sta ZP_PTR_2
000C10  1  A5 01            lda ZP_PTR_1+1
000C12  1  69 00            adc #$0
000C14  1  85 23            sta ZP_PTR_2+1
000C16  1               
000C16  1  20 B2 0C         jsr movecrateonfield
000C19  1               @done:
000C19  1  20 59 0F         jsr cls
000C1C  1  20 3B 11         jsr printfield2
000C1F  1  60               rts
000C20  1               
000C20  1               handlemove:
000C20  1                   ; pointers
000C20  1                   ; 3 - points to the player position
000C20  1                   ; 2 - points to the next block at the indicated direction
000C20  1                   ; 1 - points to the block after that block
000C20  1               
000C20  1  DA               phx ; push x to stack with stored direction
000C21  1               
000C21  1  A0 00            ldy #0
000C23  1  B1 22            lda (ZP_PTR_2),y
000C25  1  C9 20            cmp #' ' ; empty block next to player?
000C27  1  F0 06            beq @moveplayertopoint2
000C29  1  C9 2E            cmp #'.' ; goal position next to player?
000C2B  1  F0 02            beq @moveplayertopoint2
000C2D  1  80 0C            bra @next ; no ' ' or '.' found next to player, is it a crate or a wall?
000C2F  1               @moveplayertopoint2:
000C2F  1                   ; move player to pointer 2
000C2F  1  20 F3 0C         jsr moveplayeronfield
000C32  1  20 A9 0C         jsr moveplayerposition
000C35  1               
000C35  1  FA               plx ; pull direction from the stack
000C36  1  20 6E 0C         jsr push_undostack
000C39  1  80 2A            bra @movecomplete
000C3B  1               @next:
000C3B  1  A0 00            ldy #0
000C3D  1  B1 22            lda (ZP_PTR_2),y
000C3F  1  C9 24            cmp #'$' ; crate next to player?
000C41  1  F0 06            beq @combinedmovecheck
000C43  1  C9 2A            cmp #'*' ; crate on goal next to player?
000C45  1  F0 02            beq @combinedmovecheck
000C47  1  80 23            bra @ignore ; something else not able to push
000C49  1               @combinedmovecheck:
000C49  1  B1 00            lda (ZP_PTR_1),y
000C4B  1  C9 20            cmp #' ' ; space after crate?
000C4D  1  F0 06            beq @combinedmove
000C4F  1  C9 2E            cmp #'.' ; goal after crate?
000C51  1  F0 02            beq @combinedmove
000C53  1  80 17            bra @ignore ; nothing to move
000C55  1               @combinedmove:
000C55  1  20 B2 0C         jsr movecrateonfield
000C58  1  20 F3 0C         jsr moveplayeronfield
000C5B  1  20 A9 0C         jsr moveplayerposition
000C5E  1               
000C5E  1                   ; record combined move to undo stack
000C5E  1  68               pla
000C5F  1  09 10            ora #%00010000   ; set 'combined' bit 4
000C61  1  AA               tax
000C62  1  20 6E 0C         jsr push_undostack
000C65  1               
000C65  1               @movecomplete:
000C65  1  20 3B 11         jsr printfield2
000C68  1  20 59 0F         jsr cls
000C6B  1  60               rts
000C6C  1               
000C6C  1               @ignore: ; nothing to move
000C6C  1  FA               plx  ; don't forget to remove the stacked x move
000C6D  1  60               rts
000C6E  1               
000C6E  1               push_undostack:
000C6E  1                   ; record single move to undo stack
000C6E  1                   ; x contains direction and single/multiple move
000C6E  1                   ; x = 0%000MUDRL - Multiple / Up / Down / Right / Left
000C6E  1                   ;
000C6E  1                   ; the stack index 'pointer' undoindex points to a new entry each time
000C6E  1  8A               txa
000C6F  1  AC 17 09         ldy undoindex
000C72  1  91 32            sta (ZP_PTR_UNDO),y
000C74  1               
000C74  1  C0 09            cpy #MAXUNDO-1 ; at last physical item in memory? then loop around
000C76  1  F0 05            beq @loopindex
000C78  1  EE 17 09         inc undoindex
000C7B  1  80 03            bra @checkmaxcount
000C7D  1                @loopindex:
000C7D  1  9C 17 09         stz undoindex
000C80  1                @checkmaxcount:
000C80  1  AD 18 09         lda undocounter
000C83  1  C9 0A            cmp #MAXUNDO
000C85  1  F0 03            beq @done ; maximum count reached / stack will loop around
000C87  1  EE 18 09         inc undocounter
000C8A  1                @done:
000C8A  1  60               rts
000C8B  1               
000C8B  1               pull_undostack:
000C8B  1                   ; remove single move from undo stack
000C8B  1                   ; afterwards, x contains direction and single/multiple move
000C8B  1                   ; x = 0%000MUDRL - Multiple / Up / Down / Right / Left
000C8B  1               
000C8B  1  AD 18 09         lda undocounter ; check if we have any moves pushed to the stack
000C8E  1  D0 03            bne @stackedmoves
000C90  1  A2 00            ldx #$0 ; empty move, nothing in the stack
000C92  1  60               rts
000C93  1               
000C93  1               @stackedmoves:
000C93  1  CE 18 09         dec undocounter ; reduce the number pushed to the stack with 1
000C96  1  AC 17 09         ldy undoindex
000C99  1  C0 00            cpy #$0 ; index at first position?
000C9B  1  D0 04            bne @normalindex
000C9D  1  A0 09            ldy #MAXUNDO-1 ; move it to the 'previous' index position in a circular manner
000C9F  1  80 01            bra @next
000CA1  1               @normalindex:
000CA1  1  88               dey ; move it to the 'previous' index position
000CA2  1               @next:
000CA2  1  8C 17 09         sty undoindex
000CA5  1                   ; y now points to the previous move, as an index to the stack memory
000CA5  1  B1 32            lda (ZP_PTR_UNDO),y
000CA7  1  AA               tax
000CA8  1  60               rts
000CA9  1               
000CA9  1               moveplayerposition:
000CA9  1                   ; moves pointer 3 to position of pointer 2
000CA9  1  A5 22            lda ZP_PTR_2
000CAB  1  85 24            sta ZP_PTR_3
000CAD  1  A5 23            lda ZP_PTR_2+1
000CAF  1  85 25            sta ZP_PTR_3+1
000CB1  1  60               rts
000CB2  1               
000CB2  1               movecrateonfield:
000CB2  1                   ; copies (ZP_PTR_2) to (ZP_PTR_1)
000CB2  1                   ; and handles different crate move options (normal / crate on goal)
000CB2  1  A0 00            ldy #0
000CB4  1  B1 22            lda (ZP_PTR_2),y
000CB6  1                   ; was there a goal underneath the crate?
000CB6  1  C9 2A            cmp #'*'
000CB8  1  D0 1D            bne @crateonly
000CBA  1                   ; do we move to a goal position? (from goal to goal..)
000CBA  1  B1 00            lda (ZP_PTR_1),y
000CBC  1  C9 2E            cmp #'.'
000CBE  1  D0 0A            bne @movetonormalposition
000CC0  1               @movetogoalposition:
000CC0  1  A9 2A            lda #'*' ; crate on goal symbol
000CC2  1  91 00            sta (ZP_PTR_1),y
000CC4  1  A9 2E            lda #'.'
000CC6  1  91 22            sta (ZP_PTR_2),y
000CC8  1  80 28            bra @done
000CCA  1               @movetonormalposition:
000CCA  1  CE 08 09         dec no_goalsreached ; -1 win points
000CCD  1  A9 24            lda #'$'; crate symbol
000CCF  1  91 00            sta (ZP_PTR_1),y
000CD1  1  A9 2E            lda #'.'
000CD3  1  91 22            sta (ZP_PTR_2),y
000CD5  1  80 1B            bra @done
000CD7  1               @crateonly:
000CD7  1                   ; is the destination a goal?
000CD7  1  B1 00            lda (ZP_PTR_1),y
000CD9  1  C9 2E            cmp #'.'
000CDB  1  D0 0D            bne @crateonly_nongoal
000CDD  1                   ; crate moves to goal, from a non-goal position
000CDD  1  EE 08 09         inc no_goalsreached ; +1 to win
000CE0  1  A9 2A            lda #'*'
000CE2  1  91 00            sta (ZP_PTR_1),y
000CE4  1  A9 20            lda #' '
000CE6  1  91 22            sta (ZP_PTR_2),y
000CE8  1  80 08            bra @done
000CEA  1               @crateonly_nongoal:
000CEA  1  A9 24            lda #'$'
000CEC  1  91 00            sta (ZP_PTR_1),y
000CEE  1  A9 20            lda #' '; empty space to move the player in next
000CF0  1  91 22            sta (ZP_PTR_2),y
000CF2  1               @done:
000CF2  1  60               rts
000CF3  1               
000CF3  1               moveplayeronfield:
000CF3  1                   ; copies (ZP_PTR_3) to (ZP_PTR_2)
000CF3  1                   ; and handles multiple player move options (normal / on goal)
000CF3  1  A0 00            ldy #0
000CF5  1  B1 24            lda (ZP_PTR_3),y
000CF7  1                   ; was there a goal underneath the player?
000CF7  1  C9 2B            cmp #'+'
000CF9  1  D0 1A            bne @playeronly
000CFB  1                   ; do we move to a goal position? (from goal to goal..)
000CFB  1  B1 22            lda (ZP_PTR_2),y
000CFD  1  C9 2E            cmp #'.'
000CFF  1  D0 0A            bne @movetonormalposition
000D01  1               @movetogoalposition:
000D01  1  A9 2B            lda #'+' ; player on goal symbol
000D03  1  91 22            sta (ZP_PTR_2),y
000D05  1  A9 2E            lda #'.'
000D07  1  91 24            sta (ZP_PTR_3),y
000D09  1  80 22            bra @done
000D0B  1               @movetonormalposition:
000D0B  1  A9 40            lda #'@'; player symbol
000D0D  1  91 22            sta (ZP_PTR_2),y
000D0F  1  A9 2E            lda #'.'
000D11  1  91 24            sta (ZP_PTR_3),y
000D13  1  80 18            bra @done
000D15  1               @playeronly:
000D15  1                   ; is the destination a goal?
000D15  1  B1 22            lda (ZP_PTR_2),y
000D17  1  C9 2E            cmp #'.'
000D19  1  D0 0A            bne @playeronly_nongoal
000D1B  1                   ; player moves to goal, from a non-goal position
000D1B  1  A9 2B            lda #'+'
000D1D  1  91 22            sta (ZP_PTR_2),y
000D1F  1  A9 20            lda #' '
000D21  1  91 24            sta (ZP_PTR_3),y
000D23  1  80 08            bra @done
000D25  1               @playeronly_nongoal:
000D25  1  A9 40            lda #'@'
000D27  1  91 22            sta (ZP_PTR_2),y
000D29  1  A9 20            lda #' '; empty space
000D2B  1  91 24            sta (ZP_PTR_3),y
000D2D  1               @done:
000D2D  1  60               rts
000D2E  1               
000D2E  1               print:
000D2E  1                   ; console routines only
000D2E  1                   ; print from address ZP_PTR_1
000D2E  1                   ; don't end with newline character
000D2E  1  5A               phy
000D2F  1  A0 00            ldy #0
000D31  1               @loop:
000D31  1  B1 00            lda (ZP_PTR_1),y ; load character from address
000D33  1  F0 06            beq @done        ; end at 0 character
000D35  1  20 D2 FF         jsr CHROUT
000D38  1  C8               iny
000D39  1  80 F6            bra @loop
000D3B  1               @done:
000D3B  1  7A               ply
000D3C  1  60               rts
000D3D  1               
000D3D  1               printline:
000D3D  1                   ; console routines only
000D3D  1                   ; print from address ZP_PTR_1
000D3D  1                   ; end with newline character
000D3D  1  20 2E 0D         jsr print
000D40  1  A9 0D            lda #NEWLINE
000D42  1  20 D2 FF         jsr CHROUT
000D45  1  60               rts
000D46  1               
000D46  1               printwinstatement:
000D46  1                   ; console routines only
000D46  1  A9 60            lda #<winstatement
000D48  1  85 00            sta ZP_PTR_1
000D4A  1  A9 08            lda #>winstatement
000D4C  1  85 01            sta ZP_PTR_1+1
000D4E  1  20 3D 0D         jsr printline
000D51  1  60               rts
000D52  1               
000D52  1               printdecimal:
000D52  1                   ; prints decimal from A register
000D52  1                   ; VERA control needs to be set up previously
000D52  1  DA               phx
000D53  1  5A               phy
000D54  1  86 30            stx temp    ; keep color to print in
000D56  1  A0 2F            ldy #$2f
000D58  1  A2 3A            ldx #$3a
000D5A  1  38               sec
000D5B  1               @loop1:
000D5B  1  C8               iny
000D5C  1  E9 64            sbc #100
000D5E  1  B0 FB            bcs @loop1
000D60  1               @loop2:
000D60  1  CA               dex
000D61  1  69 0A            adc #10
000D63  1  30 FB            bmi @loop2
000D65  1  69 2F            adc #$2f
000D67  1               
000D67  1                   ; Y = hundreds, X = tens, A = ones
000D67  1  48               pha
000D68  1  8A               txa
000D69  1  48               pha
000D6A  1  98               tya
000D6B  1  C9 30            cmp #$30 ; is it a '0' petscii?
000D6D  1  F0 08            beq @tens
000D6F  1               ;    jsr CHROUT ; print Y
000D6F  1  8D 23 9F         sta VERA_DATA0
000D72  1  A5 30            lda temp
000D74  1  8D 23 9F         sta VERA_DATA0
000D77  1               @tens:
000D77  1  68               pla
000D78  1  C9 30            cmp #$30 ; is it a '0' petscii?
000D7A  1  F0 08            beq @ones
000D7C  1               ;    jsr CHROUT ; print X
000D7C  1  8D 23 9F         sta VERA_DATA0
000D7F  1  A5 30            lda temp
000D81  1  8D 23 9F         sta VERA_DATA0
000D84  1               @ones:
000D84  1  68               pla
000D85  1               ;    jsr CHROUT ; print A
000D85  1  8D 23 9F         sta VERA_DATA0
000D88  1  A5 30            lda temp
000D8A  1  8D 23 9F         sta VERA_DATA0
000D8D  1               
000D8D  1  7A               ply
000D8E  1  FA               plx
000D8F  1  60               rts
000D90  1               
000D90  1               selectlevel:
000D90  1  A9 01            lda #1 ; start out with first level
000D92  1  8D 05 09         sta currentlevel
000D95  1               
000D95  1               @mainloop:
000D95  1                   ; text prep to VERA
000D95  1  9C 25 9F         stz VERA_CTRL
000D98  1  A2 09            ldx #$9 ; color brown
000D9A  1  A9 10            lda #$10
000D9C  1  8D 22 9F         sta VERA_HIGH
000D9F  1  A9 21            lda #<selectmessage
000DA1  1  85 00            sta ZP_PTR_1
000DA3  1  A9 08            lda #>selectmessage
000DA5  1  85 01            sta ZP_PTR_1+1
000DA7  1  A9 2D            lda #45
000DA9  1  8D 21 9F         sta VERA_MID
000DAC  1  A9 14            lda #10*2
000DAE  1  8D 20 9F         sta VERA_LOW
000DB1  1  20 E1 0F         jsr printverastring
000DB4  1               
000DB4  1                   ; print range
000DB4  1  AD 06 09         lda no_levels
000DB7  1  20 52 0D         jsr printdecimal
000DBA  1  A9 34            lda #<selectendmessage
000DBC  1  85 00            sta ZP_PTR_1
000DBE  1  A9 08            lda #>selectendmessage
000DC0  1  85 01            sta ZP_PTR_1+1
000DC2  1  20 E1 0F         jsr printverastring
000DC5  1                   ; print level number
000DC5  1  AD 05 09         lda currentlevel
000DC8  1  20 52 0D         jsr printdecimal
000DCB  1               
000DCB  1               @charloop:
000DCB  1  20 E4 FF         jsr GETIN
000DCE  1               @checkdown:
000DCE  1  C9 11            cmp #$11 ; down pressed
000DD0  1  F0 06            beq @down
000DD2  1  C9 9D            cmp #$9d ; left pressed
000DD4  1  F0 02            beq @down
000DD6  1  80 0C            bra @checkup
000DD8  1               @down:
000DD8  1                   ; down key pressed
000DD8  1  AD 05 09         lda currentlevel
000DDB  1  C9 01            cmp #1
000DDD  1  F0 EC            beq @charloop   ; lowest value == 1
000DDF  1  CE 05 09         dec currentlevel
000DE2  1  80 B1            bra @mainloop
000DE4  1               @checkup:
000DE4  1  C9 91            cmp #$91 ; up pressed
000DE6  1  F0 06            beq @up
000DE8  1  C9 1D            cmp #$1d ; right pressed
000DEA  1  F0 02            beq @up
000DEC  1  80 0D            bra @checkreturnkey
000DEE  1               @up:
000DEE  1                   ; up key pressed
000DEE  1  AD 05 09         lda currentlevel
000DF1  1  CD 06 09         cmp no_levels
000DF4  1  F0 D5            beq @charloop   ; maximum value reached
000DF6  1  EE 05 09         inc currentlevel
000DF9  1  80 9A            bra @mainloop
000DFB  1               @checkreturnkey:
000DFB  1  C9 0D            cmp #$0d
000DFD  1  D0 CC            bne @charloop
000DFF  1                   ; return key pressed - select this level
000DFF  1  20 59 0F         jsr cls
000E02  1  60               rts
000E03  1               
000E03  1               resetvars:
000E03  1                   ; reset goals
000E03  1  A9 00            lda #0
000E05  1  8D 08 09         sta no_goalsreached
000E08  1               
000E08  1                   ; load field pointer to first address at LOADSTART
000E08  1                   ; load 1st pointer to temp pointer ZP_PTR_1
000E08  1  A9 3B            lda #<LOADSTART
000E0A  1  85 00            sta ZP_PTR_1
000E0C  1  A9 48            lda #>LOADSTART
000E0E  1  85 01            sta ZP_PTR_1+1
000E10  1               
000E10  1                   ; load number of levels, pointed to by ZP_PTR_1,0
000E10  1  A0 00            ldy #0
000E12  1  B1 00            lda (ZP_PTR_1),y
000E14  1  8D 06 09         sta no_levels
000E17  1               
000E17  1                   ; reset undo stack
000E17  1  A9 0D            lda #<undostack
000E19  1  85 32            sta ZP_PTR_UNDO
000E1B  1  A9 09            lda #>undostack
000E1D  1  85 33            sta ZP_PTR_UNDO+1
000E1F  1               
000E1F  1  9C 17 09         stz undoindex
000E22  1  9C 18 09         stz undocounter
000E25  1  60               rts
000E26  1               
000E26  1               initfield:
000E26  1                   ; load field pointer to first address at LOADSTART
000E26  1                   ; load 1st pointer to temp pointer ZP_PTR_1
000E26  1  A9 3B            lda #<LOADSTART
000E28  1  85 00            sta ZP_PTR_1
000E2A  1  A9 48            lda #>LOADSTART
000E2C  1  85 01            sta ZP_PTR_1+1
000E2E  1               
000E2E  1                   ; skip to the first header, two bytes next
000E2E  1  18               clc
000E2F  1  A5 00            lda ZP_PTR_1
000E31  1  69 02            adc #2
000E33  1  85 00            sta ZP_PTR_1
000E35  1               
000E35  1                   ; now advance pointer (currentlevel - 1) * HEADERSIZE to advance to the correct payload pointer to that level
000E35  1  AD 05 09         lda currentlevel
000E38  1  AA               tax ; x contains the currentlevel now and will act as a counter
000E39  1               @loop:
000E39  1  CA               dex
000E3A  1  F0 11            beq @fieldptrdone
000E3C  1                   ; advance the field payload pointer
000E3C  1  A5 00            lda ZP_PTR_1
000E3E  1  18               clc
000E3F  1  69 0C            adc #LEVELHEADER
000E41  1  85 00            sta ZP_PTR_1
000E43  1  90 F4            bcc @loop   ; nothing to do for the high byte
000E45  1  A5 01            lda ZP_PTR_1+1
000E47  1  69 00            adc #$0     ; increase the high byte
000E49  1  85 01            sta ZP_PTR_1+1
000E4B  1  80 EC            bra @loop
000E4D  1               @fieldptrdone:
000E4D  1               
000E4D  1  A0 02            ldy #2  ; index from payload pointer to width variable (low byte)
000E4F  1  B1 00            lda (ZP_PTR_1),y
000E51  1  8D 09 09         sta fieldwidth
000E54  1  A0 04            ldy #4  ; index from payload pointer to height variable (low byte)
000E56  1  B1 00            lda (ZP_PTR_1),y
000E58  1  8D 0A 09         sta fieldheight
000E5B  1  A0 06            ldy #6  ; index from payload pointer to goals in this level (low byte)
000E5D  1  B1 00            lda (ZP_PTR_1),y
000E5F  1  8D 07 09         sta no_goals
000E62  1  A0 08            ldy #8  ; index from payload pointer to goals taken in this level (low byte)
000E64  1  B1 00            lda (ZP_PTR_1),y
000E66  1  8D 08 09         sta no_goalsreached
000E69  1  A0 0A            ldy #10  ; index from payload pointer to player offset in this level
000E6B  1               
000E6B  1  B1 00            lda (ZP_PTR_1),y
000E6D  1  18               clc
000E6E  1  69 00            adc #<RAMBANK
000E70  1  85 24            sta ZP_PTR_3
000E72  1  C8               iny
000E73  1  B1 00            lda (ZP_PTR_1),y
000E75  1  69 A0            adc #>RAMBANK
000E77  1  85 25            sta ZP_PTR_3+1
000E79  1                   ; ZP_PTR_3 now contains the actual address in memory of the player, not only the offset from the data
000E79  1               
000E79  1                   ; now copy the field data to the RAM bank
000E79  1  AD 0A 09         lda fieldheight
000E7C  1  AA               tax ; create counter
000E7D  1                   ; clear temp counter
000E7D  1  64 30            stz temp
000E7F  1  64 31            stz temp+1
000E81  1               
000E81  1               @multiply:
000E81  1                   ; add fieldwidth variable to temp at each iteration - temp = temp + (width * height)
000E81  1  A5 30            lda temp
000E83  1  18               clc
000E84  1  6D 09 09         adc fieldwidth
000E87  1  85 30            sta temp
000E89  1  A5 31            lda temp+1 ; don't forget the high byte
000E8B  1  69 00            adc #0
000E8D  1  85 31            sta temp+1
000E8F  1  CA               dex
000E90  1  D0 EF            bne @multiply
000E92  1               
000E92  1                   ; copy (temp) amount of bytes from current field pointer to Ram bank 0
000E92  1               
000E92  1                   ; currently ZP_PTR_1 is pointing to the selected field HEADER
000E92  1                   ; retrieve the field pointer from it, and let ZP_PTR_FIELD to that
000E92  1  A0 00            ldy #0
000E94  1  B1 00            lda (ZP_PTR_1),y
000E96  1  85 28            sta ZP_PTR_FIELD
000E98  1  C8               iny
000E99  1  B1 00            lda (ZP_PTR_1),y
000E9B  1  85 29            sta ZP_PTR_FIELD+1
000E9D  1                   ; now let this pointer start counting from LOADSTART, just as the offset in the input file references
000E9D  1  A5 28            lda ZP_PTR_FIELD
000E9F  1  18               clc
000EA0  1  69 3B            adc #<LOADSTART
000EA2  1  85 28            sta ZP_PTR_FIELD
000EA4  1  A5 29            lda ZP_PTR_FIELD+1
000EA6  1  69 48            adc #>LOADSTART
000EA8  1  85 29            sta ZP_PTR_FIELD+1
000EAA  1               
000EAA  1                   ; set up destination pointer
000EAA  1  A9 00            lda #<RAMBANK
000EAC  1  85 22            sta ZP_PTR_2
000EAE  1  A9 A0            lda #>RAMBANK
000EB0  1  85 23            sta ZP_PTR_2+1
000EB2  1               
000EB2  1  A0 00            ldy #0
000EB4  1               @copybyte:
000EB4  1                   ; copy one byte of data
000EB4  1  B1 28            lda (ZP_PTR_FIELD),y
000EB6  1  91 22            sta (ZP_PTR_2),y
000EB8  1               
000EB8  1                   ; temp = temp -1
000EB8  1  A5 30            lda temp
000EBA  1  38               sec
000EBB  1  E9 01            sbc #1
000EBD  1  85 30            sta temp
000EBF  1  A5 31            lda temp+1
000EC1  1  E9 00            sbc #0
000EC3  1  85 31            sta temp+1
000EC5  1               
000EC5  1                   ; if temp==0 done
000EC5  1  A5 31            lda temp+1
000EC7  1  D0 06            bne @copynextbyte
000EC9  1  A5 30            lda temp
000ECB  1  D0 02            bne @copynextbyte
000ECD  1  80 1C            bra @done
000ECF  1               @copynextbyte:
000ECF  1  A5 28            lda ZP_PTR_FIELD
000ED1  1  18               clc
000ED2  1  69 01            adc #1
000ED4  1  85 28            sta ZP_PTR_FIELD
000ED6  1  A5 29            lda ZP_PTR_FIELD+1
000ED8  1  69 00            adc #0
000EDA  1  85 29            sta ZP_PTR_FIELD+1
000EDC  1  A5 22            lda ZP_PTR_2
000EDE  1  18               clc
000EDF  1  69 01            adc #1
000EE1  1  85 22            sta ZP_PTR_2
000EE3  1  A5 23            lda ZP_PTR_2+1
000EE5  1  69 00            adc #0
000EE7  1  85 23            sta ZP_PTR_2+1
000EE9  1  80 C9            bra @copybyte
000EEB  1               @done:
000EEB  1               
000EEB  1                   ; prep the field pointer
000EEB  1  A9 00            lda #<RAMBANK
000EED  1  85 28            sta ZP_PTR_FIELD
000EEF  1  A9 A0            lda #>RAMBANK
000EF1  1  85 29            sta ZP_PTR_FIELD+1
000EF3  1  60               rts
000EF4  1               
000EF4  1               printfield:
000EF4  1                   ; console routines only
000EF4  1                   ; no clearscreen, just print the field to screen on current position
000EF4  1                   ; depends only on
000EF4  1                   ; - field label for start of field
000EF4  1               
000EF4  1  A5 28            lda ZP_PTR_FIELD
000EF6  1  85 00            sta ZP_PTR_1
000EF8  1  A5 29            lda ZP_PTR_FIELD+1
000EFA  1  85 01            sta ZP_PTR_1+1
000EFC  1  A2 00            ldx #0 ; row counter
000EFE  1               @nextrow:
000EFE  1  A0 00            ldy #0 ; column counter
000F00  1               @row:
000F00  1  B1 00            lda (ZP_PTR_1),y
000F02  1  C9 40            cmp #'@'
000F04  1  F0 06            beq @character
000F06  1  C9 2B            cmp #'+'
000F08  1  F0 02            beq @character
000F0A  1  80 17            bra @normalcolor
000F0C  1               @character:
000F0C  1  48               pha
000F0D  1  A9 9E            lda #$9e ; YELLOW
000F0F  1  20 D2 FF         jsr CHROUT
000F12  1  68               pla
000F13  1  20 D2 FF         jsr CHROUT
000F16  1  A9 05            lda #$05 ; WHITE
000F18  1  20 D2 FF         jsr CHROUT
000F1B  1  C8               iny
000F1C  1  CC 09 09         cpy fieldwidth
000F1F  1  D0 DF            bne @row
000F21  1  80 09            bra @endline
000F23  1               @normalcolor:
000F23  1  20 D2 FF         jsr CHROUT
000F26  1  C8               iny
000F27  1  CC 09 09         cpy fieldwidth
000F2A  1  D0 D4            bne @row
000F2C  1               @endline:
000F2C  1  A9 0D            lda #NEWLINE
000F2E  1  20 D2 FF         jsr CHROUT
000F31  1               
000F31  1                   ; advance pointer to next row
000F31  1  A5 00            lda ZP_PTR_1
000F33  1  18               clc
000F34  1  6D 09 09         adc fieldwidth
000F37  1  85 00            sta ZP_PTR_1
000F39  1  90 07            bcc @checklastrow ; no carry, don't increment high byte on pointer
000F3B  1  A5 01            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
000F3D  1  18               clc
000F3E  1  69 01            adc #1
000F40  1  85 01            sta ZP_PTR_1+1
000F42  1               @checklastrow:
000F42  1                   ; last row?
000F42  1  E8               inx
000F43  1  EC 0A 09         cpx fieldheight
000F46  1  D0 B6            bne @nextrow
000F48  1               
000F48  1                   ; print quit message at the end of the field
000F48  1  A9 0D            lda #NEWLINE
000F4A  1  20 D2 FF         jsr CHROUT
000F4D  1  A9 50            lda #<quitmessage
000F4F  1  85 00            sta ZP_PTR_1
000F51  1  A9 08            lda #>quitmessage
000F53  1  85 01            sta ZP_PTR_1+1
000F55  1  20 3D 0D         jsr printline
000F58  1               
000F58  1  60               rts
000F59  1               
000F59  1               cls:
000F59  1  A9 93            lda #CLEARSCREEN
000F5B  1  20 D2 FF         jsr CHROUT
000F5E  1  60               rts
000F5F  1               
000F5F  1               loadtiles:
000F5F  1               ; Build  16x16 256 color tiles in VRAM location $12000
000F5F  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000F62  1  A9 11            lda #$11
000F64  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 1
000F67  1  A9 20            lda #$20
000F69  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $20
000F6C  1  9C 20 9F         stz VERA_LOW                        ; Set Low Byte to $00
000F6F  1               
000F6F  1  A2 00            ldx #0
000F71  1  BD 3B 42     :   lda tiledata,x                      ; index 0 / black tile
000F74  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000F77  1  E8               inx
000F78  1  D0 F7            bne :-
000F7A  1                   ; load Brick data
000F7A  1  A2 00            ldx #0
000F7C  1  BD 3B 43     :   lda Brick,x                         ; index 1 / brick
000F7F  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000F82  1  E8               inx
000F83  1  D0 F7            bne :-
000F85  1                   ; load player data
000F85  1  A2 00            ldx #0
000F87  1  BD 3B 44     :   lda player,x                        ; index 2 / player
000F8A  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000F8D  1  E8               inx
000F8E  1  D0 F7            bne :-
000F90  1                   ; load crate data
000F90  1  A2 00            ldx #0
000F92  1  BD 3B 45     :   lda crate,x                         ; index 3 / crate (normal)
000F95  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000F98  1  E8               inx
000F99  1  D0 F7            bne :-
000F9B  1                   ; load goal data
000F9B  1  A2 00            ldx #0
000F9D  1  BD 3B 46     :   lda goal,x                         ; index 4 / goal (normal)
000FA0  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000FA3  1  E8               inx
000FA4  1  D0 F7            bne :-
000FA6  1                   ; load crateongoal data
000FA6  1  A2 00            ldx #0
000FA8  1  BD 3B 47     :   lda crateongoal,x                   ; index 5 / crate on goal
000FAB  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000FAE  1  E8               inx
000FAF  1  D0 F7            bne :-
000FB1  1               
000FB1  1  60               rts
000FB2  1               
000FB2  1               
000FB2  1               displaymessagescreen:
000FB2  1                   ; temp store pointer to the requested text
000FB2  1  A5 00            lda ZP_PTR_1
000FB4  1  48               pha
000FB5  1  A5 01            lda ZP_PTR_1+1
000FB7  1  48               pha
000FB8  1               
000FB8  1  A9 3B            lda #<messagescreen
000FBA  1  85 00            sta ZP_PTR_1
000FBC  1  A9 22            lda #>messagescreen
000FBE  1  85 01            sta ZP_PTR_1+1
000FC0  1  20 F8 0F         jsr displaytileset
000FC3  1                   ; now display the string at ZP_PTR_1 in the middle and return
000FC3  1  68               pla
000FC4  1  85 01            sta ZP_PTR_1+1
000FC6  1  68               pla
000FC7  1  85 00            sta ZP_PTR_1
000FC9  1  9C 25 9F         stz VERA_CTRL
000FCC  1                   ;lda #%00100000
000FCC  1  A9 10            lda #$10
000FCE  1  8D 22 9F         sta VERA_HIGH
000FD1  1  A9 1C            lda #28
000FD3  1  8D 21 9F         sta VERA_MID
000FD6  1  A9 38            lda #28*2
000FD8  1  8D 20 9F         sta VERA_LOW
000FDB  1  A2 09            ldx #$9 ; color brown
000FDD  1  20 E1 0F         jsr printverastring
000FE0  1  60               rts
000FE1  1               
000FE1  1               printverastring:
000FE1  1                   ; ZP_PTR_1 is pointing to the string
000FE1  1                   ; x contains color of the text
000FE1  1  A0 00            ldy #0
000FE3  1               @loop:
000FE3  1  B1 00            lda (ZP_PTR_1),y
000FE5  1  F0 10            beq @end
000FE7  1  C9 40            cmp #$40
000FE9  1  90 03            bcc @output
000FEB  1               @AZ:
000FEB  1  38               sec
000FEC  1  E9 40            sbc #$40
000FEE  1               @output:
000FEE  1  8D 23 9F         sta VERA_DATA0
000FF1  1  8E 23 9F         stx VERA_DATA0
000FF4  1  C8               iny
000FF5  1  80 EC            bra @loop
000FF7  1               @end:
000FF7  1  60               rts
000FF8  1               
000FF8  1               displaytileset:
000FF8  1               ; Fill the Layer 0 with the tileset pointed to by ZP_PTR_1
000FF8  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000FFB  1  A9 10            lda #$10
000FFD  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
001000  1  A9 40            lda #$40
001002  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $40
001005  1  A9 00            lda #$0
001007  1  8D 20 9F         sta VERA_LOW                        ; Set Low Byte to $00
00100A  1               
00100A  1  A0 20            ldy #32
00100C  1               @outerloop:
00100C  1  A2 40            ldx #64
00100E  1               @innerloop:
00100E  1  5A               phy
00100F  1  A0 00            ldy #0
001011  1  B1 00            lda (ZP_PTR_1),y                    ; load byte from tileset
001013  1  8D 23 9F         sta VERA_DATA0
001016  1  9C 23 9F         stz VERA_DATA0                      ; zero it's attribute
001019  1  7A               ply
00101A  1               
00101A  1                   ; increase pointer to next byte in the set
00101A  1  A5 00            lda ZP_PTR_1
00101C  1  18               clc
00101D  1  69 02            adc #$2
00101F  1  85 00            sta ZP_PTR_1
001021  1  A5 01            lda ZP_PTR_1+1
001023  1  69 00            adc #$0
001025  1  85 01            sta ZP_PTR_1+1
001027  1               
001027  1  CA               dex
001028  1  D0 E4            bne @innerloop
00102A  1  88               dey
00102B  1  D0 DF            bne @outerloop
00102D  1               
00102D  1  60               rts
00102E  1               
00102E  1               displaytitlescreen:
00102E  1  A9 3B            lda #<titlescreen
001030  1  85 00            sta ZP_PTR_1
001032  1  A9 12            lda #>titlescreen
001034  1  85 01            sta ZP_PTR_1+1
001036  1  20 F8 0F         jsr displaytileset
001039  1               
001039  1  9C 25 9F         stz VERA_CTRL
00103C  1  A2 09            ldx #$9 ; color brown
00103E  1  A9 10            lda #$10
001040  1  8D 22 9F         sta VERA_HIGH
001043  1               
001043  1  A9 7F            lda #<help0
001045  1  85 00            sta ZP_PTR_1
001047  1  A9 08            lda #>help0
001049  1  85 01            sta ZP_PTR_1+1
00104B  1  A9 17            lda #23
00104D  1  8D 21 9F         sta VERA_MID
001050  1  A9 64            lda #50*2
001052  1  8D 20 9F         sta VERA_LOW
001055  1  20 E1 0F         jsr printverastring
001058  1               
001058  1  A9 8D            lda #<help1
00105A  1  85 00            sta ZP_PTR_1
00105C  1  A9 08            lda #>help1
00105E  1  85 01            sta ZP_PTR_1+1
001060  1  A9 1E            lda #30
001062  1  8D 21 9F         sta VERA_MID
001065  1  A9 64            lda #50*2
001067  1  8D 20 9F         sta VERA_LOW
00106A  1  20 E1 0F         jsr printverastring
00106D  1               
00106D  1  A9 A1            lda #<help2
00106F  1  85 00            sta ZP_PTR_1
001071  1  A9 08            lda #>help2
001073  1  85 01            sta ZP_PTR_1+1
001075  1  A9 20            lda #32
001077  1  8D 21 9F         sta VERA_MID
00107A  1  A9 64            lda #50*2
00107C  1  8D 20 9F         sta VERA_LOW
00107F  1  20 E1 0F         jsr printverastring
001082  1               
001082  1  A9 B7            lda #<help3
001084  1  85 00            sta ZP_PTR_1
001086  1  A9 08            lda #>help3
001088  1  85 01            sta ZP_PTR_1+1
00108A  1  A9 21            lda #33
00108C  1  8D 21 9F         sta VERA_MID
00108F  1  A9 64            lda #50*2
001091  1  8D 20 9F         sta VERA_LOW
001094  1  20 E1 0F         jsr printverastring
001097  1               
001097  1  A9 C5            lda #<help4
001099  1  85 00            sta ZP_PTR_1
00109B  1  A9 08            lda #>help4
00109D  1  85 01            sta ZP_PTR_1+1
00109F  1  A9 22            lda #34
0010A1  1  8D 21 9F         sta VERA_MID
0010A4  1  A9 64            lda #50*2
0010A6  1  8D 20 9F         sta VERA_LOW
0010A9  1  20 E1 0F         jsr printverastring
0010AC  1               
0010AC  1  A9 DB            lda #<help5
0010AE  1  85 00            sta ZP_PTR_1
0010B0  1  A9 08            lda #>help5
0010B2  1  85 01            sta ZP_PTR_1+1
0010B4  1  A9 23            lda #35
0010B6  1  8D 21 9F         sta VERA_MID
0010B9  1  A9 64            lda #50*2
0010BB  1  8D 20 9F         sta VERA_LOW
0010BE  1  20 E1 0F         jsr printverastring
0010C1  1  60               rts
0010C2  1               
0010C2  1               cleartiles:
0010C2  1               ; Fill the Layer 0 with all zeros (black)
0010C2  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
0010C5  1  A9 10            lda #$10
0010C7  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
0010CA  1  A9 40            lda #$40
0010CC  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $40
0010CF  1  A9 00            lda #$0
0010D1  1  8D 20 9F         sta VERA_LOW                        ; Set Low Byte to $00
0010D4  1               
0010D4  1  A0 20            ldy #32
0010D6  1  A9 00            lda #0
0010D8  1  A2 40        :   ldx #64
0010DA  1  8D 23 9F     :   sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
0010DD  1  8D 23 9F         sta VERA_DATA0                      ; Write Attribute
0010E0  1  CA               dex
0010E1  1  D0 F7            bne :-
0010E3  1  88               dey
0010E4  1  D0 F2            bne :--
0010E6  1               
0010E6  1  60               rts
0010E7  1               
0010E7  1               resetlayerconfig:
0010E7  1               ; Change Layer 1 to 8 Color Mode
0010E7  1  AD 34 9F         lda $9F34
0010EA  1  29 F7            and #%11110111                        ; Set bit 3 to 0, rest unchanged
0010EC  1  8D 34 9F         sta $9F34
0010EF  1               
0010EF  1  20 59 0F         jsr cls
0010F2  1  60               rts
0010F3  1               
0010F3  1               layerconfig:
0010F3  1               ; Configure Layer 0
0010F3  1  A9 53            lda #%01010011                      ; 64 x 64 tiles, 8 bits per pixel
0010F5  1  8D 2D 9F         sta $9F2D
0010F8  1  A9 20            lda #$20                            ; $20 points to $4000 in VRAM
0010FA  1  8D 2E 9F         sta $9F2E                           ; Store to Map Base Pointer
0010FD  1               
0010FD  1  A9 93            lda #$93                            ; $48 points to $12000, Width and Height 16 pixel
0010FF  1  8D 2F 9F         sta $9F2F                           ; Store to Tile Base Pointer
001102  1               
001102  1  20 C2 10         jsr cleartiles
001105  1               
001105  1               ; Turn on Layer 0
001105  1  AD 29 9F         lda $9F29
001108  1  09 30            ora #%00110000                      ; Bits 4 and 5 are set to 1
00110A  1  8D 29 9F         sta $9F29                           ; So both Later 0 and 1 are turned on
00110D  1               
00110D  1               ; Change Layer 1 to 256 Color Mode
00110D  1  AD 34 9F         lda $9F34
001110  1  09 08            ora #%001000                        ; Set bit 3 to 1, rest unchanged
001112  1  8D 34 9F         sta $9F34
001115  1               
001115  1               ; Clear Layer 1
001115  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
001118  1  A9 10            lda #$10
00111A  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
00111D  1  9C 21 9F         stz VERA_MID                        ; Set Middle Byte to $00
001120  1  9C 20 9F         stz VERA_LOW                        ; Set Low Byte to $00
001123  1               
001123  1  A9 1E            lda #30
001125  1  85 02            sta $02                             ; save counter for rows
001127  1  A0 01            ldy #$01                            ; Color Attribute white on black background
001129  1  A9 20            lda #$20                            ; Blank character
00112B  1  A2 00            ldx #0
00112D  1  8D 23 9F     :   sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
001130  1  8C 23 9F         sty VERA_DATA0                      ; Write Attribute
001133  1  E8               inx
001134  1  D0 F7            bne :-
001136  1  C6 02            dec $02
001138  1  D0 F3            bne :-
00113A  1               
00113A  1               ; Scale Display x2 for resolution of 320 x 240 pixels
00113A  1               ;    lda #$40
00113A  1               ;    sta $9F2A
00113A  1               ;    sta $9F2B
00113A  1               
00113A  1  60               rts
00113B  1               
00113B  1               printfield2:
00113B  1               ; prep variables for vera med/high bytes
00113B  1               ;    topleft address for first tile is 0x04000
00113B  1  A9 40            lda #$40
00113D  1  8D 0C 09         sta vera_byte_mid
001140  1  9C 0B 09         stz vera_byte_low
001143  1               
001143  1               ; shift to the right (SCREENWIDTH - fieldwidth) /2 positions *2 to compensate for attribute
001143  1  A9 28            lda #SCREENWIDTH
001145  1  38               sec
001146  1  ED 09 09         sbc fieldwidth
001149  1  4A               lsr ; /2
00114A  1  0A               asl ; *2 - so uneven widths result in an even address and we don't end up in parameter space of the TILEMAP
00114B  1  8D 0B 09         sta vera_byte_low
00114E  1               
00114E  1               ; shift down number of rows (SCREENHEIGHT - fieldheight) /2 positions
00114E  1  A9 1E            lda #SCREENHEIGHT
001150  1  38               sec
001151  1  ED 0A 09         sbc fieldheight
001154  1  4A               lsr ; /2
001155  1  AA               tax ; transfer number of rows down to counter
001156  1               @loop:
001156  1  E0 00            cpx #$0 ; any rows down (left)?
001158  1  F0 16            beq @done ; exit loop when x == 0
00115A  1                   ; go 64 tiles further down - 64 * (1 address + 1 parameter of tile) = 128 / $80
00115A  1  AD 0B 09         lda vera_byte_low
00115D  1  18               clc
00115E  1  69 80            adc #$80    ; add row <<<ADDRESS>>> height for exactly one row down
001160  1  8D 0B 09         sta vera_byte_low
001163  1  90 08            bcc @decrement  ; no need to change the high byte
001165  1  AD 0C 09         lda vera_byte_mid
001168  1  69 00            adc #$0     ; add carry (so +1)
00116A  1  8D 0C 09         sta vera_byte_mid
00116D  1               @decrement: ; next row
00116D  1  CA               dex
00116E  1  80 E6            bra @loop
001170  1               @done:
001170  1               
001170  1               ; prepare the pointers to the back-end field data, so we know what to display
001170  1  A5 28            lda ZP_PTR_FIELD
001172  1  85 00            sta ZP_PTR_1
001174  1  A5 29            lda ZP_PTR_FIELD+1
001176  1  85 01            sta ZP_PTR_1+1
001178  1               
001178  1               ; start displaying the selected field
001178  1               ; (vera_byte_mid / vera_byte_low) is the address for the top-left position on-screen in the tile map
001178  1  A2 00            ldx #0 ; row counter
00117A  1               @nextrow:
00117A  1  A0 00            ldy #0 ; column counter
00117C  1                   ; prepare vera pointers for this row
00117C  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
00117F  1  A9 10            lda #$10
001181  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
001184  1  AD 0C 09         lda vera_byte_mid
001187  1  8D 21 9F         sta VERA_MID
00118A  1  AD 0B 09         lda vera_byte_low
00118D  1  8D 20 9F         sta VERA_LOW
001190  1               
001190  1               @row:
001190  1                   ; sweep the field, row by row, indexed by column y
001190  1  B1 00            lda (ZP_PTR_1),y
001192  1  C9 40            cmp #'@'
001194  1  F0 2A            beq @player
001196  1  C9 2B            cmp #'+'
001198  1  F0 26            beq @player
00119A  1  C9 24            cmp #'$'
00119C  1  F0 32            beq @crate
00119E  1  C9 2E            cmp #'.'
0011A0  1  F0 4E            beq @goal
0011A2  1  C9 2A            cmp #'*'
0011A4  1  F0 3A            beq @crateongoal
0011A6  1  C9 20            cmp #' '
0011A8  1  F0 06            beq @ignore
0011AA  1  C9 00            cmp #0
0011AC  1  F0 02            beq @ignore
0011AE  1  80 50            bra @wall
0011B0  1               @ignore:
0011B0  1                   ; ignore
0011B0  1  A9 00            lda #$0 ; black tile
0011B2  1  8D 23 9F         sta VERA_DATA0
0011B5  1  9C 23 9F         stz VERA_DATA0
0011B8  1  C8               iny
0011B9  1  CC 09 09         cpy fieldwidth
0011BC  1  D0 D2            bne @row
0011BE  1  80 4E            bra @endline
0011C0  1               @player:
0011C0  1  A9 02            lda #$2
0011C2  1  8D 23 9F         sta VERA_DATA0
0011C5  1  9C 23 9F         stz VERA_DATA0
0011C8  1  C8               iny
0011C9  1  CC 09 09         cpy fieldwidth
0011CC  1  D0 C2            bne @row
0011CE  1  80 3E            bra @endline
0011D0  1               @crate:
0011D0  1  A9 03            lda #$3
0011D2  1  8D 23 9F         sta VERA_DATA0
0011D5  1  9C 23 9F         stz VERA_DATA0
0011D8  1  C8               iny
0011D9  1  CC 09 09         cpy fieldwidth
0011DC  1  D0 B2            bne @row
0011DE  1  80 2E            bra @endline
0011E0  1               @crateongoal:
0011E0  1  A9 05            lda #$5
0011E2  1  8D 23 9F         sta VERA_DATA0
0011E5  1  9C 23 9F         stz VERA_DATA0
0011E8  1  C8               iny
0011E9  1  CC 09 09         cpy fieldwidth
0011EC  1  D0 A2            bne @row
0011EE  1  80 1E            bra @endline
0011F0  1               @goal:
0011F0  1  A9 04            lda #$4
0011F2  1  8D 23 9F         sta VERA_DATA0
0011F5  1  9C 23 9F         stz VERA_DATA0
0011F8  1  C8               iny
0011F9  1  CC 09 09         cpy fieldwidth
0011FC  1  D0 92            bne @row
0011FE  1  80 0E            bra @endline
001200  1               
001200  1               @wall:
001200  1  A9 01            lda #$1 ; load tile 1 ; brick
001202  1  8D 23 9F         sta VERA_DATA0
001205  1  9C 23 9F         stz VERA_DATA0
001208  1               
001208  1  C8               iny
001209  1  CC 09 09         cpy fieldwidth
00120C  1  D0 82            bne @row
00120E  1               @endline:
00120E  1                   ; advance pointer to next row in the field
00120E  1  A5 00            lda ZP_PTR_1
001210  1  18               clc
001211  1  6D 09 09         adc fieldwidth
001214  1  85 00            sta ZP_PTR_1
001216  1  90 06            bcc @checklastrow ; no carry, don't increment high byte on pointer
001218  1  A5 01            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
00121A  1  69 00            adc #0
00121C  1  85 01            sta ZP_PTR_1+1
00121E  1               @checklastrow:
00121E  1                   ; last row?
00121E  1                   ; increment vera pointer to next row
00121E  1  AD 0B 09         lda vera_byte_low
001221  1  18               clc
001222  1  69 80            adc #$80    ; add address delta to next row - 64 tiles * 2 = 128 / $80
001224  1  8D 0B 09         sta vera_byte_low
001227  1  90 08            bcc @next3  ; no need to change the high byte
001229  1  AD 0C 09         lda vera_byte_mid
00122C  1  69 00            adc #$0     ; add carry (so +1)
00122E  1  8D 0C 09         sta vera_byte_mid
001231  1               @next3:
001231  1  E8               inx
001232  1  EC 0A 09         cpx fieldheight
001235  1  F0 03            beq @nextsection
001237  1               
001237  1  4C 7A 11         jmp @nextrow
00123A  1               @nextsection:
00123A  1  60               rts
00123B  1               
00123B  1               titlescreen:
00123B  1  00 00 01 00  .incbin "tiles/titlescreen.bin"
00123F  1  01 00 01 00  
001243  1  00 00 00 00  
00223B  1               messagescreen:
00223B  1  00 00 00 00  .incbin "tiles/messagescreen.bin"
00223F  1  00 00 00 00  
002243  1  00 00 00 00  
00323B  1               completescreen:
00323B  1  00 00 00 00  .incbin "tiles/complete.bin"
00323F  1  00 00 00 00  
003243  1  00 00 00 00  
00423B  1               tiledata:
00423B  1               black:
00423B  1  00 00 00 00  .incbin "tiles/black.bin"
00423F  1  00 00 00 00  
004243  1  00 00 00 00  
00433B  1               Brick:
00433B  1  08 08 08 08  .incbin "tiles/brick.bin"
00433F  1  08 08 08 E5  
004343  1  08 08 08 08  
00443B  1               player:
00443B  1  00 00 00 00  .incbin "tiles/player.bin"
00443F  1  00 10 10 10  
004443  1  10 0B 00 00  
00453B  1               crate:
00453B  1  57 57 57 57  .incbin "tiles/crate.bin"
00453F  1  57 57 57 57  
004543  1  57 57 57 57  
00463B  1               goal:
00463B  1  00 00 00 00  .incbin "tiles/goal.bin"
00463F  1  00 00 00 00  
004643  1  00 00 00 00  
00473B  1               crateongoal:
00473B  1  57 57 57 57  .incbin "tiles/crateongoal.bin"
00473F  1  57 57 57 57  
004743  1  57 57 57 57  
00483B  1               LOADSTART:
00483B  1  02 00 1A 00  .incbin "levels.bin"
00483F  1  08 00 06 00  
004843  1  02 00 01 00  
0048B5  1               
0048B5  1               
