ca65 V2.19 - Git ab8bb268
Main file   : sokoban.asm
Current file: sokoban.asm

000000r 1               .include "x16.inc"
000000r 2               .ifndef X16_INC
000000r 2               X16_INC  = 1
000000r 2               
000000r 2               .ifndef __CX16__
000000r 2               __CX16__ = 1
000000r 2               .endif
000000r 2               
000000r 2               SD_DEVICE   = 1
000000r 2               HOST_DEVICE = 8
000000r 2               DISK_DEVICE = HOST_DEVICE
000000r 2               
000000r 2               
000000r 2               ; RAM Addresses
000000r 2               
000000r 2               ; Kernal Registers
000000r 2               r0						= $02
000000r 2               r0L					= r0
000000r 2               r0H					= r0+1
000000r 2               r1						= $04
000000r 2               r1L					= r1
000000r 2               r1H					= r1+1
000000r 2               r2						= $06
000000r 2               r2L					= r2
000000r 2               r2H					= r2+1
000000r 2               r3						= $08
000000r 2               r3L					= r3
000000r 2               r3H					= r3+1
000000r 2               r4						= $0A
000000r 2               r4L					= r4
000000r 2               r4H					= r4+1
000000r 2               r5						= $0C
000000r 2               r5L					= r5
000000r 2               r5H					= r5+1
000000r 2               r6						= $0E
000000r 2               r6L					= r6
000000r 2               r6H					= r6+1
000000r 2               r7						= $10
000000r 2               r7L					= r7
000000r 2               r7H					= r7+1
000000r 2               r8						= $12
000000r 2               r8L					= r8
000000r 2               r8H					= r8+1
000000r 2               r9						= $14
000000r 2               r9L					= r9
000000r 2               r9H					= r9+1
000000r 2               r10					= $16
000000r 2               r10L					= r10
000000r 2               r10H					= r10+1
000000r 2               r11					= $18
000000r 2               r11L					= r11
000000r 2               r11H					= r11+1
000000r 2               r12					= $1A
000000r 2               r12L					= r12
000000r 2               r12H					= r12+1
000000r 2               r13					= $1C
000000r 2               r13L					= r13
000000r 2               r13H					= r13+1
000000r 2               r14					= $1E
000000r 2               r14L					= r14
000000r 2               r14H					= r14+1
000000r 2               r15					= $20
000000r 2               r15L					= r15
000000r 2               r15H					= r15+1
000000r 2               
000000r 2               ; Zero-Page userspace
000000r 2               ZP_PTR_1          = $00	; first four pointers for temporary use only
000000r 2               ZP_PTR_2          = $22
000000r 2               ZP_PTR_3          = $24
000000r 2               ZP_PTR_4          = $26
000000r 2               
000000r 2               ; I/O Registers
000000r 2               VERA_addr_low     = $9F20
000000r 2               VERA_addr_high    = $9F21
000000r 2               VERA_addr_bank    = $9F22
000000r 2               VERA_data0        = $9F23
000000r 2               VERA_data1        = $9F24
000000r 2               VERA_ctrl         = $9F25
000000r 2               VERA_ien          = $9F26
000000r 2               VERA_isr          = $9F27
000000r 2               VERA_irqline_l    = $9F28
000000r 2               VERA_dc_video     = $9F29
000000r 2               VERA_dc_hscale    = $9F2A
000000r 2               VERA_dc_vscale    = $9F2B
000000r 2               VERA_dc_border    = $9F2C
000000r 2               VERA_dc_hstart    = $9F29
000000r 2               VERA_dc_hstop     = $9F2A
000000r 2               VERA_dc_vsstart   = $9F2B
000000r 2               VERA_dc_vstop     = $9F2C
000000r 2               VERA_L0_config    = $9F2D
000000r 2               VERA_L0_mapbase   = $9F2E
000000r 2               VERA_L0_tilebase  = $9F2F
000000r 2               VERA_L0_hscroll_l = $9F30
000000r 2               VERA_L0_hscroll_h = $9F31
000000r 2               VERA_L0_vscroll_l = $9F32
000000r 2               VERA_L0_vscroll_h = $9F33
000000r 2               VERA_L1_config    = $9F34
000000r 2               VERA_L1_mapbase   = $9F35
000000r 2               VERA_L1_tilebase  = $9F36
000000r 2               VERA_L1_hscroll_l = $9F37
000000r 2               VERA_L1_hscroll_h = $9F38
000000r 2               VERA_L1_vscroll_l = $9F39
000000r 2               VERA_L1_vscroll_h = $9F3A
000000r 2               VERA_audio_ctrl   = $9F3B
000000r 2               VERA_audio_rate   = $9F3C
000000r 2               VERA_audio_data   = $9F3D
000000r 2               VERA_spi_data     = $9F3E
000000r 2               VERA_spi_ctrl     = $9F3F
000000r 2               
000000r 2               
000000r 2               ROM_BANK          = $9F60
000000r 2               RAM_BANK          = $9F61
000000r 2               
000000r 2               YM_reg            = $9FE0
000000r 2               YM_data           = $9FE1
000000r 2               
000000r 2               ; Emulator Registers
000000r 2               GIF_ctrl          = $9FB5
000000r 2               
000000r 2               ; ROM Banks
000000r 2               KERNAL_ROM_BANK   = 0
000000r 2               BASIC_ROM_BANK    = 4
000000r 2               
000000r 2               ; Banked Addresses
000000r 2               RAM_WIN           = $A000
000000r 2               RAM_WIN_SIZE      = $2000
000000r 2               ROM_WIN           = $C000
000000r 2               
000000r 2               ; Kernal Subroutines
000000r 2               CONSOLE_set_paging_message		:= $FED5
000000r 2               CONSOLE_put_image					:= $FED8
000000r 2               CONSOLE_init						:= $FEDB
000000r 2               CONSOLE_put_char					:= $FEDE
000000r 2               CONSOLE_get_char					:= $FEE1
000000r 2               MEMORY_FILL                   := $FEE4
000000r 2               MEMORY_COPY                   := $FEE7
000000r 2               MEMORY_CRC                    := $FEEA
000000r 2               MEMORY_DECOMPRESS             := $FEED
000000r 2               SPRITE_set_image					:= $FEF0
000000r 2               SPRITE_set_position				:= $FEF3
000000r 2               FB_init                 		:= $FEF6
000000r 2               FB_get_info             		:= $FEF9
000000r 2               FB_set_palette          		:= $FEFC
000000r 2               FB_cursor_position      		:= $FEFF
000000r 2               FB_cursor_next_line     		:= $FF02
000000r 2               FB_get_pixel            		:= $FF05
000000r 2               FB_get_pixels           		:= $FF08
000000r 2               FB_set_pixel            		:= $FF0B
000000r 2               FB_set_pixels           		:= $FF0E
000000r 2               FB_set_8_pixels         		:= $FF11
000000r 2               FB_set_8_pixels_opaque  		:= $FF14
000000r 2               FB_fill_pixels          		:= $FF17
000000r 2               FB_filter_pixels        		:= $FF1A
000000r 2               FB_move_pixels          		:= $FF1D
000000r 2               GRAPH_init							:= $FF20
000000r 2               GRAPH_clear							:= $FF23
000000r 2               GRAPH_set_window					:= $FF26
000000r 2               GRAPH_set_colors					:= $FF29
000000r 2               GRAPH_draw_line					:= $FF2C
000000r 2               GRAPH_draw_rect					:= $FF2F
000000r 2               GRAPH_move_rect					:= $FF32
000000r 2               GRAPH_draw_oval					:= $FF35
000000r 2               GRAPH_draw_image					:= $FF38
000000r 2               GRAPH_set_font						:= $FF3B
000000r 2               GRAPH_get_char_size				:= $FF3E
000000r 2               GRAPH_put_char						:= $FF41
000000r 2               MONITOR								:= $FF44
000000r 2               ENTER_BASIC							:= $FF47
000000r 2               CLOCK_SET_DATE_TIME           := $FF4D
000000r 2               CLOCK_GET_DATE_TIME           := $FF50
000000r 2               JOYSTICK_SCAN                 := $FF53
000000r 2               JOYSTICK_GET                  := $FF56
000000r 2               SCREEN_SET_MODE					:= $FF5F
000000r 2               SCREEN_SET_CHARSET				:= $FF62
000000r 2               
000000r 2               MOUSE_CONFIG                  := $FF68
000000r 2               MOUSE_GET			            := $FF6B
000000r 2               MOUSE_SCAN                    := $FF71
000000r 2               SCINIT                        := $FF81
000000r 2               IOINIT                        := $FF84
000000r 2               RAMTAS                        := $FF87
000000r 2               RESTOR                        := $FF8A
000000r 2               SETLFS                        := $FFBA
000000r 2               SETNAM                        := $FFBD
000000r 2               OPEN                          := $FFC0
000000r 2               CLOSE                         := $FFC3
000000r 2               CHKIN                         := $FFC6
000000r 2               CHKOUT                        := $FFC9
000000r 2               CLRCHN                        := $FFCC
000000r 2               CHRIN                         := $FFCF
000000r 2               CHROUT                        := $FFD2
000000r 2               LOAD                          := $FFD5
000000r 2               SAVE                          := $FFD8
000000r 2               SETTIM                        := $FFDB
000000r 2               RDTIM                         := $FFDE
000000r 2               STOP                          := $FFE1
000000r 2               GETIN                         := $FFE4
000000r 2               CLALL									:= $FFE7
000000r 2               UDTIM									:= $FFEA
000000r 2               SCREEN								:= $FFED
000000r 2               PLOT									:= $FFF0
000000r 2               IOBASE								:= $FFF3
000000r 2               
000000r 2               ; BASIC Vectors
000000r 2               BASIC_PANIC       := $C000
000000r 2               BASIC_INIT        := $C003
000000r 2               
000000r 2               
000000r 2               ; VRAM Addresses
000000r 2               VRAM_petscii   = $0F800
000000r 2               VRAM_psg       = $1F9C0
000000r 2               VRAM_palette   = $1FA00
000000r 2               VRAM_sprattr   = $1FC00
000000r 2               
000000r 2               ; IRQs
000000r 2               IRQVec         := $0314
000000r 2               BRKVec         := $0316
000000r 2               NMIVec         := $0318
000000r 2               
000000r 2               ;   Macros
000000r 2               
000000r 2               .macro VERA_SET_ADDR addr, stride
000000r 2               	.ifnblank stride
000000r 2                     .if stride < 0
000000r 2                        lda #((^addr) | $08 | ((0-stride) << 4))
000000r 2                     .else
000000r 2                        lda #((^addr) | (stride << 4))
000000r 2                     .endif
000000r 2               	.else
000000r 2               		lda #(^addr) | $10
000000r 2               	.endif
000000r 2               
000000r 2               	sta VERA_addr_bank
000000r 2               	lda #(>addr)
000000r 2               	sta VERA_addr_high
000000r 2               	lda #(<addr)
000000r 2               	sta VERA_addr_low
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .endif
000000r 2               
000000r 1               
000000r 1               temp = $30  ; used for temp 8/16 bit storage $30/$31
000000r 1               
000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C 92 08        jmp start
000810  1               
000810  1  50 52 45 53  message: .byte "press a key",0
000814  1  53 20 41 20  
000818  1  4B 45 59 00  
00081C  1  47 4F 41 4C  winstatement: .byte "goal reached!",0
000820  1  20 52 45 41  
000824  1  43 48 45 44  
00082A  1               
00082A  1               ; variables that the program uses during execution
00082A  1  00           xpos:           .byte 0
00082B  1  00           ypos:           .byte 0
00082C  1  02           no_goals:       .byte 2
00082D  1  00           no_goalsreached:.byte 0
00082E  1  00           fieldwidth:     .byte 0
00082F  1  00           fieldheight:    .byte 0
000830  1               
000830  1               field:
000830  1               ;     01234567890123  4
000830  1  20 20 20 20  .byte"       ####   "
000834  1  20 20 20 23  
000838  1  23 23 23 20  
00083E  1  23 23 23 23  .byte"########  ##  "
000842  1  23 23 23 23  
000846  1  20 20 23 23  
00084C  1  23 20 20 20  .byte"#          ###"
000850  1  20 20 20 20  
000854  1  20 20 20 23  
00085A  1  23 20 40 24  .byte"# @$$ ##   ..#"
00085E  1  24 20 23 23  
000862  1  20 20 20 2E  
000868  1  23 20 20 20  .byte"#      ##  ..#"
00086C  1  20 20 20 23  
000870  1  23 20 20 2E  
000876  1  23 20 20 2E  .byte"#  ..     ####"
00087A  1  2E 20 20 20  
00087E  1  20 20 23 23  
000884  1  23 23 23 23  .byte"###########   "
000888  1  23 23 23 23  
00088C  1  23 23 23 20  
000892  1               
000892  1               XPOS = 2 ; fixed value for now, need to read in later. zero-based value
000892  1               YPOS = 3 ; same
000892  1               
000892  1               FIELDWIDTH = 14
000892  1               FIELDHEIGHT = 7
000892  1               NEWLINE = $0D
000892  1               UPPERCASE = $8E
000892  1               CLEARSCREEN = 147
000892  1               
000892  1               ; usage of zeropage pointers:
000892  1               ; ZP_PTR_1 - temporary pointer
000892  1               ; ZP_PTR_2 - temporary pointer
000892  1               ; ZP_PTR_3 - position of player
000892  1               ; ZP_PTR_4 - use as height/width
000892  1               
000892  1               start:
000892  1                   ; force uppercase
000892  1  A9 8E            lda #UPPERCASE
000894  1  20 D2 FF         jsr CHROUT
000897  1               
000897  1  20 4F 0A         jsr initfield
00089A  1  20 AE 0A         jsr cls
00089D  1  20 7D 0A         jsr printfield
0008A0  1               
0008A0  1               keyloop:
0008A0  1  20 E4 FF         jsr GETIN
0008A3  1               @checkdown:
0008A3  1  C9 11            cmp #$11
0008A5  1  D0 05            bne @checkup
0008A7  1  20 3C 09         jsr handledown
0008AA  1  80 1E            bra @done
0008AC  1               @checkup:
0008AC  1  C9 91            cmp #$91
0008AE  1  D0 05            bne @checkleft
0008B0  1  20 15 09         jsr handleup
0008B3  1  80 15            bra @done
0008B5  1               @checkleft:
0008B5  1  C9 9D            cmp #$9d
0008B7  1  D0 05            bne @checkright
0008B9  1  20 F7 08         jsr handleleft
0008BC  1  80 0C            bra @done
0008BE  1               @checkright:
0008BE  1  C9 1D            cmp #$1d
0008C0  1  D0 03            bne @checkquit
0008C2  1  20 D9 08         jsr handleright
0008C5  1               @checkquit:
0008C5  1  C9 51            cmp #$51
0008C7  1  D0 01            bne @done
0008C9  1  60               rts
0008CA  1               @done:
0008CA  1                   ; check if we have reached all goals
0008CA  1  AD 2C 08         lda no_goals
0008CD  1  CD 2D 08         cmp no_goalsreached
0008D0  1  D0 04            bne @donenextkey
0008D2  1  20 43 0A         jsr printwinstatement
0008D5  1  60               rts
0008D6  1               @donenextkey:
0008D6  1  4C A0 08         jmp keyloop
0008D9  1               
0008D9  1               handleright:
0008D9  1                   ; pointers
0008D9  1                   ; 3 - player
0008D9  1                   ; 2 - block to the right of the player
0008D9  1                   ; 1 - block to the right of that block
0008D9  1               
0008D9  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1x position
0008D9  1  18               clc
0008DA  1  A5 24            lda ZP_PTR_3
0008DC  1  69 01            adc #$1               ; 1x position
0008DE  1  85 22            sta ZP_PTR_2
0008E0  1  A5 25            lda ZP_PTR_3+1
0008E2  1  69 00            adc #$0
0008E4  1  85 23            sta ZP_PTR_2+1
0008E6  1               
0008E6  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2x position
0008E6  1  18               clc
0008E7  1  A5 24            lda ZP_PTR_3
0008E9  1  69 02            adc #$2               ; 2x position
0008EB  1  85 00            sta ZP_PTR_1
0008ED  1  A5 25            lda ZP_PTR_3+1
0008EF  1  69 00            adc #$0
0008F1  1  85 01            sta ZP_PTR_1+1
0008F3  1               
0008F3  1  20 63 09         jsr handlemove
0008F6  1  60               rts
0008F7  1               
0008F7  1               handleleft:
0008F7  1                   ; pointers
0008F7  1                   ; 3 - player
0008F7  1                   ; 2 - block to the left of the player
0008F7  1                   ; 1 - block to the left of that block
0008F7  1               
0008F7  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1x position
0008F7  1  38               sec
0008F8  1  A5 24            lda ZP_PTR_3
0008FA  1  E9 01            sbc #$1               ; 1x position
0008FC  1  85 22            sta ZP_PTR_2
0008FE  1  A5 25            lda ZP_PTR_3+1
000900  1  E9 00            sbc #$0
000902  1  85 23            sta ZP_PTR_2+1
000904  1               
000904  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2x position
000904  1  38               sec
000905  1  A5 24            lda ZP_PTR_3
000907  1  E9 02            sbc #$2               ; 2x position
000909  1  85 00            sta ZP_PTR_1
00090B  1  A5 25            lda ZP_PTR_3+1
00090D  1  E9 00            sbc #$0
00090F  1  85 01            sta ZP_PTR_1+1
000911  1               
000911  1  20 63 09         jsr handlemove
000914  1               
000914  1               @done:
000914  1  60               rts
000915  1               handleup:
000915  1                   ; pointers
000915  1                   ; 3 - player
000915  1                   ; 2 - block to the top of the player
000915  1                   ; 1 - block to the top of that block
000915  1               
000915  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1xFIELDWIDTH
000915  1  A9 0E            lda #FIELDWIDTH
000917  1  85 30            sta temp
000919  1  38               sec
00091A  1  A5 24            lda ZP_PTR_3
00091C  1  E5 30            sbc temp
00091E  1  85 22            sta ZP_PTR_2
000920  1  A5 25            lda ZP_PTR_3+1
000922  1  E9 00            sbc #$0
000924  1  85 23            sta ZP_PTR_2+1
000926  1               
000926  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2xFIELDWIDTH
000926  1  A9 0E            lda #FIELDWIDTH
000928  1  0A               asl ; 2x
000929  1  85 30            sta temp
00092B  1  38               sec
00092C  1  A5 24            lda ZP_PTR_3
00092E  1  E5 30            sbc temp
000930  1  85 00            sta ZP_PTR_1
000932  1  A5 25            lda ZP_PTR_3+1
000934  1  E9 00            sbc #$0
000936  1  85 01            sta ZP_PTR_1+1
000938  1               
000938  1  20 63 09         jsr handlemove
00093B  1               
00093B  1               @done:
00093B  1  60               rts
00093C  1               
00093C  1               handledown:
00093C  1                   ; pointers
00093C  1                   ; 3 - player
00093C  1                   ; 2 - block to the bottom of the player
00093C  1                   ; 1 - block to the bottom of that block
00093C  1               
00093C  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1xFIELDWIDTH
00093C  1  A9 0E            lda #FIELDWIDTH
00093E  1  85 30            sta temp
000940  1  18               clc
000941  1  A5 24            lda ZP_PTR_3
000943  1  65 30            adc temp
000945  1  85 22            sta ZP_PTR_2
000947  1  A5 25            lda ZP_PTR_3+1
000949  1  69 00            adc #$0
00094B  1  85 23            sta ZP_PTR_2+1
00094D  1               
00094D  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2xFIELDWIDTH
00094D  1  A9 0E            lda #FIELDWIDTH
00094F  1  0A               asl ; 2x
000950  1  85 30            sta temp
000952  1  18               clc
000953  1  A5 24            lda ZP_PTR_3
000955  1  65 30            adc temp
000957  1  85 00            sta ZP_PTR_1
000959  1  A5 25            lda ZP_PTR_3+1
00095B  1  69 00            adc #$0
00095D  1  85 01            sta ZP_PTR_1+1
00095F  1               
00095F  1  20 63 09         jsr handlemove
000962  1  60               rts
000963  1               
000963  1               handlemove:
000963  1                   ; pointers
000963  1                   ; 3 - points to the player position
000963  1                   ; 2 - points to the next block at the indicated direction
000963  1                   ; 1 - points to the block after that block
000963  1               
000963  1  A0 00            ldy #0
000965  1  B1 22            lda (ZP_PTR_2),y
000967  1  C9 20            cmp #' ' ; empty block next to player?
000969  1  F0 06            beq @moveplayertopoint2
00096B  1  C9 2E            cmp #'.' ; goal position next to player?
00096D  1  F0 02            beq @moveplayertopoint2
00096F  1  80 0D            bra @next ; no ' ' or '.' found next to player, is it a crate or a wall?
000971  1               @moveplayertopoint2:
000971  1                   ; move player to pointer 2
000971  1  20 F2 09         jsr moveplayeronfield
000974  1  20 A8 09         jsr moveplayerposition
000977  1               
000977  1  20 AE 0A         jsr cls
00097A  1  20 7D 0A         jsr printfield
00097D  1               
00097D  1  60               rts
00097E  1               @next:
00097E  1  A0 00            ldy #0
000980  1  B1 22            lda (ZP_PTR_2),y
000982  1  C9 24            cmp #'$' ; crate next to player?
000984  1  F0 06            beq @combinedmovecheck
000986  1  C9 2A            cmp #'*' ; crate on goal next to player?
000988  1  F0 02            beq @combinedmovecheck
00098A  1  80 1B            bra @done ; something else not able to push
00098C  1               @combinedmovecheck:
00098C  1  B1 00            lda (ZP_PTR_1),y
00098E  1  C9 20            cmp #' ' ; space after crate?
000990  1  F0 06            beq @combinedmove
000992  1  C9 2E            cmp #'.' ; goal after crate?
000994  1  F0 02            beq @combinedmove
000996  1  80 0F            bra @done ; nothing to move
000998  1               @combinedmove:
000998  1  20 B1 09         jsr movecrateonfield
00099B  1  20 F2 09         jsr moveplayeronfield
00099E  1  20 A8 09         jsr moveplayerposition
0009A1  1               
0009A1  1  20 AE 0A         jsr cls
0009A4  1  20 7D 0A         jsr printfield
0009A7  1               @done:
0009A7  1  60               rts
0009A8  1               
0009A8  1               moveplayerposition:
0009A8  1                   ; moves pointer 3 to position of pointer 2
0009A8  1  A5 22            lda ZP_PTR_2
0009AA  1  85 24            sta ZP_PTR_3
0009AC  1  A5 23            lda ZP_PTR_2+1
0009AE  1  85 25            sta ZP_PTR_3+1
0009B0  1  60               rts
0009B1  1               
0009B1  1               movecrateonfield:
0009B1  1                   ; copies (ZP_PTR_2) to (ZP_PTR_1)
0009B1  1                   ; and handles different crate move options (normal / crate on goal)
0009B1  1  A0 00            ldy #0
0009B3  1  B1 22            lda (ZP_PTR_2),y
0009B5  1                   ; was there a goal underneath the crate?
0009B5  1  C9 2A            cmp #'*'
0009B7  1  D0 1D            bne @crateonly
0009B9  1                   ; do we move to a goal position? (from goal to goal..)
0009B9  1  B1 00            lda (ZP_PTR_1),y
0009BB  1  C9 2E            cmp #'.'
0009BD  1  D0 0A            bne @movetonormalposition
0009BF  1               @movetogoalposition:
0009BF  1  A9 2A            lda #'*' ; crate on goal symbol
0009C1  1  91 00            sta (ZP_PTR_1),y
0009C3  1  A9 2E            lda #'.'
0009C5  1  91 22            sta (ZP_PTR_2),y
0009C7  1  80 28            bra @done
0009C9  1               @movetonormalposition:
0009C9  1  CE 2D 08         dec no_goalsreached ; -1 win points
0009CC  1  A9 24            lda #'$'; crate symbol
0009CE  1  91 00            sta (ZP_PTR_1),y
0009D0  1  A9 2E            lda #'.'
0009D2  1  91 22            sta (ZP_PTR_2),y
0009D4  1  80 1B            bra @done
0009D6  1               @crateonly:
0009D6  1                   ; is the destination a goal?
0009D6  1  B1 00            lda (ZP_PTR_1),y
0009D8  1  C9 2E            cmp #'.'
0009DA  1  D0 0D            bne @crateonly_nongoal
0009DC  1                   ; crate moves to goal, from a non-goal position
0009DC  1  EE 2D 08         inc no_goalsreached ; +1 to win
0009DF  1  A9 2A            lda #'*'
0009E1  1  91 00            sta (ZP_PTR_1),y
0009E3  1  A9 20            lda #' '
0009E5  1  91 22            sta (ZP_PTR_2),y
0009E7  1  80 08            bra @done
0009E9  1               @crateonly_nongoal:
0009E9  1  A9 24            lda #'$'
0009EB  1  91 00            sta (ZP_PTR_1),y
0009ED  1  A9 20            lda #' '; empty space to move the player in next
0009EF  1  91 22            sta (ZP_PTR_2),y
0009F1  1               @done:
0009F1  1  60               rts
0009F2  1               
0009F2  1               moveplayeronfield:
0009F2  1                   ; copies (ZP_PTR_3) to (ZP_PTR_2)
0009F2  1                   ; and handles multiple player move options (normal / on goal)
0009F2  1  A0 00            ldy #0
0009F4  1  B1 24            lda (ZP_PTR_3),y
0009F6  1                   ; was there a goal underneath the player?
0009F6  1  C9 2B            cmp #'+'
0009F8  1  D0 1A            bne @playeronly
0009FA  1                   ; do we move to a goal position? (from goal to goal..)
0009FA  1  B1 22            lda (ZP_PTR_2),y
0009FC  1  C9 2E            cmp #'.'
0009FE  1  D0 0A            bne @movetonormalposition
000A00  1               @movetogoalposition:
000A00  1  A9 2B            lda #'+' ; player on goal symbol
000A02  1  91 22            sta (ZP_PTR_2),y
000A04  1  A9 2E            lda #'.'
000A06  1  91 24            sta (ZP_PTR_3),y
000A08  1  80 22            bra @done
000A0A  1               @movetonormalposition:
000A0A  1  A9 40            lda #'@'; crate symbol
000A0C  1  91 22            sta (ZP_PTR_2),y
000A0E  1  A9 2E            lda #'.'
000A10  1  91 24            sta (ZP_PTR_3),y
000A12  1  80 18            bra @done
000A14  1               @playeronly:
000A14  1                   ; is the destination a goal?
000A14  1  B1 22            lda (ZP_PTR_2),y
000A16  1  C9 2E            cmp #'.'
000A18  1  D0 0A            bne @playeronly_nongoal
000A1A  1                   ; player moves to goal, from a non-goal position
000A1A  1  A9 2B            lda #'+'
000A1C  1  91 22            sta (ZP_PTR_2),y
000A1E  1  A9 20            lda #' '
000A20  1  91 24            sta (ZP_PTR_3),y
000A22  1  80 08            bra @done
000A24  1               @playeronly_nongoal:
000A24  1  A9 40            lda #'@'
000A26  1  91 22            sta (ZP_PTR_2),y
000A28  1  A9 20            lda #' '; empty space
000A2A  1  91 24            sta (ZP_PTR_3),y
000A2C  1               @done:
000A2C  1  60               rts
000A2D  1               
000A2D  1               print:
000A2D  1                   ; print from address ZP_PTR_1
000A2D  1                   ; don't end with newline character
000A2D  1  A0 00            ldy #0
000A2F  1               @loop:
000A2F  1  B1 00            lda (ZP_PTR_1),y ; load character from address
000A31  1  F0 06            beq @done        ; end at 0 character
000A33  1  20 D2 FF         jsr CHROUT
000A36  1  C8               iny
000A37  1  80 F6            bra @loop
000A39  1               @done:
000A39  1  60               rts
000A3A  1               
000A3A  1               printline:
000A3A  1                   ; print from address ZP_PTR_1
000A3A  1                   ; end with newline character
000A3A  1  20 2D 0A         jsr print
000A3D  1  A9 0D            lda #NEWLINE
000A3F  1  20 D2 FF         jsr CHROUT
000A42  1  60               rts
000A43  1               
000A43  1               printwinstatement:
000A43  1  A9 1C            lda #<winstatement
000A45  1  85 00            sta ZP_PTR_1
000A47  1  A9 08            lda #>winstatement
000A49  1  85 01            sta ZP_PTR_1+1
000A4B  1  20 3A 0A         jsr printline
000A4E  1  60               rts
000A4F  1               
000A4F  1               initfield:
000A4F  1                   ;skeleton code for now
000A4F  1               
000A4F  1                   ; reset goals
000A4F  1  A9 00            lda #0
000A51  1  8D 2D 08         sta no_goalsreached
000A54  1               
000A54  1                   ; advance to start of field
000A54  1  A9 30            lda #<field
000A56  1  85 24            sta ZP_PTR_3
000A58  1  A9 08            lda #>field
000A5A  1  85 25            sta ZP_PTR_3+1
000A5C  1                   ; add x,y position to the pointer
000A5C  1  A5 24            lda ZP_PTR_3
000A5E  1  18               clc
000A5F  1  69 02            adc #XPOS
000A61  1  85 24            sta ZP_PTR_3
000A63  1                   ; check carry to high byte
000A63  1  90 07            bcc @ypos
000A65  1  A5 25            lda ZP_PTR_3+1 ; store carry to high byte
000A67  1  18               clc
000A68  1  69 01            adc #1
000A6A  1  85 25            sta ZP_PTR_3+1
000A6C  1               @ypos:
000A6C  1  A5 24            lda ZP_PTR_3
000A6E  1  18               clc
000A6F  1  69 2A            adc #(YPOS * FIELDWIDTH)
000A71  1  85 24            sta ZP_PTR_3
000A73  1                   ; check for carry to high byte
000A73  1  90 07            bcc @done
000A75  1  A5 25            lda ZP_PTR_3+1
000A77  1  18               clc
000A78  1  69 01            adc #1
000A7A  1  85 25            sta ZP_PTR_3+1
000A7C  1               @done:
000A7C  1  60              rts
000A7D  1               
000A7D  1               printfield:
000A7D  1                   ; no clearscreen, just print the field to screen on current position
000A7D  1                   ; depends only on
000A7D  1                   ; - field label for start of field
000A7D  1                   ; - FIELDHEIGHT constant
000A7D  1                   ; - FIELDWIDTH constant
000A7D  1               
000A7D  1  A9 30            lda #<field
000A7F  1  85 00            sta ZP_PTR_1
000A81  1  A9 08            lda #>field
000A83  1  85 01            sta ZP_PTR_1+1
000A85  1  A2 00            ldx #0 ; row counter
000A87  1               @nextrow:
000A87  1  A0 00            ldy #0 ; column counter
000A89  1               @row:
000A89  1  B1 00            lda (ZP_PTR_1),y
000A8B  1  20 D2 FF         jsr CHROUT
000A8E  1  C8               iny
000A8F  1  C0 0E            cpy #FIELDWIDTH
000A91  1  D0 F6            bne @row
000A93  1               @endline:
000A93  1  A9 0D            lda #NEWLINE
000A95  1  20 D2 FF         jsr CHROUT
000A98  1               
000A98  1                   ; advance pointer to next row
000A98  1  A5 00            lda ZP_PTR_1
000A9A  1  18               clc
000A9B  1  69 0E            adc #FIELDWIDTH
000A9D  1  85 00            sta ZP_PTR_1
000A9F  1  90 07            bcc @checklastrow ; no carry, don't increment high byte on pointer
000AA1  1  A5 01            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
000AA3  1  18               clc
000AA4  1  69 01            adc #1
000AA6  1  85 01            sta ZP_PTR_1+1
000AA8  1               @checklastrow:
000AA8  1                   ; last row?
000AA8  1  E8               inx
000AA9  1  E0 07            cpx #FIELDHEIGHT
000AAB  1  D0 DA            bne @nextrow
000AAD  1  60               rts
000AAE  1               
000AAE  1               cls:
000AAE  1  A9 93            lda #CLEARSCREEN
000AB0  1  20 D2 FF         jsr CHROUT
000AB3  1  60               rts
000AB3  1               
