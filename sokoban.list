ca65 V2.19 - Git ab8bb268
Main file   : sokoban.asm
Current file: sokoban.asm

000000r 1               .include "x16.inc"
000000r 2               .ifndef X16_INC
000000r 2               X16_INC  = 1
000000r 2               
000000r 2               .ifndef __CX16__
000000r 2               __CX16__ = 1
000000r 2               .endif
000000r 2               
000000r 2               SD_DEVICE   = 1
000000r 2               HOST_DEVICE = 8
000000r 2               DISK_DEVICE = HOST_DEVICE
000000r 2               
000000r 2               
000000r 2               ; RAM Addresses
000000r 2               
000000r 2               ; Kernal Registers
000000r 2               r0						= $02
000000r 2               r0L					= r0
000000r 2               r0H					= r0+1
000000r 2               r1						= $04
000000r 2               r1L					= r1
000000r 2               r1H					= r1+1
000000r 2               r2						= $06
000000r 2               r2L					= r2
000000r 2               r2H					= r2+1
000000r 2               r3						= $08
000000r 2               r3L					= r3
000000r 2               r3H					= r3+1
000000r 2               r4						= $0A
000000r 2               r4L					= r4
000000r 2               r4H					= r4+1
000000r 2               r5						= $0C
000000r 2               r5L					= r5
000000r 2               r5H					= r5+1
000000r 2               r6						= $0E
000000r 2               r6L					= r6
000000r 2               r6H					= r6+1
000000r 2               r7						= $10
000000r 2               r7L					= r7
000000r 2               r7H					= r7+1
000000r 2               r8						= $12
000000r 2               r8L					= r8
000000r 2               r8H					= r8+1
000000r 2               r9						= $14
000000r 2               r9L					= r9
000000r 2               r9H					= r9+1
000000r 2               r10					= $16
000000r 2               r10L					= r10
000000r 2               r10H					= r10+1
000000r 2               r11					= $18
000000r 2               r11L					= r11
000000r 2               r11H					= r11+1
000000r 2               r12					= $1A
000000r 2               r12L					= r12
000000r 2               r12H					= r12+1
000000r 2               r13					= $1C
000000r 2               r13L					= r13
000000r 2               r13H					= r13+1
000000r 2               r14					= $1E
000000r 2               r14L					= r14
000000r 2               r14H					= r14+1
000000r 2               r15					= $20
000000r 2               r15L					= r15
000000r 2               r15H					= r15+1
000000r 2               
000000r 2               ; Zero-Page userspace
000000r 2               ZP_PTR_1          = $00	; first four pointers for temporary use only
000000r 2               ZP_PTR_2          = $22
000000r 2               ZP_PTR_3          = $24
000000r 2               ZP_PTR_4          = $26
000000r 2               
000000r 2               ; I/O Registers
000000r 2               VERA_addr_low     = $9F20
000000r 2               VERA_addr_high    = $9F21
000000r 2               VERA_addr_bank    = $9F22
000000r 2               VERA_data0        = $9F23
000000r 2               VERA_data1        = $9F24
000000r 2               VERA_ctrl         = $9F25
000000r 2               VERA_ien          = $9F26
000000r 2               VERA_isr          = $9F27
000000r 2               VERA_irqline_l    = $9F28
000000r 2               VERA_dc_video     = $9F29
000000r 2               VERA_dc_hscale    = $9F2A
000000r 2               VERA_dc_vscale    = $9F2B
000000r 2               VERA_dc_border    = $9F2C
000000r 2               VERA_dc_hstart    = $9F29
000000r 2               VERA_dc_hstop     = $9F2A
000000r 2               VERA_dc_vsstart   = $9F2B
000000r 2               VERA_dc_vstop     = $9F2C
000000r 2               VERA_L0_config    = $9F2D
000000r 2               VERA_L0_mapbase   = $9F2E
000000r 2               VERA_L0_tilebase  = $9F2F
000000r 2               VERA_L0_hscroll_l = $9F30
000000r 2               VERA_L0_hscroll_h = $9F31
000000r 2               VERA_L0_vscroll_l = $9F32
000000r 2               VERA_L0_vscroll_h = $9F33
000000r 2               VERA_L1_config    = $9F34
000000r 2               VERA_L1_mapbase   = $9F35
000000r 2               VERA_L1_tilebase  = $9F36
000000r 2               VERA_L1_hscroll_l = $9F37
000000r 2               VERA_L1_hscroll_h = $9F38
000000r 2               VERA_L1_vscroll_l = $9F39
000000r 2               VERA_L1_vscroll_h = $9F3A
000000r 2               VERA_audio_ctrl   = $9F3B
000000r 2               VERA_audio_rate   = $9F3C
000000r 2               VERA_audio_data   = $9F3D
000000r 2               VERA_spi_data     = $9F3E
000000r 2               VERA_spi_ctrl     = $9F3F
000000r 2               
000000r 2               
000000r 2               ROM_BANK          = $9F60
000000r 2               RAM_BANK          = $9F61
000000r 2               
000000r 2               YM_reg            = $9FE0
000000r 2               YM_data           = $9FE1
000000r 2               
000000r 2               ; Emulator Registers
000000r 2               GIF_ctrl          = $9FB5
000000r 2               
000000r 2               ; ROM Banks
000000r 2               KERNAL_ROM_BANK   = 0
000000r 2               BASIC_ROM_BANK    = 4
000000r 2               
000000r 2               ; Banked Addresses
000000r 2               RAM_WIN           = $A000
000000r 2               RAM_WIN_SIZE      = $2000
000000r 2               ROM_WIN           = $C000
000000r 2               
000000r 2               ; Kernal Subroutines
000000r 2               CONSOLE_set_paging_message		:= $FED5
000000r 2               CONSOLE_put_image					:= $FED8
000000r 2               CONSOLE_init						:= $FEDB
000000r 2               CONSOLE_put_char					:= $FEDE
000000r 2               CONSOLE_get_char					:= $FEE1
000000r 2               MEMORY_FILL                   := $FEE4
000000r 2               MEMORY_COPY                   := $FEE7
000000r 2               MEMORY_CRC                    := $FEEA
000000r 2               MEMORY_DECOMPRESS             := $FEED
000000r 2               SPRITE_set_image					:= $FEF0
000000r 2               SPRITE_set_position				:= $FEF3
000000r 2               FB_init                 		:= $FEF6
000000r 2               FB_get_info             		:= $FEF9
000000r 2               FB_set_palette          		:= $FEFC
000000r 2               FB_cursor_position      		:= $FEFF
000000r 2               FB_cursor_next_line     		:= $FF02
000000r 2               FB_get_pixel            		:= $FF05
000000r 2               FB_get_pixels           		:= $FF08
000000r 2               FB_set_pixel            		:= $FF0B
000000r 2               FB_set_pixels           		:= $FF0E
000000r 2               FB_set_8_pixels         		:= $FF11
000000r 2               FB_set_8_pixels_opaque  		:= $FF14
000000r 2               FB_fill_pixels          		:= $FF17
000000r 2               FB_filter_pixels        		:= $FF1A
000000r 2               FB_move_pixels          		:= $FF1D
000000r 2               GRAPH_init							:= $FF20
000000r 2               GRAPH_clear							:= $FF23
000000r 2               GRAPH_set_window					:= $FF26
000000r 2               GRAPH_set_colors					:= $FF29
000000r 2               GRAPH_draw_line					:= $FF2C
000000r 2               GRAPH_draw_rect					:= $FF2F
000000r 2               GRAPH_move_rect					:= $FF32
000000r 2               GRAPH_draw_oval					:= $FF35
000000r 2               GRAPH_draw_image					:= $FF38
000000r 2               GRAPH_set_font						:= $FF3B
000000r 2               GRAPH_get_char_size				:= $FF3E
000000r 2               GRAPH_put_char						:= $FF41
000000r 2               MONITOR								:= $FF44
000000r 2               ENTER_BASIC							:= $FF47
000000r 2               CLOCK_SET_DATE_TIME           := $FF4D
000000r 2               CLOCK_GET_DATE_TIME           := $FF50
000000r 2               JOYSTICK_SCAN                 := $FF53
000000r 2               JOYSTICK_GET                  := $FF56
000000r 2               SCREEN_SET_MODE					:= $FF5F
000000r 2               SCREEN_SET_CHARSET				:= $FF62
000000r 2               
000000r 2               MOUSE_CONFIG                  := $FF68
000000r 2               MOUSE_GET			            := $FF6B
000000r 2               MOUSE_SCAN                    := $FF71
000000r 2               SCINIT                        := $FF81
000000r 2               IOINIT                        := $FF84
000000r 2               RAMTAS                        := $FF87
000000r 2               RESTOR                        := $FF8A
000000r 2               SETLFS                        := $FFBA
000000r 2               SETNAM                        := $FFBD
000000r 2               OPEN                          := $FFC0
000000r 2               CLOSE                         := $FFC3
000000r 2               CHKIN                         := $FFC6
000000r 2               CHKOUT                        := $FFC9
000000r 2               CLRCHN                        := $FFCC
000000r 2               CHRIN                         := $FFCF
000000r 2               CHROUT                        := $FFD2
000000r 2               LOAD                          := $FFD5
000000r 2               SAVE                          := $FFD8
000000r 2               SETTIM                        := $FFDB
000000r 2               RDTIM                         := $FFDE
000000r 2               STOP                          := $FFE1
000000r 2               GETIN                         := $FFE4
000000r 2               CLALL									:= $FFE7
000000r 2               UDTIM									:= $FFEA
000000r 2               SCREEN								:= $FFED
000000r 2               PLOT									:= $FFF0
000000r 2               IOBASE								:= $FFF3
000000r 2               
000000r 2               ; BASIC Vectors
000000r 2               BASIC_PANIC       := $C000
000000r 2               BASIC_INIT        := $C003
000000r 2               
000000r 2               
000000r 2               ; VRAM Addresses
000000r 2               VRAM_petscii   = $0F800
000000r 2               VRAM_psg       = $1F9C0
000000r 2               VRAM_palette   = $1FA00
000000r 2               VRAM_sprattr   = $1FC00
000000r 2               
000000r 2               ; IRQs
000000r 2               IRQVec         := $0314
000000r 2               BRKVec         := $0316
000000r 2               NMIVec         := $0318
000000r 2               
000000r 2               ;   Macros
000000r 2               
000000r 2               .macro VERA_SET_ADDR addr, stride
000000r 2               	.ifnblank stride
000000r 2                     .if stride < 0
000000r 2                        lda #((^addr) | $08 | ((0-stride) << 4))
000000r 2                     .else
000000r 2                        lda #((^addr) | (stride << 4))
000000r 2                     .endif
000000r 2               	.else
000000r 2               		lda #(^addr) | $10
000000r 2               	.endif
000000r 2               
000000r 2               	sta VERA_addr_bank
000000r 2               	lda #(>addr)
000000r 2               	sta VERA_addr_high
000000r 2               	lda #(<addr)
000000r 2               	sta VERA_addr_low
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .endif
000000r 2               
000000r 1               
000000r 1               temp = $30  ; used for temp 8/16 bit storage $30/$31
000000r 1               field = $100c; load for fields
000000r 1               loadstart = $1000;
000000r 1               
000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C 77 08        jmp start
000810  1               
000810  1  50 52 45 53  message: .byte "press a key",0
000814  1  53 20 41 20  
000818  1  4B 45 59 00  
00081C  1  45 52 52 4F  errormessage: .byte "error loading file",0
000820  1  52 20 4C 4F  
000824  1  41 44 49 4E  
00082F  1  50 52 45 53  quitmessage: .byte "press q to quit",0
000833  1  53 20 51 20  
000837  1  54 4F 20 51  
00083F  1  4C 45 56 45  filename: .byte "levels.bin"
000843  1  4C 53 2E 42  
000847  1  49 4E        
000849  1               filename_end:
000849  1               
000849  1  47 4F 41 4C  winstatement: .byte "goal reached!",0
00084D  1  20 52 45 41  
000851  1  43 48 45 44  
000857  1               
000857  1               ; variables that the program uses during execution
000857  1  02           no_goals:       .byte 2
000858  1  00           no_goalsreached:.byte 0
000859  1  00           fieldwidth:     .byte 0
00085A  1  00           fieldheight:    .byte 0
00085B  1               
00085B  1               NEWLINE = $0D
00085B  1               UPPERCASE = $8E
00085B  1               CLEARSCREEN = 147
00085B  1               
00085B  1               ; usage of zeropage pointers:
00085B  1               ; ZP_PTR_1 - temporary pointer
00085B  1               ; ZP_PTR_2 - temporary pointer
00085B  1               ; ZP_PTR_3 - position of player
00085B  1               ; ZP_PTR_4 - use as height/width
00085B  1               
00085B  1               loadfield:
00085B  1  A9 0A            lda #filename_end - filename
00085D  1  A2 3F            ldx #<filename
00085F  1  A0 08            ldy #>filename
000861  1  20 BD FF         jsr SETNAM
000864  1  A9 01            lda #$01
000866  1  A2 08            ldx #$08
000868  1  A0 01            ldy #$01
00086A  1  20 BA FF         jsr SETLFS
00086D  1  A9 00            lda #$00 ; load to memory
00086F  1  20 D5 FF         jsr LOAD
000872  1  B0 01            bcs @error
000874  1  60               rts
000875  1               
000875  1               @error:
000875  1  38               sec
000876  1  60               rts
000877  1               
000877  1               start:
000877  1                   ; force uppercase
000877  1  A9 8E            lda #UPPERCASE
000879  1  20 D2 FF         jsr CHROUT
00087C  1               
00087C  1  20 5B 08         jsr loadfield
00087F  1  90 0C            bcc @next
000881  1                   ; error
000881  1  A9 1C            lda #<errormessage
000883  1  85 00            sta ZP_PTR_1
000885  1  A9 08            lda #>errormessage
000887  1  85 01            sta ZP_PTR_1+1
000889  1  20 34 0A         jsr printline
00088C  1  60               rts ; exit program
00088D  1               @next:
00088D  1  20 49 0A         jsr initfield
000890  1  20 AD 0A         jsr cls
000893  1  20 69 0A         jsr printfield
000896  1               
000896  1               keyloop:
000896  1  20 E4 FF         jsr GETIN
000899  1               @checkdown:
000899  1  C9 11            cmp #$11
00089B  1  D0 05            bne @checkup
00089D  1  20 34 09         jsr handledown
0008A0  1  80 1E            bra @done
0008A2  1               @checkup:
0008A2  1  C9 91            cmp #$91
0008A4  1  D0 05            bne @checkleft
0008A6  1  20 0B 09         jsr handleup
0008A9  1  80 15            bra @done
0008AB  1               @checkleft:
0008AB  1  C9 9D            cmp #$9d
0008AD  1  D0 05            bne @checkright
0008AF  1  20 ED 08         jsr handleleft
0008B2  1  80 0C            bra @done
0008B4  1               @checkright:
0008B4  1  C9 1D            cmp #$1d
0008B6  1  D0 03            bne @checkquit
0008B8  1  20 CF 08         jsr handleright
0008BB  1               @checkquit:
0008BB  1  C9 51            cmp #$51
0008BD  1  D0 01            bne @done
0008BF  1  60               rts
0008C0  1               @done:
0008C0  1                   ; check if we have reached all goals
0008C0  1  AD 57 08         lda no_goals
0008C3  1  CD 58 08         cmp no_goalsreached
0008C6  1  D0 04            bne @donenextkey
0008C8  1  20 3D 0A         jsr printwinstatement
0008CB  1  60               rts
0008CC  1               @donenextkey:
0008CC  1  4C 96 08         jmp keyloop
0008CF  1               
0008CF  1               handleright:
0008CF  1                   ; pointers
0008CF  1                   ; 3 - player
0008CF  1                   ; 2 - block to the right of the player
0008CF  1                   ; 1 - block to the right of that block
0008CF  1               
0008CF  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1x position
0008CF  1  18               clc
0008D0  1  A5 24            lda ZP_PTR_3
0008D2  1  69 01            adc #$1               ; 1x position
0008D4  1  85 22            sta ZP_PTR_2
0008D6  1  A5 25            lda ZP_PTR_3+1
0008D8  1  69 00            adc #$0
0008DA  1  85 23            sta ZP_PTR_2+1
0008DC  1               
0008DC  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2x position
0008DC  1  18               clc
0008DD  1  A5 24            lda ZP_PTR_3
0008DF  1  69 02            adc #$2               ; 2x position
0008E1  1  85 00            sta ZP_PTR_1
0008E3  1  A5 25            lda ZP_PTR_3+1
0008E5  1  69 00            adc #$0
0008E7  1  85 01            sta ZP_PTR_1+1
0008E9  1               
0008E9  1  20 5D 09         jsr handlemove
0008EC  1  60               rts
0008ED  1               
0008ED  1               handleleft:
0008ED  1                   ; pointers
0008ED  1                   ; 3 - player
0008ED  1                   ; 2 - block to the left of the player
0008ED  1                   ; 1 - block to the left of that block
0008ED  1               
0008ED  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1x position
0008ED  1  38               sec
0008EE  1  A5 24            lda ZP_PTR_3
0008F0  1  E9 01            sbc #$1               ; 1x position
0008F2  1  85 22            sta ZP_PTR_2
0008F4  1  A5 25            lda ZP_PTR_3+1
0008F6  1  E9 00            sbc #$0
0008F8  1  85 23            sta ZP_PTR_2+1
0008FA  1               
0008FA  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2x position
0008FA  1  38               sec
0008FB  1  A5 24            lda ZP_PTR_3
0008FD  1  E9 02            sbc #$2               ; 2x position
0008FF  1  85 00            sta ZP_PTR_1
000901  1  A5 25            lda ZP_PTR_3+1
000903  1  E9 00            sbc #$0
000905  1  85 01            sta ZP_PTR_1+1
000907  1               
000907  1  20 5D 09         jsr handlemove
00090A  1               
00090A  1               @done:
00090A  1  60               rts
00090B  1               handleup:
00090B  1                   ; pointers
00090B  1                   ; 3 - player
00090B  1                   ; 2 - block to the top of the player
00090B  1                   ; 1 - block to the top of that block
00090B  1               
00090B  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1xFIELDWIDTH
00090B  1  AD 59 08         lda fieldwidth
00090E  1  85 30            sta temp
000910  1  38               sec
000911  1  A5 24            lda ZP_PTR_3
000913  1  E5 30            sbc temp
000915  1  85 22            sta ZP_PTR_2
000917  1  A5 25            lda ZP_PTR_3+1
000919  1  E9 00            sbc #$0
00091B  1  85 23            sta ZP_PTR_2+1
00091D  1               
00091D  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2xFIELDWIDTH
00091D  1  AD 59 08         lda fieldwidth
000920  1  0A               asl ; 2x
000921  1  85 30            sta temp
000923  1  38               sec
000924  1  A5 24            lda ZP_PTR_3
000926  1  E5 30            sbc temp
000928  1  85 00            sta ZP_PTR_1
00092A  1  A5 25            lda ZP_PTR_3+1
00092C  1  E9 00            sbc #$0
00092E  1  85 01            sta ZP_PTR_1+1
000930  1               
000930  1  20 5D 09         jsr handlemove
000933  1               
000933  1               @done:
000933  1  60               rts
000934  1               
000934  1               handledown:
000934  1                   ; pointers
000934  1                   ; 3 - player
000934  1                   ; 2 - block to the bottom of the player
000934  1                   ; 1 - block to the bottom of that block
000934  1               
000934  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1xFIELDWIDTH
000934  1  AD 59 08         lda fieldwidth
000937  1  85 30            sta temp
000939  1  18               clc
00093A  1  A5 24            lda ZP_PTR_3
00093C  1  65 30            adc temp
00093E  1  85 22            sta ZP_PTR_2
000940  1  A5 25            lda ZP_PTR_3+1
000942  1  69 00            adc #$0
000944  1  85 23            sta ZP_PTR_2+1
000946  1               
000946  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2xFIELDWIDTH
000946  1  AD 59 08         lda fieldwidth
000949  1  0A               asl ; 2x
00094A  1  85 30            sta temp
00094C  1  18               clc
00094D  1  A5 24            lda ZP_PTR_3
00094F  1  65 30            adc temp
000951  1  85 00            sta ZP_PTR_1
000953  1  A5 25            lda ZP_PTR_3+1
000955  1  69 00            adc #$0
000957  1  85 01            sta ZP_PTR_1+1
000959  1               
000959  1  20 5D 09         jsr handlemove
00095C  1  60               rts
00095D  1               
00095D  1               handlemove:
00095D  1                   ; pointers
00095D  1                   ; 3 - points to the player position
00095D  1                   ; 2 - points to the next block at the indicated direction
00095D  1                   ; 1 - points to the block after that block
00095D  1               
00095D  1  A0 00            ldy #0
00095F  1  B1 22            lda (ZP_PTR_2),y
000961  1  C9 20            cmp #' ' ; empty block next to player?
000963  1  F0 06            beq @moveplayertopoint2
000965  1  C9 2E            cmp #'.' ; goal position next to player?
000967  1  F0 02            beq @moveplayertopoint2
000969  1  80 0D            bra @next ; no ' ' or '.' found next to player, is it a crate or a wall?
00096B  1               @moveplayertopoint2:
00096B  1                   ; move player to pointer 2
00096B  1  20 EC 09         jsr moveplayeronfield
00096E  1  20 A2 09         jsr moveplayerposition
000971  1               
000971  1  20 AD 0A         jsr cls
000974  1  20 69 0A         jsr printfield
000977  1               
000977  1  60               rts
000978  1               @next:
000978  1  A0 00            ldy #0
00097A  1  B1 22            lda (ZP_PTR_2),y
00097C  1  C9 24            cmp #'$' ; crate next to player?
00097E  1  F0 06            beq @combinedmovecheck
000980  1  C9 2A            cmp #'*' ; crate on goal next to player?
000982  1  F0 02            beq @combinedmovecheck
000984  1  80 1B            bra @done ; something else not able to push
000986  1               @combinedmovecheck:
000986  1  B1 00            lda (ZP_PTR_1),y
000988  1  C9 20            cmp #' ' ; space after crate?
00098A  1  F0 06            beq @combinedmove
00098C  1  C9 2E            cmp #'.' ; goal after crate?
00098E  1  F0 02            beq @combinedmove
000990  1  80 0F            bra @done ; nothing to move
000992  1               @combinedmove:
000992  1  20 AB 09         jsr movecrateonfield
000995  1  20 EC 09         jsr moveplayeronfield
000998  1  20 A2 09         jsr moveplayerposition
00099B  1               
00099B  1  20 AD 0A         jsr cls
00099E  1  20 69 0A         jsr printfield
0009A1  1               @done:
0009A1  1  60               rts
0009A2  1               
0009A2  1               moveplayerposition:
0009A2  1                   ; moves pointer 3 to position of pointer 2
0009A2  1  A5 22            lda ZP_PTR_2
0009A4  1  85 24            sta ZP_PTR_3
0009A6  1  A5 23            lda ZP_PTR_2+1
0009A8  1  85 25            sta ZP_PTR_3+1
0009AA  1  60               rts
0009AB  1               
0009AB  1               movecrateonfield:
0009AB  1                   ; copies (ZP_PTR_2) to (ZP_PTR_1)
0009AB  1                   ; and handles different crate move options (normal / crate on goal)
0009AB  1  A0 00            ldy #0
0009AD  1  B1 22            lda (ZP_PTR_2),y
0009AF  1                   ; was there a goal underneath the crate?
0009AF  1  C9 2A            cmp #'*'
0009B1  1  D0 1D            bne @crateonly
0009B3  1                   ; do we move to a goal position? (from goal to goal..)
0009B3  1  B1 00            lda (ZP_PTR_1),y
0009B5  1  C9 2E            cmp #'.'
0009B7  1  D0 0A            bne @movetonormalposition
0009B9  1               @movetogoalposition:
0009B9  1  A9 2A            lda #'*' ; crate on goal symbol
0009BB  1  91 00            sta (ZP_PTR_1),y
0009BD  1  A9 2E            lda #'.'
0009BF  1  91 22            sta (ZP_PTR_2),y
0009C1  1  80 28            bra @done
0009C3  1               @movetonormalposition:
0009C3  1  CE 58 08         dec no_goalsreached ; -1 win points
0009C6  1  A9 24            lda #'$'; crate symbol
0009C8  1  91 00            sta (ZP_PTR_1),y
0009CA  1  A9 2E            lda #'.'
0009CC  1  91 22            sta (ZP_PTR_2),y
0009CE  1  80 1B            bra @done
0009D0  1               @crateonly:
0009D0  1                   ; is the destination a goal?
0009D0  1  B1 00            lda (ZP_PTR_1),y
0009D2  1  C9 2E            cmp #'.'
0009D4  1  D0 0D            bne @crateonly_nongoal
0009D6  1                   ; crate moves to goal, from a non-goal position
0009D6  1  EE 58 08         inc no_goalsreached ; +1 to win
0009D9  1  A9 2A            lda #'*'
0009DB  1  91 00            sta (ZP_PTR_1),y
0009DD  1  A9 20            lda #' '
0009DF  1  91 22            sta (ZP_PTR_2),y
0009E1  1  80 08            bra @done
0009E3  1               @crateonly_nongoal:
0009E3  1  A9 24            lda #'$'
0009E5  1  91 00            sta (ZP_PTR_1),y
0009E7  1  A9 20            lda #' '; empty space to move the player in next
0009E9  1  91 22            sta (ZP_PTR_2),y
0009EB  1               @done:
0009EB  1  60               rts
0009EC  1               
0009EC  1               moveplayeronfield:
0009EC  1                   ; copies (ZP_PTR_3) to (ZP_PTR_2)
0009EC  1                   ; and handles multiple player move options (normal / on goal)
0009EC  1  A0 00            ldy #0
0009EE  1  B1 24            lda (ZP_PTR_3),y
0009F0  1                   ; was there a goal underneath the player?
0009F0  1  C9 2B            cmp #'+'
0009F2  1  D0 1A            bne @playeronly
0009F4  1                   ; do we move to a goal position? (from goal to goal..)
0009F4  1  B1 22            lda (ZP_PTR_2),y
0009F6  1  C9 2E            cmp #'.'
0009F8  1  D0 0A            bne @movetonormalposition
0009FA  1               @movetogoalposition:
0009FA  1  A9 2B            lda #'+' ; player on goal symbol
0009FC  1  91 22            sta (ZP_PTR_2),y
0009FE  1  A9 2E            lda #'.'
000A00  1  91 24            sta (ZP_PTR_3),y
000A02  1  80 22            bra @done
000A04  1               @movetonormalposition:
000A04  1  A9 40            lda #'@'; crate symbol
000A06  1  91 22            sta (ZP_PTR_2),y
000A08  1  A9 2E            lda #'.'
000A0A  1  91 24            sta (ZP_PTR_3),y
000A0C  1  80 18            bra @done
000A0E  1               @playeronly:
000A0E  1                   ; is the destination a goal?
000A0E  1  B1 22            lda (ZP_PTR_2),y
000A10  1  C9 2E            cmp #'.'
000A12  1  D0 0A            bne @playeronly_nongoal
000A14  1                   ; player moves to goal, from a non-goal position
000A14  1  A9 2B            lda #'+'
000A16  1  91 22            sta (ZP_PTR_2),y
000A18  1  A9 20            lda #' '
000A1A  1  91 24            sta (ZP_PTR_3),y
000A1C  1  80 08            bra @done
000A1E  1               @playeronly_nongoal:
000A1E  1  A9 40            lda #'@'
000A20  1  91 22            sta (ZP_PTR_2),y
000A22  1  A9 20            lda #' '; empty space
000A24  1  91 24            sta (ZP_PTR_3),y
000A26  1               @done:
000A26  1  60               rts
000A27  1               
000A27  1               print:
000A27  1                   ; print from address ZP_PTR_1
000A27  1                   ; don't end with newline character
000A27  1  A0 00            ldy #0
000A29  1               @loop:
000A29  1  B1 00            lda (ZP_PTR_1),y ; load character from address
000A2B  1  F0 06            beq @done        ; end at 0 character
000A2D  1  20 D2 FF         jsr CHROUT
000A30  1  C8               iny
000A31  1  80 F6            bra @loop
000A33  1               @done:
000A33  1  60               rts
000A34  1               
000A34  1               printline:
000A34  1                   ; print from address ZP_PTR_1
000A34  1                   ; end with newline character
000A34  1  20 27 0A         jsr print
000A37  1  A9 0D            lda #NEWLINE
000A39  1  20 D2 FF         jsr CHROUT
000A3C  1  60               rts
000A3D  1               
000A3D  1               printwinstatement:
000A3D  1  A9 49            lda #<winstatement
000A3F  1  85 00            sta ZP_PTR_1
000A41  1  A9 08            lda #>winstatement
000A43  1  85 01            sta ZP_PTR_1+1
000A45  1  20 34 0A         jsr printline
000A48  1  60               rts
000A49  1               
000A49  1               initfield:
000A49  1                   ;skeleton code for now
000A49  1               
000A49  1                   ; reset goals
000A49  1  A9 00            lda #0
000A4B  1  8D 58 08         sta no_goalsreached
000A4E  1               
000A4E  1                   ; advance player to the field
000A4E  1  A9 16            lda #$16
000A50  1  85 24            sta ZP_PTR_3
000A52  1  A9 10            lda #$10
000A54  1  85 25            sta ZP_PTR_3+1
000A56  1               
000A56  1                   ; load fieldwidth from load area
000A56  1  AD 04 10         lda $1004
000A59  1  8D 59 08         sta fieldwidth
000A5C  1               
000A5C  1                   ; load fieldheight from load area
000A5C  1  AD 06 10         lda $1006
000A5F  1  8D 5A 08         sta fieldheight
000A62  1               
000A62  1                   ; load goals from load area
000A62  1  AD 08 10         lda $1008
000A65  1  8D 57 08         sta no_goals
000A68  1  60               rts
000A69  1               
000A69  1               printfield:
000A69  1                   ; no clearscreen, just print the field to screen on current position
000A69  1                   ; depends only on
000A69  1                   ; - field label for start of field
000A69  1               
000A69  1  A9 0C            lda #<field
000A6B  1  85 00            sta ZP_PTR_1
000A6D  1  A9 10            lda #>field
000A6F  1  85 01            sta ZP_PTR_1+1
000A71  1  A2 00            ldx #0 ; row counter
000A73  1               @nextrow:
000A73  1  A0 00            ldy #0 ; column counter
000A75  1               @row:
000A75  1  B1 00            lda (ZP_PTR_1),y
000A77  1  20 D2 FF         jsr CHROUT
000A7A  1  C8               iny
000A7B  1  CC 59 08         cpy fieldwidth
000A7E  1  D0 F5            bne @row
000A80  1               @endline:
000A80  1  A9 0D            lda #NEWLINE
000A82  1  20 D2 FF         jsr CHROUT
000A85  1               
000A85  1                   ; advance pointer to next row
000A85  1  A5 00            lda ZP_PTR_1
000A87  1  18               clc
000A88  1  6D 59 08         adc fieldwidth
000A8B  1  85 00            sta ZP_PTR_1
000A8D  1  90 07            bcc @checklastrow ; no carry, don't increment high byte on pointer
000A8F  1  A5 01            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
000A91  1  18               clc
000A92  1  69 01            adc #1
000A94  1  85 01            sta ZP_PTR_1+1
000A96  1               @checklastrow:
000A96  1                   ; last row?
000A96  1  E8               inx
000A97  1  EC 5A 08         cpx fieldheight
000A9A  1  D0 D7            bne @nextrow
000A9C  1               
000A9C  1                   ; print quit message at the end of the field
000A9C  1  A9 0D            lda #NEWLINE
000A9E  1  20 D2 FF         jsr CHROUT
000AA1  1  A9 2F            lda #<quitmessage
000AA3  1  85 00            sta ZP_PTR_1
000AA5  1  A9 08            lda #>quitmessage
000AA7  1  85 01            sta ZP_PTR_1+1
000AA9  1  20 34 0A         jsr printline
000AAC  1               
000AAC  1  60               rts
000AAD  1               
000AAD  1               cls:
000AAD  1  A9 93            lda #CLEARSCREEN
000AAF  1  20 D2 FF         jsr CHROUT
000AB2  1  60               rts
000AB2  1               
