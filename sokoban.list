ca65 V2.19 - Git ab8bb268
Main file   : sokoban.asm
Current file: sokoban.asm

000000r 1               .include "x16.inc"
000000r 2               .ifndef X16_INC
000000r 2               X16_INC  = 1
000000r 2               
000000r 2               .ifndef __CX16__
000000r 2               __CX16__ = 1
000000r 2               .endif
000000r 2               
000000r 2               SD_DEVICE   = 1
000000r 2               HOST_DEVICE = 8
000000r 2               DISK_DEVICE = HOST_DEVICE
000000r 2               
000000r 2               
000000r 2               ; RAM Addresses
000000r 2               
000000r 2               ; Kernal Registers
000000r 2               r0						= $02
000000r 2               r0L					= r0
000000r 2               r0H					= r0+1
000000r 2               r1						= $04
000000r 2               r1L					= r1
000000r 2               r1H					= r1+1
000000r 2               r2						= $06
000000r 2               r2L					= r2
000000r 2               r2H					= r2+1
000000r 2               r3						= $08
000000r 2               r3L					= r3
000000r 2               r3H					= r3+1
000000r 2               r4						= $0A
000000r 2               r4L					= r4
000000r 2               r4H					= r4+1
000000r 2               r5						= $0C
000000r 2               r5L					= r5
000000r 2               r5H					= r5+1
000000r 2               r6						= $0E
000000r 2               r6L					= r6
000000r 2               r6H					= r6+1
000000r 2               r7						= $10
000000r 2               r7L					= r7
000000r 2               r7H					= r7+1
000000r 2               r8						= $12
000000r 2               r8L					= r8
000000r 2               r8H					= r8+1
000000r 2               r9						= $14
000000r 2               r9L					= r9
000000r 2               r9H					= r9+1
000000r 2               r10					= $16
000000r 2               r10L					= r10
000000r 2               r10H					= r10+1
000000r 2               r11					= $18
000000r 2               r11L					= r11
000000r 2               r11H					= r11+1
000000r 2               r12					= $1A
000000r 2               r12L					= r12
000000r 2               r12H					= r12+1
000000r 2               r13					= $1C
000000r 2               r13L					= r13
000000r 2               r13H					= r13+1
000000r 2               r14					= $1E
000000r 2               r14L					= r14
000000r 2               r14H					= r14+1
000000r 2               r15					= $20
000000r 2               r15L					= r15
000000r 2               r15H					= r15+1
000000r 2               
000000r 2               ; Zero-Page userspace
000000r 2               ZP_PTR_1          = $00	; first four pointers for temporary use only
000000r 2               ZP_PTR_2          = $22
000000r 2               ZP_PTR_3          = $24
000000r 2               ZP_PTR_4          = $26
000000r 2               
000000r 2               ; I/O Registers
000000r 2               VERA_addr_low     = $9F20
000000r 2               VERA_addr_high    = $9F21
000000r 2               VERA_addr_bank    = $9F22
000000r 2               VERA_data0        = $9F23
000000r 2               VERA_data1        = $9F24
000000r 2               VERA_ctrl         = $9F25
000000r 2               VERA_ien          = $9F26
000000r 2               VERA_isr          = $9F27
000000r 2               VERA_irqline_l    = $9F28
000000r 2               VERA_dc_video     = $9F29
000000r 2               VERA_dc_hscale    = $9F2A
000000r 2               VERA_dc_vscale    = $9F2B
000000r 2               VERA_dc_border    = $9F2C
000000r 2               VERA_dc_hstart    = $9F29
000000r 2               VERA_dc_hstop     = $9F2A
000000r 2               VERA_dc_vsstart   = $9F2B
000000r 2               VERA_dc_vstop     = $9F2C
000000r 2               VERA_L0_config    = $9F2D
000000r 2               VERA_L0_mapbase   = $9F2E
000000r 2               VERA_L0_tilebase  = $9F2F
000000r 2               VERA_L0_hscroll_l = $9F30
000000r 2               VERA_L0_hscroll_h = $9F31
000000r 2               VERA_L0_vscroll_l = $9F32
000000r 2               VERA_L0_vscroll_h = $9F33
000000r 2               VERA_L1_config    = $9F34
000000r 2               VERA_L1_mapbase   = $9F35
000000r 2               VERA_L1_tilebase  = $9F36
000000r 2               VERA_L1_hscroll_l = $9F37
000000r 2               VERA_L1_hscroll_h = $9F38
000000r 2               VERA_L1_vscroll_l = $9F39
000000r 2               VERA_L1_vscroll_h = $9F3A
000000r 2               VERA_audio_ctrl   = $9F3B
000000r 2               VERA_audio_rate   = $9F3C
000000r 2               VERA_audio_data   = $9F3D
000000r 2               VERA_spi_data     = $9F3E
000000r 2               VERA_spi_ctrl     = $9F3F
000000r 2               
000000r 2               
000000r 2               ROM_BANK          = $9F60
000000r 2               RAM_BANK          = $9F61
000000r 2               
000000r 2               YM_reg            = $9FE0
000000r 2               YM_data           = $9FE1
000000r 2               
000000r 2               ; Emulator Registers
000000r 2               GIF_ctrl          = $9FB5
000000r 2               
000000r 2               ; ROM Banks
000000r 2               KERNAL_ROM_BANK   = 0
000000r 2               BASIC_ROM_BANK    = 4
000000r 2               
000000r 2               ; Banked Addresses
000000r 2               RAM_WIN           = $A000
000000r 2               RAM_WIN_SIZE      = $2000
000000r 2               ROM_WIN           = $C000
000000r 2               
000000r 2               ; Kernal Subroutines
000000r 2               CONSOLE_set_paging_message		:= $FED5
000000r 2               CONSOLE_put_image					:= $FED8
000000r 2               CONSOLE_init						:= $FEDB
000000r 2               CONSOLE_put_char					:= $FEDE
000000r 2               CONSOLE_get_char					:= $FEE1
000000r 2               MEMORY_FILL                   := $FEE4
000000r 2               MEMORY_COPY                   := $FEE7
000000r 2               MEMORY_CRC                    := $FEEA
000000r 2               MEMORY_DECOMPRESS             := $FEED
000000r 2               SPRITE_set_image					:= $FEF0
000000r 2               SPRITE_set_position				:= $FEF3
000000r 2               FB_init                 		:= $FEF6
000000r 2               FB_get_info             		:= $FEF9
000000r 2               FB_set_palette          		:= $FEFC
000000r 2               FB_cursor_position      		:= $FEFF
000000r 2               FB_cursor_next_line     		:= $FF02
000000r 2               FB_get_pixel            		:= $FF05
000000r 2               FB_get_pixels           		:= $FF08
000000r 2               FB_set_pixel            		:= $FF0B
000000r 2               FB_set_pixels           		:= $FF0E
000000r 2               FB_set_8_pixels         		:= $FF11
000000r 2               FB_set_8_pixels_opaque  		:= $FF14
000000r 2               FB_fill_pixels          		:= $FF17
000000r 2               FB_filter_pixels        		:= $FF1A
000000r 2               FB_move_pixels          		:= $FF1D
000000r 2               GRAPH_init							:= $FF20
000000r 2               GRAPH_clear							:= $FF23
000000r 2               GRAPH_set_window					:= $FF26
000000r 2               GRAPH_set_colors					:= $FF29
000000r 2               GRAPH_draw_line					:= $FF2C
000000r 2               GRAPH_draw_rect					:= $FF2F
000000r 2               GRAPH_move_rect					:= $FF32
000000r 2               GRAPH_draw_oval					:= $FF35
000000r 2               GRAPH_draw_image					:= $FF38
000000r 2               GRAPH_set_font						:= $FF3B
000000r 2               GRAPH_get_char_size				:= $FF3E
000000r 2               GRAPH_put_char						:= $FF41
000000r 2               MONITOR								:= $FF44
000000r 2               ENTER_BASIC							:= $FF47
000000r 2               CLOCK_SET_DATE_TIME           := $FF4D
000000r 2               CLOCK_GET_DATE_TIME           := $FF50
000000r 2               JOYSTICK_SCAN                 := $FF53
000000r 2               JOYSTICK_GET                  := $FF56
000000r 2               SCREEN_SET_MODE					:= $FF5F
000000r 2               SCREEN_SET_CHARSET				:= $FF62
000000r 2               
000000r 2               MOUSE_CONFIG                  := $FF68
000000r 2               MOUSE_GET			            := $FF6B
000000r 2               MOUSE_SCAN                    := $FF71
000000r 2               SCINIT                        := $FF81
000000r 2               IOINIT                        := $FF84
000000r 2               RAMTAS                        := $FF87
000000r 2               RESTOR                        := $FF8A
000000r 2               SETLFS                        := $FFBA
000000r 2               SETNAM                        := $FFBD
000000r 2               OPEN                          := $FFC0
000000r 2               CLOSE                         := $FFC3
000000r 2               CHKIN                         := $FFC6
000000r 2               CHKOUT                        := $FFC9
000000r 2               CLRCHN                        := $FFCC
000000r 2               CHRIN                         := $FFCF
000000r 2               CHROUT                        := $FFD2
000000r 2               LOAD                          := $FFD5
000000r 2               SAVE                          := $FFD8
000000r 2               SETTIM                        := $FFDB
000000r 2               RDTIM                         := $FFDE
000000r 2               STOP                          := $FFE1
000000r 2               GETIN                         := $FFE4
000000r 2               CLALL									:= $FFE7
000000r 2               UDTIM									:= $FFEA
000000r 2               SCREEN								:= $FFED
000000r 2               PLOT									:= $FFF0
000000r 2               IOBASE								:= $FFF3
000000r 2               
000000r 2               ; BASIC Vectors
000000r 2               BASIC_PANIC       := $C000
000000r 2               BASIC_INIT        := $C003
000000r 2               
000000r 2               
000000r 2               ; VRAM Addresses
000000r 2               VRAM_petscii   = $0F800
000000r 2               VRAM_psg       = $1F9C0
000000r 2               VRAM_palette   = $1FA00
000000r 2               VRAM_sprattr   = $1FC00
000000r 2               
000000r 2               ; IRQs
000000r 2               IRQVec         := $0314
000000r 2               BRKVec         := $0316
000000r 2               NMIVec         := $0318
000000r 2               
000000r 2               ;   Macros
000000r 2               
000000r 2               .macro VERA_SET_ADDR addr, stride
000000r 2               	.ifnblank stride
000000r 2                     .if stride < 0
000000r 2                        lda #((^addr) | $08 | ((0-stride) << 4))
000000r 2                     .else
000000r 2                        lda #((^addr) | (stride << 4))
000000r 2                     .endif
000000r 2               	.else
000000r 2               		lda #(^addr) | $10
000000r 2               	.endif
000000r 2               
000000r 2               	sta VERA_addr_bank
000000r 2               	lda #(>addr)
000000r 2               	sta VERA_addr_high
000000r 2               	lda #(<addr)
000000r 2               	sta VERA_addr_low
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .endif
000000r 2               
000000r 1               
000000r 1               ; constants
000000r 1               NEWLINE = $0D
000000r 1               UPPERCASE = $8E
000000r 1               CLEARSCREEN = 147
000000r 1               LEVELHEADER = 12
000000r 1               MAXUNDO = 10
000000r 1               SCREENWIDTH = 40        ; screen width/height in 16x16 tiles
000000r 1               SCREENHEIGHT = 30
000000r 1               RAMBANK = $a000         ; Ram Bank 0
000000r 1               
000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1               ; VERA Registers
00080D  1               VERA_LOW            = $9F20
00080D  1               VERA_MID            = $9F21
00080D  1               VERA_HIGH           = $9F22
00080D  1               VERA_DATA0          = $9F23
00080D  1               VERA_CTRL           = $9F25
00080D  1               
00080D  1  4C 19 09        jmp start
000810  1               
000810  1               ; string constants
000810  1  52 45 41 4C  quitaskmessage:      .byte "really quit? y/n",0
000814  1  4C 59 20 51  
000818  1  55 49 54 3F  
000821  1  53 45 4C 45  selectmessage:    .byte "select a level (1-",0
000825  1  43 54 20 41  
000829  1  20 4C 45 56  
000834  1  29 3A 20 00  selectendmessage: .byte "): ",0
000838  1  52 45 41 4C  resetmessage:     .byte "really reset level? y/n",0
00083C  1  4C 59 20 52  
000840  1  45 53 45 54  
000850  1  50 52 45 53  quitmessage:      .byte "press q to quit",0
000854  1  53 20 51 20  
000858  1  54 4F 20 51  
000860  1  4C 45 56 45  winstatement:     .byte "level complete! new level? y/n",0
000864  1  4C 20 43 4F  
000868  1  4D 50 4C 45  
00087F  1  28 43 29 32  help0:            .byte "(c)2021 venom",0
000883  1  30 32 31 20  
000887  1  56 45 4E 4F  
00088D  1  4B 45 59 42  help1:            .byte "keyboard shortcuts:",0
000891  1  4F 41 52 44  
000895  1  20 53 48 4F  
0008A1  1  43 55 52 53  help2:            .byte "cursor - moves player",0
0008A5  1  4F 52 20 2D  
0008A9  1  20 4D 4F 56  
0008B7  1  20 20 20 20  help3:            .byte "     q - quit",0
0008BB  1  20 51 20 2D  
0008BF  1  20 51 55 49  
0008C5  1  20 20 20 20  help4:            .byte "     u - undo move(s)",0
0008C9  1  20 55 20 2D  
0008CD  1  20 55 4E 44  
0008DB  1  20 20 20 20  help5:            .byte "     r - reset level",0
0008DF  1  20 52 20 2D  
0008E3  1  20 52 45 53  
0008F0  1  4D 28 45 4E  done0:            .byte "m(enu)",0
0008F4  1  55 29 00     
0008F7  1  4E 28 45 58  done1:            .byte "n(ext)",0
0008FB  1  54 29 00     
0008FE  1  51 28 55 49  done2:            .byte "q(uit)",0
000902  1  54 29 00     
000905  1               
000905  1               ; variables that the program uses during execution
000905  1  00           currentlevel:   .byte 0 ; will need to be filled somewhere in the future in the GUI, or asked from the user
000906  1  00           no_levels:      .byte 0 ; will be read by initfield
000907  1  00           no_goals:       .byte 0 ; will be read by initfield, depending on the currentlevel
000908  1  00           no_goalsreached:.byte 0 ; static now, reset for each game
000909  1  00           fieldwidth:     .byte 0 ; will be read by initfield, depending on the currentlevel
00090A  1  00           fieldheight:    .byte 0 ; will be read by initfield, depending on the currentlevel
00090B  1  00           vera_byte_low:  .byte 0
00090C  1  00           vera_byte_mid:  .byte 0
00090D  1  00 00 00 00  undostack:      .byte 0,0,0,0,0,0,0,0,0,0
000911  1  00 00 00 00  
000915  1  00 00        
000917  1  00           undoindex:      .byte 0
000918  1  00           undocounter:    .byte 0
000919  1               
000919  1               ; usage of zeropage address space:
000919  1               ; ZP_PTR_1 - temporary pointer
000919  1               ; ZP_PTR_2 - temporary pointer
000919  1               ; ZP_PTR_3 - position of player
000919  1               ZP_PTR_FIELD = $28
000919  1               temp = $30  ; used for temp 8/16 bit storage $30/$31
000919  1               ZP_PTR_UNDO = $32 ; used to point to the 'undo stack'
000919  1               
000919  1               start:
000919  1                   ; force uppercase
000919  1  A9 8E            lda #UPPERCASE
00091B  1  20 D2 FF         jsr CHROUT
00091E  1               
00091E  1  20 6B 0F         jsr loadtiles       ; load tiles from normal memory to VRAM
000921  1  20 FF 10         jsr layerconfig     ; configure layer 0/1 on screen
000924  1               
000924  1  20 0F 0E         jsr resetvars
000927  1  20 CE 10         jsr cleartiles
00092A  1               
00092A  1  20 3A 10         jsr displaytitlescreen
00092D  1  20 96 0D         jsr selectlevel
000930  1  90 04            bcc @continue
000932  1  20 F3 10         jsr resetlayerconfig
000935  1  60               rts                 ; pressed 'q'
000936  1               @continue:
000936  1  20 CE 10         jsr cleartiles      ; cls tiles
000939  1               
000939  1  20 32 0E         jsr initfield       ; load correct startup values for selected field
00093C  1  20 47 11         jsr printfield2
00093F  1               
00093F  1               keyloop:
00093F  1  20 E4 FF         jsr GETIN
000942  1               @checkdown:
000942  1  C9 11            cmp #$11
000944  1  D0 05            bne @checkup
000946  1  20 C0 0B         jsr handledown
000949  1  80 61            bra @done
00094B  1               @checkup:
00094B  1  C9 91            cmp #$91
00094D  1  D0 05            bne @checkleft
00094F  1  20 5A 0B         jsr handleup
000952  1  80 58            bra @done
000954  1               @checkleft:
000954  1  C9 9D            cmp #$9d
000956  1  D0 05            bne @checkright
000958  1  20 01 0B         jsr handleleft
00095B  1  80 4F            bra @done
00095D  1               @checkright:
00095D  1  C9 1D            cmp #$1d
00095F  1  D0 05            bne @checkundo
000961  1  20 A8 0A         jsr handleright
000964  1  80 46            bra @done
000966  1               @checkundo:
000966  1  C9 55            cmp #$55 ; 'u'
000968  1  D0 05            bne @checkreset
00096A  1  20 E3 09         jsr handle_undocommand
00096D  1  80 3D            bra @done
00096F  1               @checkreset:
00096F  1  C9 52            cmp #$52 ; 'r'
000971  1  D0 21            bne @checkquit
000973  1  20 8E 0A         jsr askreset
000976  1  B0 0B            bcs @resetgame
000978  1  20 65 0F         jsr cls
00097B  1  20 CE 10         jsr cleartiles
00097E  1  20 47 11         jsr printfield2
000981  1  80 29            bra @done
000983  1               @resetgame:
000983  1  20 65 0F         jsr cls
000986  1  20 CE 10         jsr cleartiles
000989  1  20 0F 0E         jsr resetvars
00098C  1  20 32 0E         jsr initfield
00098F  1  20 47 11         jsr printfield2
000992  1  80 AB            bra keyloop
000994  1               @checkquit:
000994  1  C9 51            cmp #$51 ; 'q'
000996  1  D0 14            bne @done
000998  1  20 74 0A         jsr askquit
00099B  1  B0 0B            bcs @exit
00099D  1  20 65 0F         jsr cls
0009A0  1  20 CE 10         jsr cleartiles
0009A3  1  20 47 11         jsr printfield2
0009A6  1  80 04            bra @done
0009A8  1               @exit:
0009A8  1  20 F3 10         jsr resetlayerconfig
0009AB  1  60               rts
0009AC  1               @done:
0009AC  1                   ; check if we have reached all goals
0009AC  1  AD 07 09         lda no_goals
0009AF  1  CD 08 09         cmp no_goalsreached
0009B2  1  D0 2C            bne @donenextkey
0009B4  1  20 0B 0A         jsr asknewlevel
0009B7  1  C9 4D            cmp #$4d ; Menu
0009B9  1  F0 08            beq @gotomenu   ; reset game / let user decide on new level
0009BB  1  C9 51            cmp #$51 ; Quit
0009BD  1  D0 07            bne @nextgame
0009BF  1  20 F3 10         jsr resetlayerconfig
0009C2  1  60               rts
0009C3  1               @gotomenu:
0009C3  1  4C 19 09         jmp start
0009C6  1               @nextgame:
0009C6  1                   ; check if this was the last level
0009C6  1  AD 06 09         lda no_levels
0009C9  1  CD 05 09         cmp currentlevel
0009CC  1  F0 F5            beq @gotomenu   ; select another game
0009CE  1  EE 05 09         inc currentlevel ; next level
0009D1  1  20 65 0F         jsr cls
0009D4  1  20 0F 0E         jsr resetvars
0009D7  1  20 CE 10         jsr cleartiles
0009DA  1               
0009DA  1  20 32 0E         jsr initfield       ; load correct startup values for selected field
0009DD  1  20 47 11         jsr printfield2
0009E0  1               
0009E0  1               @donenextkey:
0009E0  1  4C 3F 09         jmp keyloop
0009E3  1               
0009E3  1               handle_undocommand:
0009E3  1  20 91 0C         jsr pull_undostack
0009E6  1                   ; x now contains previous move
0009E6  1                   ;   as #%000MUDRL - Multiple move / Up / Down / Right / Left
0009E6  1                   ; we will give x to the handle_undo_**** routine, so it can see the combined bit (4) and act on it
0009E6  1               @checkup:
0009E6  1  8A               txa
0009E7  1  29 08            and #%00001000
0009E9  1  F0 04            beq @checkdown
0009EB  1  20 85 0B         jsr handle_undo_up
0009EE  1  60               rts
0009EF  1               @checkdown:
0009EF  1  8A               txa
0009F0  1  29 04            and #%00000100
0009F2  1  F0 04            beq @checkright
0009F4  1  20 EB 0B         jsr handle_undo_down
0009F7  1  60               rts
0009F8  1               @checkright:
0009F8  1  8A               txa
0009F9  1  29 02            and #%00000010
0009FB  1  F0 04            beq @checkleft
0009FD  1  20 C8 0A         jsr handle_undo_right
000A00  1  60               rts
000A01  1               @checkleft:
000A01  1  8A               txa
000A02  1  29 01            and #%00000001
000A04  1  F0 04            beq @emptystack
000A06  1  20 21 0B         jsr handle_undo_left
000A09  1  60               rts
000A0A  1               @emptystack:
000A0A  1                   ; do nothing
000A0A  1  60               rts
000A0B  1               
000A0B  1               asknewlevel:
000A0B  1                   ; display level complete tilesetj
000A0B  1  20 65 0F         jsr cls
000A0E  1  A9 47            lda #<completescreen
000A10  1  85 00            sta ZP_PTR_1
000A12  1  A9 32            lda #>completescreen
000A14  1  85 01            sta ZP_PTR_1+1
000A16  1  20 04 10         jsr displaytileset
000A19  1               
000A19  1  9C 25 9F         stz VERA_CTRL
000A1C  1  A2 09            ldx #$9 ; color brown
000A1E  1  A9 10            lda #$10
000A20  1  8D 22 9F         sta VERA_HIGH
000A23  1               
000A23  1  A9 F0            lda #<done0
000A25  1  85 00            sta ZP_PTR_1
000A27  1  A9 08            lda #>done0
000A29  1  85 01            sta ZP_PTR_1+1
000A2B  1  A9 25            lda #37
000A2D  1  8D 21 9F         sta VERA_MID
000A30  1  A9 4C            lda #38*2
000A32  1  8D 20 9F         sta VERA_LOW
000A35  1  20 ED 0F         jsr printverastring
000A38  1               
000A38  1  A9 F7            lda #<done1
000A3A  1  85 00            sta ZP_PTR_1
000A3C  1  A9 08            lda #>done1
000A3E  1  85 01            sta ZP_PTR_1+1
000A40  1  A9 29            lda #41
000A42  1  8D 21 9F         sta VERA_MID
000A45  1  A9 4C            lda #38*2
000A47  1  8D 20 9F         sta VERA_LOW
000A4A  1  20 ED 0F         jsr printverastring
000A4D  1               
000A4D  1  A9 FE            lda #<done2
000A4F  1  85 00            sta ZP_PTR_1
000A51  1  A9 08            lda #>done2
000A53  1  85 01            sta ZP_PTR_1+1
000A55  1  A9 2D            lda #45
000A57  1  8D 21 9F         sta VERA_MID
000A5A  1  A9 4C            lda #38*2
000A5C  1  8D 20 9F         sta VERA_LOW
000A5F  1  20 ED 0F         jsr printverastring
000A62  1               
000A62  1               @keyloop:
000A62  1  20 E4 FF         jsr GETIN
000A65  1               @checkmenu:
000A65  1  C9 4D            cmp #$4D ; M (enu)
000A67  1  D0 01            bne @checknext
000A69  1  60               rts
000A6A  1               @checknext:
000A6A  1  C9 4E            cmp #$4E ; N (ext)
000A6C  1  D0 01            bne @checkquit
000A6E  1  60               rts
000A6F  1               @checkquit:
000A6F  1  C9 51            cmp #$51 ; Q (uit)
000A71  1  D0 EF            bne @keyloop
000A73  1  60               rts
000A74  1               
000A74  1               askquit:
000A74  1                   ; ask if the user would like to quit, and return carry on 'y'
000A74  1  A9 10            lda #<quitaskmessage
000A76  1  85 00            sta ZP_PTR_1
000A78  1  A9 08            lda #>quitaskmessage
000A7A  1  85 01            sta ZP_PTR_1+1
000A7C  1  20 BE 0F         jsr displaymessagescreen
000A7F  1               
000A7F  1               @keyloop:
000A7F  1  20 E4 FF         jsr GETIN
000A82  1               @checkyes:
000A82  1  C9 59            cmp #$59 ; Y
000A84  1  D0 02            bne @checkno
000A86  1  38               sec
000A87  1  60               rts
000A88  1               @checkno:
000A88  1  C9 4E            cmp #$4e ; N
000A8A  1  D0 F3            bne @keyloop
000A8C  1  18               clc
000A8D  1  60               rts
000A8E  1               
000A8E  1               askreset:
000A8E  1                   ; ask if the user would like to reset, and return carry on 'y'
000A8E  1  A9 38            lda #<resetmessage
000A90  1  85 00            sta ZP_PTR_1
000A92  1  A9 08            lda #>resetmessage
000A94  1  85 01            sta ZP_PTR_1+1
000A96  1  20 BE 0F         jsr displaymessagescreen
000A99  1               
000A99  1               @keyloop:
000A99  1  20 E4 FF         jsr GETIN
000A9C  1               @checkyes:
000A9C  1  C9 59            cmp #$59 ; Y
000A9E  1  D0 02            bne @checkno
000AA0  1  38               sec
000AA1  1  60               rts
000AA2  1               @checkno:
000AA2  1  C9 4E            cmp #$4e ; N
000AA4  1  D0 F3            bne @keyloop
000AA6  1  18               clc
000AA7  1  60               rts
000AA8  1               
000AA8  1               handleright:
000AA8  1                   ; pointers
000AA8  1                   ; 3 - player
000AA8  1                   ; 2 - block to the right of the player
000AA8  1                   ; 1 - block to the right of that block
000AA8  1               
000AA8  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1x position
000AA8  1  18               clc
000AA9  1  A5 24            lda ZP_PTR_3
000AAB  1  69 01            adc #$1               ; 1x position
000AAD  1  85 22            sta ZP_PTR_2
000AAF  1  A5 25            lda ZP_PTR_3+1
000AB1  1  69 00            adc #$0
000AB3  1  85 23            sta ZP_PTR_2+1
000AB5  1               
000AB5  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2x position
000AB5  1  18               clc
000AB6  1  A5 24            lda ZP_PTR_3
000AB8  1  69 02            adc #$2               ; 2x position
000ABA  1  85 00            sta ZP_PTR_1
000ABC  1  A5 25            lda ZP_PTR_3+1
000ABE  1  69 00            adc #$0
000AC0  1  85 01            sta ZP_PTR_1+1
000AC2  1               
000AC2  1  A2 02            ldx #%00000010 ; right direction
000AC4  1  20 26 0C         jsr handlemove
000AC7  1  60               rts
000AC8  1               
000AC8  1               handle_undo_right:
000AC8  1                   ; 3 - player
000AC8  1               
000AC8  1  DA               phx ; store x to stack
000AC9  1                   ; point 1 to player
000AC9  1               
000AC9  1  A5 24            lda ZP_PTR_3
000ACB  1  85 00            sta ZP_PTR_1
000ACD  1  A5 25            lda ZP_PTR_3+1
000ACF  1  85 01            sta ZP_PTR_1+1
000AD1  1               
000AD1  1                   ; pointer 2 will point to the left of the player
000AD1  1                   ; so the player will move back to the left
000AD1  1  38               sec
000AD2  1  A5 24            lda ZP_PTR_3
000AD4  1  E9 01            sbc #$1
000AD6  1  85 22            sta ZP_PTR_2
000AD8  1  A5 25            lda ZP_PTR_3+1
000ADA  1  E9 00            sbc #$0
000ADC  1  85 23            sta ZP_PTR_2+1
000ADE  1               
000ADE  1  20 F9 0C         jsr moveplayeronfield
000AE1  1  20 AF 0C         jsr moveplayerposition
000AE4  1               
000AE4  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000AE4  1  FA               plx
000AE5  1  8A               txa
000AE6  1  29 10            and #%00010000 ; was a crate moved in this move?
000AE8  1  F0 10            beq @done
000AEA  1               
000AEA  1                   ; load pointer 2 to the right of the previous player's position
000AEA  1  18               clc
000AEB  1  A5 00            lda ZP_PTR_1
000AED  1  69 01            adc #$1
000AEF  1  85 22            sta ZP_PTR_2
000AF1  1  A5 01            lda ZP_PTR_1+1
000AF3  1  69 00            adc #$0
000AF5  1  85 23            sta ZP_PTR_2+1
000AF7  1               
000AF7  1  20 B8 0C         jsr movecrateonfield
000AFA  1               @done:
000AFA  1  20 65 0F         jsr cls
000AFD  1  20 47 11         jsr printfield2
000B00  1  60               rts
000B01  1               
000B01  1               handleleft:
000B01  1                   ; pointers
000B01  1                   ; 3 - player
000B01  1                   ; 2 - block to the left of the player
000B01  1                   ; 1 - block to the left of that block
000B01  1               
000B01  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1x position
000B01  1  38               sec
000B02  1  A5 24            lda ZP_PTR_3
000B04  1  E9 01            sbc #$1               ; 1x position
000B06  1  85 22            sta ZP_PTR_2
000B08  1  A5 25            lda ZP_PTR_3+1
000B0A  1  E9 00            sbc #$0
000B0C  1  85 23            sta ZP_PTR_2+1
000B0E  1               
000B0E  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2x position
000B0E  1  38               sec
000B0F  1  A5 24            lda ZP_PTR_3
000B11  1  E9 02            sbc #$2               ; 2x position
000B13  1  85 00            sta ZP_PTR_1
000B15  1  A5 25            lda ZP_PTR_3+1
000B17  1  E9 00            sbc #$0
000B19  1  85 01            sta ZP_PTR_1+1
000B1B  1               
000B1B  1  A2 01            ldx #%00000001 ; left direction
000B1D  1  20 26 0C         jsr handlemove
000B20  1               
000B20  1               @done:
000B20  1  60               rts
000B21  1               
000B21  1               handle_undo_left:
000B21  1                   ; 3 - player
000B21  1               
000B21  1  DA               phx ; store x to stack
000B22  1               
000B22  1                   ; point 1 to player
000B22  1  A5 24            lda ZP_PTR_3
000B24  1  85 00            sta ZP_PTR_1
000B26  1  A5 25            lda ZP_PTR_3+1
000B28  1  85 01            sta ZP_PTR_1+1
000B2A  1               
000B2A  1                   ; pointer 2 will point to the right of the player
000B2A  1                   ; so the player will move back to the right
000B2A  1  18               clc
000B2B  1  A5 24            lda ZP_PTR_3
000B2D  1  69 01            adc #$1
000B2F  1  85 22            sta ZP_PTR_2
000B31  1  A5 25            lda ZP_PTR_3+1
000B33  1  69 00            adc #$0
000B35  1  85 23            sta ZP_PTR_2+1
000B37  1               
000B37  1  20 F9 0C         jsr moveplayeronfield
000B3A  1  20 AF 0C         jsr moveplayerposition
000B3D  1               
000B3D  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000B3D  1  FA               plx
000B3E  1  8A               txa
000B3F  1  29 10            and #%00010000 ; was a crate moved in this move?
000B41  1  F0 10            beq @done
000B43  1               
000B43  1                   ; load pointer 2 to the left of the previous player's position
000B43  1  38               sec
000B44  1  A5 00            lda ZP_PTR_1
000B46  1  E9 01            sbc #$1
000B48  1  85 22            sta ZP_PTR_2
000B4A  1  A5 01            lda ZP_PTR_1+1
000B4C  1  E9 00            sbc #$0
000B4E  1  85 23            sta ZP_PTR_2+1
000B50  1               
000B50  1  20 B8 0C         jsr movecrateonfield
000B53  1               @done:
000B53  1  20 65 0F         jsr cls
000B56  1  20 47 11         jsr printfield2
000B59  1  60               rts
000B5A  1               
000B5A  1               handleup:
000B5A  1                   ; pointers
000B5A  1                   ; 3 - player
000B5A  1                   ; 2 - block to the top of the player
000B5A  1                   ; 1 - block to the top of that block
000B5A  1               
000B5A  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1xFIELDWIDTH
000B5A  1  AD 09 09         lda fieldwidth
000B5D  1  85 30            sta temp
000B5F  1  38               sec
000B60  1  A5 24            lda ZP_PTR_3
000B62  1  E5 30            sbc temp
000B64  1  85 22            sta ZP_PTR_2
000B66  1  A5 25            lda ZP_PTR_3+1
000B68  1  E9 00            sbc #$0
000B6A  1  85 23            sta ZP_PTR_2+1
000B6C  1               
000B6C  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2xFIELDWIDTH
000B6C  1  AD 09 09         lda fieldwidth
000B6F  1  0A               asl ; 2x
000B70  1  85 30            sta temp
000B72  1  38               sec
000B73  1  A5 24            lda ZP_PTR_3
000B75  1  E5 30            sbc temp
000B77  1  85 00            sta ZP_PTR_1
000B79  1  A5 25            lda ZP_PTR_3+1
000B7B  1  E9 00            sbc #$0
000B7D  1  85 01            sta ZP_PTR_1+1
000B7F  1               
000B7F  1  A2 08            ldx #%00001000 ; up direction
000B81  1  20 26 0C         jsr handlemove
000B84  1               
000B84  1  60               rts
000B85  1               
000B85  1               handle_undo_up:
000B85  1                   ; 3 - player
000B85  1               
000B85  1  DA               phx ; store x to stack
000B86  1               
000B86  1                   ; point 1 to player
000B86  1  A5 24            lda ZP_PTR_3
000B88  1  85 00            sta ZP_PTR_1
000B8A  1  A5 25            lda ZP_PTR_3+1
000B8C  1  85 01            sta ZP_PTR_1+1
000B8E  1               
000B8E  1                   ; pointer 2 will point to the position down of the player
000B8E  1                   ; so the player will move back down
000B8E  1  18               clc
000B8F  1  A5 24            lda ZP_PTR_3
000B91  1  6D 09 09         adc fieldwidth
000B94  1  85 22            sta ZP_PTR_2
000B96  1  A5 25            lda ZP_PTR_3+1
000B98  1  69 00            adc #$0
000B9A  1  85 23            sta ZP_PTR_2+1
000B9C  1               
000B9C  1  20 F9 0C         jsr moveplayeronfield
000B9F  1  20 AF 0C         jsr moveplayerposition
000BA2  1               
000BA2  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000BA2  1  FA               plx
000BA3  1  8A               txa
000BA4  1  29 10            and #%00010000 ; was a crate moved in this move?
000BA6  1  F0 11            beq @done
000BA8  1               
000BA8  1                   ; load pointer 2 to the top of the previous player's position
000BA8  1  38               sec
000BA9  1  A5 00            lda ZP_PTR_1
000BAB  1  ED 09 09         sbc fieldwidth
000BAE  1  85 22            sta ZP_PTR_2
000BB0  1  A5 01            lda ZP_PTR_1+1
000BB2  1  E9 00            sbc #$0
000BB4  1  85 23            sta ZP_PTR_2+1
000BB6  1               
000BB6  1  20 B8 0C         jsr movecrateonfield
000BB9  1               @done:
000BB9  1  20 65 0F         jsr cls
000BBC  1  20 47 11         jsr printfield2
000BBF  1  60               rts
000BC0  1               
000BC0  1               handledown:
000BC0  1                   ; pointers
000BC0  1                   ; 3 - player
000BC0  1                   ; 2 - block to the bottom of the player
000BC0  1                   ; 1 - block to the bottom of that block
000BC0  1               
000BC0  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1xFIELDWIDTH
000BC0  1  AD 09 09         lda fieldwidth
000BC3  1  85 30            sta temp
000BC5  1  18               clc
000BC6  1  A5 24            lda ZP_PTR_3
000BC8  1  65 30            adc temp
000BCA  1  85 22            sta ZP_PTR_2
000BCC  1  A5 25            lda ZP_PTR_3+1
000BCE  1  69 00            adc #$0
000BD0  1  85 23            sta ZP_PTR_2+1
000BD2  1               
000BD2  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2xFIELDWIDTH
000BD2  1  AD 09 09         lda fieldwidth
000BD5  1  0A               asl ; 2x
000BD6  1  85 30            sta temp
000BD8  1  18               clc
000BD9  1  A5 24            lda ZP_PTR_3
000BDB  1  65 30            adc temp
000BDD  1  85 00            sta ZP_PTR_1
000BDF  1  A5 25            lda ZP_PTR_3+1
000BE1  1  69 00            adc #$0
000BE3  1  85 01            sta ZP_PTR_1+1
000BE5  1               
000BE5  1  A2 04            ldx #%00000100 ; down direction
000BE7  1  20 26 0C         jsr handlemove
000BEA  1               
000BEA  1  60               rts
000BEB  1               
000BEB  1               handle_undo_down:
000BEB  1                   ; 3 - player
000BEB  1               
000BEB  1  DA               phx ; store x to stack
000BEC  1               
000BEC  1                   ; point 1 to player
000BEC  1  A5 24            lda ZP_PTR_3
000BEE  1  85 00            sta ZP_PTR_1
000BF0  1  A5 25            lda ZP_PTR_3+1
000BF2  1  85 01            sta ZP_PTR_1+1
000BF4  1               
000BF4  1                   ; pointer 2 will point to the position up of the player
000BF4  1                   ; so the player will move back up
000BF4  1  38               sec
000BF5  1  A5 24            lda ZP_PTR_3
000BF7  1  ED 09 09         sbc fieldwidth
000BFA  1  85 22            sta ZP_PTR_2
000BFC  1  A5 25            lda ZP_PTR_3+1
000BFE  1  E9 00            sbc #$0
000C00  1  85 23            sta ZP_PTR_2+1
000C02  1               
000C02  1  20 F9 0C         jsr moveplayeronfield
000C05  1  20 AF 0C         jsr moveplayerposition
000C08  1               
000C08  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000C08  1  FA               plx
000C09  1  8A               txa
000C0A  1  29 10            and #%00010000 ; was a crate moved in this move?
000C0C  1  F0 11            beq @done
000C0E  1               
000C0E  1                   ; load pointer 2 to the bottom of the previous player's position
000C0E  1  18               clc
000C0F  1  A5 00            lda ZP_PTR_1
000C11  1  6D 09 09         adc fieldwidth
000C14  1  85 22            sta ZP_PTR_2
000C16  1  A5 01            lda ZP_PTR_1+1
000C18  1  69 00            adc #$0
000C1A  1  85 23            sta ZP_PTR_2+1
000C1C  1               
000C1C  1  20 B8 0C         jsr movecrateonfield
000C1F  1               @done:
000C1F  1  20 65 0F         jsr cls
000C22  1  20 47 11         jsr printfield2
000C25  1  60               rts
000C26  1               
000C26  1               handlemove:
000C26  1                   ; pointers
000C26  1                   ; 3 - points to the player position
000C26  1                   ; 2 - points to the next block at the indicated direction
000C26  1                   ; 1 - points to the block after that block
000C26  1               
000C26  1  DA               phx ; push x to stack with stored direction
000C27  1               
000C27  1  A0 00            ldy #0
000C29  1  B1 22            lda (ZP_PTR_2),y
000C2B  1  C9 20            cmp #' ' ; empty block next to player?
000C2D  1  F0 06            beq @moveplayertopoint2
000C2F  1  C9 2E            cmp #'.' ; goal position next to player?
000C31  1  F0 02            beq @moveplayertopoint2
000C33  1  80 0C            bra @next ; no ' ' or '.' found next to player, is it a crate or a wall?
000C35  1               @moveplayertopoint2:
000C35  1                   ; move player to pointer 2
000C35  1  20 F9 0C         jsr moveplayeronfield
000C38  1  20 AF 0C         jsr moveplayerposition
000C3B  1               
000C3B  1  FA               plx ; pull direction from the stack
000C3C  1  20 74 0C         jsr push_undostack
000C3F  1  80 2A            bra @movecomplete
000C41  1               @next:
000C41  1  A0 00            ldy #0
000C43  1  B1 22            lda (ZP_PTR_2),y
000C45  1  C9 24            cmp #'$' ; crate next to player?
000C47  1  F0 06            beq @combinedmovecheck
000C49  1  C9 2A            cmp #'*' ; crate on goal next to player?
000C4B  1  F0 02            beq @combinedmovecheck
000C4D  1  80 23            bra @ignore ; something else not able to push
000C4F  1               @combinedmovecheck:
000C4F  1  B1 00            lda (ZP_PTR_1),y
000C51  1  C9 20            cmp #' ' ; space after crate?
000C53  1  F0 06            beq @combinedmove
000C55  1  C9 2E            cmp #'.' ; goal after crate?
000C57  1  F0 02            beq @combinedmove
000C59  1  80 17            bra @ignore ; nothing to move
000C5B  1               @combinedmove:
000C5B  1  20 B8 0C         jsr movecrateonfield
000C5E  1  20 F9 0C         jsr moveplayeronfield
000C61  1  20 AF 0C         jsr moveplayerposition
000C64  1               
000C64  1                   ; record combined move to undo stack
000C64  1  68               pla
000C65  1  09 10            ora #%00010000   ; set 'combined' bit 4
000C67  1  AA               tax
000C68  1  20 74 0C         jsr push_undostack
000C6B  1               
000C6B  1               @movecomplete:
000C6B  1  20 47 11         jsr printfield2
000C6E  1  20 65 0F         jsr cls
000C71  1  60               rts
000C72  1               
000C72  1               @ignore: ; nothing to move
000C72  1  FA               plx  ; don't forget to remove the stacked x move
000C73  1  60               rts
000C74  1               
000C74  1               push_undostack:
000C74  1                   ; record single move to undo stack
000C74  1                   ; x contains direction and single/multiple move
000C74  1                   ; x = 0%000MUDRL - Multiple / Up / Down / Right / Left
000C74  1                   ;
000C74  1                   ; the stack index 'pointer' undoindex points to a new entry each time
000C74  1  8A               txa
000C75  1  AC 17 09         ldy undoindex
000C78  1  91 32            sta (ZP_PTR_UNDO),y
000C7A  1               
000C7A  1  C0 09            cpy #MAXUNDO-1 ; at last physical item in memory? then loop around
000C7C  1  F0 05            beq @loopindex
000C7E  1  EE 17 09         inc undoindex
000C81  1  80 03            bra @checkmaxcount
000C83  1                @loopindex:
000C83  1  9C 17 09         stz undoindex
000C86  1                @checkmaxcount:
000C86  1  AD 18 09         lda undocounter
000C89  1  C9 0A            cmp #MAXUNDO
000C8B  1  F0 03            beq @done ; maximum count reached / stack will loop around
000C8D  1  EE 18 09         inc undocounter
000C90  1                @done:
000C90  1  60               rts
000C91  1               
000C91  1               pull_undostack:
000C91  1                   ; remove single move from undo stack
000C91  1                   ; afterwards, x contains direction and single/multiple move
000C91  1                   ; x = 0%000MUDRL - Multiple / Up / Down / Right / Left
000C91  1               
000C91  1  AD 18 09         lda undocounter ; check if we have any moves pushed to the stack
000C94  1  D0 03            bne @stackedmoves
000C96  1  A2 00            ldx #$0 ; empty move, nothing in the stack
000C98  1  60               rts
000C99  1               
000C99  1               @stackedmoves:
000C99  1  CE 18 09         dec undocounter ; reduce the number pushed to the stack with 1
000C9C  1  AC 17 09         ldy undoindex
000C9F  1  C0 00            cpy #$0 ; index at first position?
000CA1  1  D0 04            bne @normalindex
000CA3  1  A0 09            ldy #MAXUNDO-1 ; move it to the 'previous' index position in a circular manner
000CA5  1  80 01            bra @next
000CA7  1               @normalindex:
000CA7  1  88               dey ; move it to the 'previous' index position
000CA8  1               @next:
000CA8  1  8C 17 09         sty undoindex
000CAB  1                   ; y now points to the previous move, as an index to the stack memory
000CAB  1  B1 32            lda (ZP_PTR_UNDO),y
000CAD  1  AA               tax
000CAE  1  60               rts
000CAF  1               
000CAF  1               moveplayerposition:
000CAF  1                   ; moves pointer 3 to position of pointer 2
000CAF  1  A5 22            lda ZP_PTR_2
000CB1  1  85 24            sta ZP_PTR_3
000CB3  1  A5 23            lda ZP_PTR_2+1
000CB5  1  85 25            sta ZP_PTR_3+1
000CB7  1  60               rts
000CB8  1               
000CB8  1               movecrateonfield:
000CB8  1                   ; copies (ZP_PTR_2) to (ZP_PTR_1)
000CB8  1                   ; and handles different crate move options (normal / crate on goal)
000CB8  1  A0 00            ldy #0
000CBA  1  B1 22            lda (ZP_PTR_2),y
000CBC  1                   ; was there a goal underneath the crate?
000CBC  1  C9 2A            cmp #'*'
000CBE  1  D0 1D            bne @crateonly
000CC0  1                   ; do we move to a goal position? (from goal to goal..)
000CC0  1  B1 00            lda (ZP_PTR_1),y
000CC2  1  C9 2E            cmp #'.'
000CC4  1  D0 0A            bne @movetonormalposition
000CC6  1               @movetogoalposition:
000CC6  1  A9 2A            lda #'*' ; crate on goal symbol
000CC8  1  91 00            sta (ZP_PTR_1),y
000CCA  1  A9 2E            lda #'.'
000CCC  1  91 22            sta (ZP_PTR_2),y
000CCE  1  80 28            bra @done
000CD0  1               @movetonormalposition:
000CD0  1  CE 08 09         dec no_goalsreached ; -1 win points
000CD3  1  A9 24            lda #'$'; crate symbol
000CD5  1  91 00            sta (ZP_PTR_1),y
000CD7  1  A9 2E            lda #'.'
000CD9  1  91 22            sta (ZP_PTR_2),y
000CDB  1  80 1B            bra @done
000CDD  1               @crateonly:
000CDD  1                   ; is the destination a goal?
000CDD  1  B1 00            lda (ZP_PTR_1),y
000CDF  1  C9 2E            cmp #'.'
000CE1  1  D0 0D            bne @crateonly_nongoal
000CE3  1                   ; crate moves to goal, from a non-goal position
000CE3  1  EE 08 09         inc no_goalsreached ; +1 to win
000CE6  1  A9 2A            lda #'*'
000CE8  1  91 00            sta (ZP_PTR_1),y
000CEA  1  A9 20            lda #' '
000CEC  1  91 22            sta (ZP_PTR_2),y
000CEE  1  80 08            bra @done
000CF0  1               @crateonly_nongoal:
000CF0  1  A9 24            lda #'$'
000CF2  1  91 00            sta (ZP_PTR_1),y
000CF4  1  A9 20            lda #' '; empty space to move the player in next
000CF6  1  91 22            sta (ZP_PTR_2),y
000CF8  1               @done:
000CF8  1  60               rts
000CF9  1               
000CF9  1               moveplayeronfield:
000CF9  1                   ; copies (ZP_PTR_3) to (ZP_PTR_2)
000CF9  1                   ; and handles multiple player move options (normal / on goal)
000CF9  1  A0 00            ldy #0
000CFB  1  B1 24            lda (ZP_PTR_3),y
000CFD  1                   ; was there a goal underneath the player?
000CFD  1  C9 2B            cmp #'+'
000CFF  1  D0 1A            bne @playeronly
000D01  1                   ; do we move to a goal position? (from goal to goal..)
000D01  1  B1 22            lda (ZP_PTR_2),y
000D03  1  C9 2E            cmp #'.'
000D05  1  D0 0A            bne @movetonormalposition
000D07  1               @movetogoalposition:
000D07  1  A9 2B            lda #'+' ; player on goal symbol
000D09  1  91 22            sta (ZP_PTR_2),y
000D0B  1  A9 2E            lda #'.'
000D0D  1  91 24            sta (ZP_PTR_3),y
000D0F  1  80 22            bra @done
000D11  1               @movetonormalposition:
000D11  1  A9 40            lda #'@'; player symbol
000D13  1  91 22            sta (ZP_PTR_2),y
000D15  1  A9 2E            lda #'.'
000D17  1  91 24            sta (ZP_PTR_3),y
000D19  1  80 18            bra @done
000D1B  1               @playeronly:
000D1B  1                   ; is the destination a goal?
000D1B  1  B1 22            lda (ZP_PTR_2),y
000D1D  1  C9 2E            cmp #'.'
000D1F  1  D0 0A            bne @playeronly_nongoal
000D21  1                   ; player moves to goal, from a non-goal position
000D21  1  A9 2B            lda #'+'
000D23  1  91 22            sta (ZP_PTR_2),y
000D25  1  A9 20            lda #' '
000D27  1  91 24            sta (ZP_PTR_3),y
000D29  1  80 08            bra @done
000D2B  1               @playeronly_nongoal:
000D2B  1  A9 40            lda #'@'
000D2D  1  91 22            sta (ZP_PTR_2),y
000D2F  1  A9 20            lda #' '; empty space
000D31  1  91 24            sta (ZP_PTR_3),y
000D33  1               @done:
000D33  1  60               rts
000D34  1               
000D34  1               print:
000D34  1                   ; console routines only
000D34  1                   ; print from address ZP_PTR_1
000D34  1                   ; don't end with newline character
000D34  1  5A               phy
000D35  1  A0 00            ldy #0
000D37  1               @loop:
000D37  1  B1 00            lda (ZP_PTR_1),y ; load character from address
000D39  1  F0 06            beq @done        ; end at 0 character
000D3B  1  20 D2 FF         jsr CHROUT
000D3E  1  C8               iny
000D3F  1  80 F6            bra @loop
000D41  1               @done:
000D41  1  7A               ply
000D42  1  60               rts
000D43  1               
000D43  1               printline:
000D43  1                   ; console routines only
000D43  1                   ; print from address ZP_PTR_1
000D43  1                   ; end with newline character
000D43  1  20 34 0D         jsr print
000D46  1  A9 0D            lda #NEWLINE
000D48  1  20 D2 FF         jsr CHROUT
000D4B  1  60               rts
000D4C  1               
000D4C  1               printwinstatement:
000D4C  1                   ; console routines only
000D4C  1  A9 60            lda #<winstatement
000D4E  1  85 00            sta ZP_PTR_1
000D50  1  A9 08            lda #>winstatement
000D52  1  85 01            sta ZP_PTR_1+1
000D54  1  20 43 0D         jsr printline
000D57  1  60               rts
000D58  1               
000D58  1               printdecimal:
000D58  1                   ; prints decimal from A register
000D58  1                   ; VERA control needs to be set up previously
000D58  1  DA               phx
000D59  1  5A               phy
000D5A  1  86 30            stx temp    ; keep color to print in
000D5C  1  A0 2F            ldy #$2f
000D5E  1  A2 3A            ldx #$3a
000D60  1  38               sec
000D61  1               @loop1:
000D61  1  C8               iny
000D62  1  E9 64            sbc #100
000D64  1  B0 FB            bcs @loop1
000D66  1               @loop2:
000D66  1  CA               dex
000D67  1  69 0A            adc #10
000D69  1  30 FB            bmi @loop2
000D6B  1  69 2F            adc #$2f
000D6D  1               
000D6D  1                   ; Y = hundreds, X = tens, A = ones
000D6D  1  48               pha
000D6E  1  8A               txa
000D6F  1  48               pha
000D70  1  98               tya
000D71  1  C9 30            cmp #$30 ; is it a '0' petscii?
000D73  1  F0 08            beq @tens
000D75  1               ;    jsr CHROUT ; print Y
000D75  1  8D 23 9F         sta VERA_DATA0
000D78  1  A5 30            lda temp
000D7A  1  8D 23 9F         sta VERA_DATA0
000D7D  1               @tens:
000D7D  1  68               pla
000D7E  1  C9 30            cmp #$30 ; is it a '0' petscii?
000D80  1  F0 08            beq @ones
000D82  1               ;    jsr CHROUT ; print X
000D82  1  8D 23 9F         sta VERA_DATA0
000D85  1  A5 30            lda temp
000D87  1  8D 23 9F         sta VERA_DATA0
000D8A  1               @ones:
000D8A  1  68               pla
000D8B  1               ;    jsr CHROUT ; print A
000D8B  1  8D 23 9F         sta VERA_DATA0
000D8E  1  A5 30            lda temp
000D90  1  8D 23 9F         sta VERA_DATA0
000D93  1               
000D93  1  7A               ply
000D94  1  FA               plx
000D95  1  60               rts
000D96  1               
000D96  1               selectlevel:
000D96  1  A9 01            lda #1 ; start out with first level
000D98  1  8D 05 09         sta currentlevel
000D9B  1               
000D9B  1               @mainloop:
000D9B  1                   ; text prep to VERA
000D9B  1  9C 25 9F         stz VERA_CTRL
000D9E  1  A2 09            ldx #$9 ; color brown
000DA0  1  A9 10            lda #$10
000DA2  1  8D 22 9F         sta VERA_HIGH
000DA5  1  A9 21            lda #<selectmessage
000DA7  1  85 00            sta ZP_PTR_1
000DA9  1  A9 08            lda #>selectmessage
000DAB  1  85 01            sta ZP_PTR_1+1
000DAD  1  A9 2D            lda #45
000DAF  1  8D 21 9F         sta VERA_MID
000DB2  1  A9 14            lda #10*2
000DB4  1  8D 20 9F         sta VERA_LOW
000DB7  1  20 ED 0F         jsr printverastring
000DBA  1               
000DBA  1                   ; print range
000DBA  1  AD 06 09         lda no_levels
000DBD  1  20 58 0D         jsr printdecimal
000DC0  1  A9 34            lda #<selectendmessage
000DC2  1  85 00            sta ZP_PTR_1
000DC4  1  A9 08            lda #>selectendmessage
000DC6  1  85 01            sta ZP_PTR_1+1
000DC8  1  20 ED 0F         jsr printverastring
000DCB  1                   ; print level number
000DCB  1  AD 05 09         lda currentlevel
000DCE  1  20 58 0D         jsr printdecimal
000DD1  1               
000DD1  1               @charloop:
000DD1  1  20 E4 FF         jsr GETIN
000DD4  1               @checkdown:
000DD4  1  C9 11            cmp #$11 ; down pressed
000DD6  1  F0 06            beq @down
000DD8  1  C9 9D            cmp #$9d ; left pressed
000DDA  1  F0 02            beq @down
000DDC  1  80 0C            bra @checkup
000DDE  1               @down:
000DDE  1                   ; down key pressed
000DDE  1  AD 05 09         lda currentlevel
000DE1  1  C9 01            cmp #1
000DE3  1  F0 EC            beq @charloop   ; lowest value == 1
000DE5  1  CE 05 09         dec currentlevel
000DE8  1  80 B1            bra @mainloop
000DEA  1               @checkup:
000DEA  1  C9 91            cmp #$91 ; up pressed
000DEC  1  F0 06            beq @up
000DEE  1  C9 1D            cmp #$1d ; right pressed
000DF0  1  F0 02            beq @up
000DF2  1  80 0D            bra @checkreturnkey
000DF4  1               @up:
000DF4  1                   ; up key pressed
000DF4  1  AD 05 09         lda currentlevel
000DF7  1  CD 06 09         cmp no_levels
000DFA  1  F0 D5            beq @charloop   ; maximum value reached
000DFC  1  EE 05 09         inc currentlevel
000DFF  1  80 9A            bra @mainloop
000E01  1               @checkreturnkey:
000E01  1  C9 0D            cmp #$0d
000E03  1  D0 04            bne @checkquit
000E05  1                   ; return key pressed - select this level
000E05  1  20 65 0F         jsr cls
000E08  1  60               rts
000E09  1               @checkquit:
000E09  1  C9 51            cmp #$51
000E0B  1  D0 C4            bne @charloop
000E0D  1  38               sec ; set carry to notify caller
000E0E  1  60               rts
000E0F  1               resetvars:
000E0F  1                   ; reset goals
000E0F  1  A9 00            lda #0
000E11  1  8D 08 09         sta no_goalsreached
000E14  1               
000E14  1                   ; load field pointer to first address at LOADSTART
000E14  1                   ; load 1st pointer to temp pointer ZP_PTR_1
000E14  1  A9 47            lda #<LOADSTART
000E16  1  85 00            sta ZP_PTR_1
000E18  1  A9 48            lda #>LOADSTART
000E1A  1  85 01            sta ZP_PTR_1+1
000E1C  1               
000E1C  1                   ; load number of levels, pointed to by ZP_PTR_1,0
000E1C  1  A0 00            ldy #0
000E1E  1  B1 00            lda (ZP_PTR_1),y
000E20  1  8D 06 09         sta no_levels
000E23  1               
000E23  1                   ; reset undo stack
000E23  1  A9 0D            lda #<undostack
000E25  1  85 32            sta ZP_PTR_UNDO
000E27  1  A9 09            lda #>undostack
000E29  1  85 33            sta ZP_PTR_UNDO+1
000E2B  1               
000E2B  1  9C 17 09         stz undoindex
000E2E  1  9C 18 09         stz undocounter
000E31  1  60               rts
000E32  1               
000E32  1               initfield:
000E32  1                   ; load field pointer to first address at LOADSTART
000E32  1                   ; load 1st pointer to temp pointer ZP_PTR_1
000E32  1  A9 47            lda #<LOADSTART
000E34  1  85 00            sta ZP_PTR_1
000E36  1  A9 48            lda #>LOADSTART
000E38  1  85 01            sta ZP_PTR_1+1
000E3A  1               
000E3A  1                   ; skip to the first header, two bytes next
000E3A  1  18               clc
000E3B  1  A5 00            lda ZP_PTR_1
000E3D  1  69 02            adc #2
000E3F  1  85 00            sta ZP_PTR_1
000E41  1               
000E41  1                   ; now advance pointer (currentlevel - 1) * HEADERSIZE to advance to the correct payload pointer to that level
000E41  1  AD 05 09         lda currentlevel
000E44  1  AA               tax ; x contains the currentlevel now and will act as a counter
000E45  1               @loop:
000E45  1  CA               dex
000E46  1  F0 11            beq @fieldptrdone
000E48  1                   ; advance the field payload pointer
000E48  1  A5 00            lda ZP_PTR_1
000E4A  1  18               clc
000E4B  1  69 0C            adc #LEVELHEADER
000E4D  1  85 00            sta ZP_PTR_1
000E4F  1  90 F4            bcc @loop   ; nothing to do for the high byte
000E51  1  A5 01            lda ZP_PTR_1+1
000E53  1  69 00            adc #$0     ; increase the high byte
000E55  1  85 01            sta ZP_PTR_1+1
000E57  1  80 EC            bra @loop
000E59  1               @fieldptrdone:
000E59  1               
000E59  1  A0 02            ldy #2  ; index from payload pointer to width variable (low byte)
000E5B  1  B1 00            lda (ZP_PTR_1),y
000E5D  1  8D 09 09         sta fieldwidth
000E60  1  A0 04            ldy #4  ; index from payload pointer to height variable (low byte)
000E62  1  B1 00            lda (ZP_PTR_1),y
000E64  1  8D 0A 09         sta fieldheight
000E67  1  A0 06            ldy #6  ; index from payload pointer to goals in this level (low byte)
000E69  1  B1 00            lda (ZP_PTR_1),y
000E6B  1  8D 07 09         sta no_goals
000E6E  1  A0 08            ldy #8  ; index from payload pointer to goals taken in this level (low byte)
000E70  1  B1 00            lda (ZP_PTR_1),y
000E72  1  8D 08 09         sta no_goalsreached
000E75  1  A0 0A            ldy #10  ; index from payload pointer to player offset in this level
000E77  1               
000E77  1  B1 00            lda (ZP_PTR_1),y
000E79  1  18               clc
000E7A  1  69 00            adc #<RAMBANK
000E7C  1  85 24            sta ZP_PTR_3
000E7E  1  C8               iny
000E7F  1  B1 00            lda (ZP_PTR_1),y
000E81  1  69 A0            adc #>RAMBANK
000E83  1  85 25            sta ZP_PTR_3+1
000E85  1                   ; ZP_PTR_3 now contains the actual address in memory of the player, not only the offset from the data
000E85  1               
000E85  1                   ; now copy the field data to the RAM bank
000E85  1  AD 0A 09         lda fieldheight
000E88  1  AA               tax ; create counter
000E89  1                   ; clear temp counter
000E89  1  64 30            stz temp
000E8B  1  64 31            stz temp+1
000E8D  1               
000E8D  1               @multiply:
000E8D  1                   ; add fieldwidth variable to temp at each iteration - temp = temp + (width * height)
000E8D  1  A5 30            lda temp
000E8F  1  18               clc
000E90  1  6D 09 09         adc fieldwidth
000E93  1  85 30            sta temp
000E95  1  A5 31            lda temp+1 ; don't forget the high byte
000E97  1  69 00            adc #0
000E99  1  85 31            sta temp+1
000E9B  1  CA               dex
000E9C  1  D0 EF            bne @multiply
000E9E  1               
000E9E  1                   ; copy (temp) amount of bytes from current field pointer to Ram bank 0
000E9E  1               
000E9E  1                   ; currently ZP_PTR_1 is pointing to the selected field HEADER
000E9E  1                   ; retrieve the field pointer from it, and let ZP_PTR_FIELD to that
000E9E  1  A0 00            ldy #0
000EA0  1  B1 00            lda (ZP_PTR_1),y
000EA2  1  85 28            sta ZP_PTR_FIELD
000EA4  1  C8               iny
000EA5  1  B1 00            lda (ZP_PTR_1),y
000EA7  1  85 29            sta ZP_PTR_FIELD+1
000EA9  1                   ; now let this pointer start counting from LOADSTART, just as the offset in the input file references
000EA9  1  A5 28            lda ZP_PTR_FIELD
000EAB  1  18               clc
000EAC  1  69 47            adc #<LOADSTART
000EAE  1  85 28            sta ZP_PTR_FIELD
000EB0  1  A5 29            lda ZP_PTR_FIELD+1
000EB2  1  69 48            adc #>LOADSTART
000EB4  1  85 29            sta ZP_PTR_FIELD+1
000EB6  1               
000EB6  1                   ; set up destination pointer
000EB6  1  A9 00            lda #<RAMBANK
000EB8  1  85 22            sta ZP_PTR_2
000EBA  1  A9 A0            lda #>RAMBANK
000EBC  1  85 23            sta ZP_PTR_2+1
000EBE  1               
000EBE  1  A0 00            ldy #0
000EC0  1               @copybyte:
000EC0  1                   ; copy one byte of data
000EC0  1  B1 28            lda (ZP_PTR_FIELD),y
000EC2  1  91 22            sta (ZP_PTR_2),y
000EC4  1               
000EC4  1                   ; temp = temp -1
000EC4  1  A5 30            lda temp
000EC6  1  38               sec
000EC7  1  E9 01            sbc #1
000EC9  1  85 30            sta temp
000ECB  1  A5 31            lda temp+1
000ECD  1  E9 00            sbc #0
000ECF  1  85 31            sta temp+1
000ED1  1               
000ED1  1                   ; if temp==0 done
000ED1  1  A5 31            lda temp+1
000ED3  1  D0 06            bne @copynextbyte
000ED5  1  A5 30            lda temp
000ED7  1  D0 02            bne @copynextbyte
000ED9  1  80 1C            bra @done
000EDB  1               @copynextbyte:
000EDB  1  A5 28            lda ZP_PTR_FIELD
000EDD  1  18               clc
000EDE  1  69 01            adc #1
000EE0  1  85 28            sta ZP_PTR_FIELD
000EE2  1  A5 29            lda ZP_PTR_FIELD+1
000EE4  1  69 00            adc #0
000EE6  1  85 29            sta ZP_PTR_FIELD+1
000EE8  1  A5 22            lda ZP_PTR_2
000EEA  1  18               clc
000EEB  1  69 01            adc #1
000EED  1  85 22            sta ZP_PTR_2
000EEF  1  A5 23            lda ZP_PTR_2+1
000EF1  1  69 00            adc #0
000EF3  1  85 23            sta ZP_PTR_2+1
000EF5  1  80 C9            bra @copybyte
000EF7  1               @done:
000EF7  1               
000EF7  1                   ; prep the field pointer
000EF7  1  A9 00            lda #<RAMBANK
000EF9  1  85 28            sta ZP_PTR_FIELD
000EFB  1  A9 A0            lda #>RAMBANK
000EFD  1  85 29            sta ZP_PTR_FIELD+1
000EFF  1  60               rts
000F00  1               
000F00  1               printfield:
000F00  1                   ; console routines only
000F00  1                   ; no clearscreen, just print the field to screen on current position
000F00  1                   ; depends only on
000F00  1                   ; - field label for start of field
000F00  1               
000F00  1  A5 28            lda ZP_PTR_FIELD
000F02  1  85 00            sta ZP_PTR_1
000F04  1  A5 29            lda ZP_PTR_FIELD+1
000F06  1  85 01            sta ZP_PTR_1+1
000F08  1  A2 00            ldx #0 ; row counter
000F0A  1               @nextrow:
000F0A  1  A0 00            ldy #0 ; column counter
000F0C  1               @row:
000F0C  1  B1 00            lda (ZP_PTR_1),y
000F0E  1  C9 40            cmp #'@'
000F10  1  F0 06            beq @character
000F12  1  C9 2B            cmp #'+'
000F14  1  F0 02            beq @character
000F16  1  80 17            bra @normalcolor
000F18  1               @character:
000F18  1  48               pha
000F19  1  A9 9E            lda #$9e ; YELLOW
000F1B  1  20 D2 FF         jsr CHROUT
000F1E  1  68               pla
000F1F  1  20 D2 FF         jsr CHROUT
000F22  1  A9 05            lda #$05 ; WHITE
000F24  1  20 D2 FF         jsr CHROUT
000F27  1  C8               iny
000F28  1  CC 09 09         cpy fieldwidth
000F2B  1  D0 DF            bne @row
000F2D  1  80 09            bra @endline
000F2F  1               @normalcolor:
000F2F  1  20 D2 FF         jsr CHROUT
000F32  1  C8               iny
000F33  1  CC 09 09         cpy fieldwidth
000F36  1  D0 D4            bne @row
000F38  1               @endline:
000F38  1  A9 0D            lda #NEWLINE
000F3A  1  20 D2 FF         jsr CHROUT
000F3D  1               
000F3D  1                   ; advance pointer to next row
000F3D  1  A5 00            lda ZP_PTR_1
000F3F  1  18               clc
000F40  1  6D 09 09         adc fieldwidth
000F43  1  85 00            sta ZP_PTR_1
000F45  1  90 07            bcc @checklastrow ; no carry, don't increment high byte on pointer
000F47  1  A5 01            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
000F49  1  18               clc
000F4A  1  69 01            adc #1
000F4C  1  85 01            sta ZP_PTR_1+1
000F4E  1               @checklastrow:
000F4E  1                   ; last row?
000F4E  1  E8               inx
000F4F  1  EC 0A 09         cpx fieldheight
000F52  1  D0 B6            bne @nextrow
000F54  1               
000F54  1                   ; print quit message at the end of the field
000F54  1  A9 0D            lda #NEWLINE
000F56  1  20 D2 FF         jsr CHROUT
000F59  1  A9 50            lda #<quitmessage
000F5B  1  85 00            sta ZP_PTR_1
000F5D  1  A9 08            lda #>quitmessage
000F5F  1  85 01            sta ZP_PTR_1+1
000F61  1  20 43 0D         jsr printline
000F64  1               
000F64  1  60               rts
000F65  1               
000F65  1               cls:
000F65  1  A9 93            lda #CLEARSCREEN
000F67  1  20 D2 FF         jsr CHROUT
000F6A  1  60               rts
000F6B  1               
000F6B  1               loadtiles:
000F6B  1               ; Build  16x16 256 color tiles in VRAM location $12000
000F6B  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000F6E  1  A9 11            lda #$11
000F70  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 1
000F73  1  A9 20            lda #$20
000F75  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $20
000F78  1  9C 20 9F         stz VERA_LOW                        ; Set Low Byte to $00
000F7B  1               
000F7B  1  A2 00            ldx #0
000F7D  1  BD 47 42     :   lda tiledata,x                      ; index 0 / black tile
000F80  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000F83  1  E8               inx
000F84  1  D0 F7            bne :-
000F86  1                   ; load Brick data
000F86  1  A2 00            ldx #0
000F88  1  BD 47 43     :   lda Brick,x                         ; index 1 / brick
000F8B  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000F8E  1  E8               inx
000F8F  1  D0 F7            bne :-
000F91  1                   ; load player data
000F91  1  A2 00            ldx #0
000F93  1  BD 47 44     :   lda player,x                        ; index 2 / player
000F96  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000F99  1  E8               inx
000F9A  1  D0 F7            bne :-
000F9C  1                   ; load crate data
000F9C  1  A2 00            ldx #0
000F9E  1  BD 47 45     :   lda crate,x                         ; index 3 / crate (normal)
000FA1  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000FA4  1  E8               inx
000FA5  1  D0 F7            bne :-
000FA7  1                   ; load goal data
000FA7  1  A2 00            ldx #0
000FA9  1  BD 47 46     :   lda goal,x                         ; index 4 / goal (normal)
000FAC  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000FAF  1  E8               inx
000FB0  1  D0 F7            bne :-
000FB2  1                   ; load crateongoal data
000FB2  1  A2 00            ldx #0
000FB4  1  BD 47 47     :   lda crateongoal,x                   ; index 5 / crate on goal
000FB7  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000FBA  1  E8               inx
000FBB  1  D0 F7            bne :-
000FBD  1               
000FBD  1  60               rts
000FBE  1               
000FBE  1               
000FBE  1               displaymessagescreen:
000FBE  1                   ; temp store pointer to the requested text
000FBE  1  A5 00            lda ZP_PTR_1
000FC0  1  48               pha
000FC1  1  A5 01            lda ZP_PTR_1+1
000FC3  1  48               pha
000FC4  1               
000FC4  1  A9 47            lda #<messagescreen
000FC6  1  85 00            sta ZP_PTR_1
000FC8  1  A9 22            lda #>messagescreen
000FCA  1  85 01            sta ZP_PTR_1+1
000FCC  1  20 04 10         jsr displaytileset
000FCF  1                   ; now display the string at ZP_PTR_1 in the middle and return
000FCF  1  68               pla
000FD0  1  85 01            sta ZP_PTR_1+1
000FD2  1  68               pla
000FD3  1  85 00            sta ZP_PTR_1
000FD5  1  9C 25 9F         stz VERA_CTRL
000FD8  1                   ;lda #%00100000
000FD8  1  A9 10            lda #$10
000FDA  1  8D 22 9F         sta VERA_HIGH
000FDD  1  A9 1C            lda #28
000FDF  1  8D 21 9F         sta VERA_MID
000FE2  1  A9 38            lda #28*2
000FE4  1  8D 20 9F         sta VERA_LOW
000FE7  1  A2 09            ldx #$9 ; color brown
000FE9  1  20 ED 0F         jsr printverastring
000FEC  1  60               rts
000FED  1               
000FED  1               printverastring:
000FED  1                   ; ZP_PTR_1 is pointing to the string
000FED  1                   ; x contains color of the text
000FED  1  A0 00            ldy #0
000FEF  1               @loop:
000FEF  1  B1 00            lda (ZP_PTR_1),y
000FF1  1  F0 10            beq @end
000FF3  1  C9 40            cmp #$40
000FF5  1  90 03            bcc @output
000FF7  1               @AZ:
000FF7  1  38               sec
000FF8  1  E9 40            sbc #$40
000FFA  1               @output:
000FFA  1  8D 23 9F         sta VERA_DATA0
000FFD  1  8E 23 9F         stx VERA_DATA0
001000  1  C8               iny
001001  1  80 EC            bra @loop
001003  1               @end:
001003  1  60               rts
001004  1               
001004  1               displaytileset:
001004  1               ; Fill the Layer 0 with the tileset pointed to by ZP_PTR_1
001004  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
001007  1  A9 10            lda #$10
001009  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
00100C  1  A9 40            lda #$40
00100E  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $40
001011  1  A9 00            lda #$0
001013  1  8D 20 9F         sta VERA_LOW                        ; Set Low Byte to $00
001016  1               
001016  1  A0 20            ldy #32
001018  1               @outerloop:
001018  1  A2 40            ldx #64
00101A  1               @innerloop:
00101A  1  5A               phy
00101B  1  A0 00            ldy #0
00101D  1  B1 00            lda (ZP_PTR_1),y                    ; load byte from tileset
00101F  1  8D 23 9F         sta VERA_DATA0
001022  1  9C 23 9F         stz VERA_DATA0                      ; zero it's attribute
001025  1  7A               ply
001026  1               
001026  1                   ; increase pointer to next byte in the set
001026  1  A5 00            lda ZP_PTR_1
001028  1  18               clc
001029  1  69 02            adc #$2
00102B  1  85 00            sta ZP_PTR_1
00102D  1  A5 01            lda ZP_PTR_1+1
00102F  1  69 00            adc #$0
001031  1  85 01            sta ZP_PTR_1+1
001033  1               
001033  1  CA               dex
001034  1  D0 E4            bne @innerloop
001036  1  88               dey
001037  1  D0 DF            bne @outerloop
001039  1               
001039  1  60               rts
00103A  1               
00103A  1               displaytitlescreen:
00103A  1  A9 47            lda #<titlescreen
00103C  1  85 00            sta ZP_PTR_1
00103E  1  A9 12            lda #>titlescreen
001040  1  85 01            sta ZP_PTR_1+1
001042  1  20 04 10         jsr displaytileset
001045  1               
001045  1  9C 25 9F         stz VERA_CTRL
001048  1  A2 09            ldx #$9 ; color brown
00104A  1  A9 10            lda #$10
00104C  1  8D 22 9F         sta VERA_HIGH
00104F  1               
00104F  1  A9 7F            lda #<help0
001051  1  85 00            sta ZP_PTR_1
001053  1  A9 08            lda #>help0
001055  1  85 01            sta ZP_PTR_1+1
001057  1  A9 17            lda #23
001059  1  8D 21 9F         sta VERA_MID
00105C  1  A9 64            lda #50*2
00105E  1  8D 20 9F         sta VERA_LOW
001061  1  20 ED 0F         jsr printverastring
001064  1               
001064  1  A9 8D            lda #<help1
001066  1  85 00            sta ZP_PTR_1
001068  1  A9 08            lda #>help1
00106A  1  85 01            sta ZP_PTR_1+1
00106C  1  A9 1E            lda #30
00106E  1  8D 21 9F         sta VERA_MID
001071  1  A9 64            lda #50*2
001073  1  8D 20 9F         sta VERA_LOW
001076  1  20 ED 0F         jsr printverastring
001079  1               
001079  1  A9 A1            lda #<help2
00107B  1  85 00            sta ZP_PTR_1
00107D  1  A9 08            lda #>help2
00107F  1  85 01            sta ZP_PTR_1+1
001081  1  A9 20            lda #32
001083  1  8D 21 9F         sta VERA_MID
001086  1  A9 64            lda #50*2
001088  1  8D 20 9F         sta VERA_LOW
00108B  1  20 ED 0F         jsr printverastring
00108E  1               
00108E  1  A9 B7            lda #<help3
001090  1  85 00            sta ZP_PTR_1
001092  1  A9 08            lda #>help3
001094  1  85 01            sta ZP_PTR_1+1
001096  1  A9 21            lda #33
001098  1  8D 21 9F         sta VERA_MID
00109B  1  A9 64            lda #50*2
00109D  1  8D 20 9F         sta VERA_LOW
0010A0  1  20 ED 0F         jsr printverastring
0010A3  1               
0010A3  1  A9 C5            lda #<help4
0010A5  1  85 00            sta ZP_PTR_1
0010A7  1  A9 08            lda #>help4
0010A9  1  85 01            sta ZP_PTR_1+1
0010AB  1  A9 22            lda #34
0010AD  1  8D 21 9F         sta VERA_MID
0010B0  1  A9 64            lda #50*2
0010B2  1  8D 20 9F         sta VERA_LOW
0010B5  1  20 ED 0F         jsr printverastring
0010B8  1               
0010B8  1  A9 DB            lda #<help5
0010BA  1  85 00            sta ZP_PTR_1
0010BC  1  A9 08            lda #>help5
0010BE  1  85 01            sta ZP_PTR_1+1
0010C0  1  A9 23            lda #35
0010C2  1  8D 21 9F         sta VERA_MID
0010C5  1  A9 64            lda #50*2
0010C7  1  8D 20 9F         sta VERA_LOW
0010CA  1  20 ED 0F         jsr printverastring
0010CD  1  60               rts
0010CE  1               
0010CE  1               cleartiles:
0010CE  1               ; Fill the Layer 0 with all zeros (black)
0010CE  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
0010D1  1  A9 10            lda #$10
0010D3  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
0010D6  1  A9 40            lda #$40
0010D8  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $40
0010DB  1  A9 00            lda #$0
0010DD  1  8D 20 9F         sta VERA_LOW                        ; Set Low Byte to $00
0010E0  1               
0010E0  1  A0 20            ldy #32
0010E2  1  A9 00            lda #0
0010E4  1  A2 40        :   ldx #64
0010E6  1  8D 23 9F     :   sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
0010E9  1  8D 23 9F         sta VERA_DATA0                      ; Write Attribute
0010EC  1  CA               dex
0010ED  1  D0 F7            bne :-
0010EF  1  88               dey
0010F0  1  D0 F2            bne :--
0010F2  1               
0010F2  1  60               rts
0010F3  1               
0010F3  1               resetlayerconfig:
0010F3  1               ; Change Layer 1 to 8 Color Mode
0010F3  1  AD 34 9F         lda $9F34
0010F6  1  29 F7            and #%11110111                        ; Set bit 3 to 0, rest unchanged
0010F8  1  8D 34 9F         sta $9F34
0010FB  1               
0010FB  1  20 65 0F         jsr cls
0010FE  1  60               rts
0010FF  1               
0010FF  1               layerconfig:
0010FF  1               ; Configure Layer 0
0010FF  1  A9 53            lda #%01010011                      ; 64 x 64 tiles, 8 bits per pixel
001101  1  8D 2D 9F         sta $9F2D
001104  1  A9 20            lda #$20                            ; $20 points to $4000 in VRAM
001106  1  8D 2E 9F         sta $9F2E                           ; Store to Map Base Pointer
001109  1               
001109  1  A9 93            lda #$93                            ; $48 points to $12000, Width and Height 16 pixel
00110B  1  8D 2F 9F         sta $9F2F                           ; Store to Tile Base Pointer
00110E  1               
00110E  1  20 CE 10         jsr cleartiles
001111  1               
001111  1               ; Turn on Layer 0
001111  1  AD 29 9F         lda $9F29
001114  1  09 30            ora #%00110000                      ; Bits 4 and 5 are set to 1
001116  1  8D 29 9F         sta $9F29                           ; So both Later 0 and 1 are turned on
001119  1               
001119  1               ; Change Layer 1 to 256 Color Mode
001119  1  AD 34 9F         lda $9F34
00111C  1  09 08            ora #%001000                        ; Set bit 3 to 1, rest unchanged
00111E  1  8D 34 9F         sta $9F34
001121  1               
001121  1               ; Clear Layer 1
001121  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
001124  1  A9 10            lda #$10
001126  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
001129  1  9C 21 9F         stz VERA_MID                        ; Set Middle Byte to $00
00112C  1  9C 20 9F         stz VERA_LOW                        ; Set Low Byte to $00
00112F  1               
00112F  1  A9 1E            lda #30
001131  1  85 02            sta $02                             ; save counter for rows
001133  1  A0 01            ldy #$01                            ; Color Attribute white on black background
001135  1  A9 20            lda #$20                            ; Blank character
001137  1  A2 00            ldx #0
001139  1  8D 23 9F     :   sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
00113C  1  8C 23 9F         sty VERA_DATA0                      ; Write Attribute
00113F  1  E8               inx
001140  1  D0 F7            bne :-
001142  1  C6 02            dec $02
001144  1  D0 F3            bne :-
001146  1               
001146  1               ; Scale Display x2 for resolution of 320 x 240 pixels
001146  1               ;    lda #$40
001146  1               ;    sta $9F2A
001146  1               ;    sta $9F2B
001146  1               
001146  1  60               rts
001147  1               
001147  1               printfield2:
001147  1               ; prep variables for vera med/high bytes
001147  1               ;    topleft address for first tile is 0x04000
001147  1  A9 40            lda #$40
001149  1  8D 0C 09         sta vera_byte_mid
00114C  1  9C 0B 09         stz vera_byte_low
00114F  1               
00114F  1               ; shift to the right (SCREENWIDTH - fieldwidth) /2 positions *2 to compensate for attribute
00114F  1  A9 28            lda #SCREENWIDTH
001151  1  38               sec
001152  1  ED 09 09         sbc fieldwidth
001155  1  4A               lsr ; /2
001156  1  0A               asl ; *2 - so uneven widths result in an even address and we don't end up in parameter space of the TILEMAP
001157  1  8D 0B 09         sta vera_byte_low
00115A  1               
00115A  1               ; shift down number of rows (SCREENHEIGHT - fieldheight) /2 positions
00115A  1  A9 1E            lda #SCREENHEIGHT
00115C  1  38               sec
00115D  1  ED 0A 09         sbc fieldheight
001160  1  4A               lsr ; /2
001161  1  AA               tax ; transfer number of rows down to counter
001162  1               @loop:
001162  1  E0 00            cpx #$0 ; any rows down (left)?
001164  1  F0 16            beq @done ; exit loop when x == 0
001166  1                   ; go 64 tiles further down - 64 * (1 address + 1 parameter of tile) = 128 / $80
001166  1  AD 0B 09         lda vera_byte_low
001169  1  18               clc
00116A  1  69 80            adc #$80    ; add row <<<ADDRESS>>> height for exactly one row down
00116C  1  8D 0B 09         sta vera_byte_low
00116F  1  90 08            bcc @decrement  ; no need to change the high byte
001171  1  AD 0C 09         lda vera_byte_mid
001174  1  69 00            adc #$0     ; add carry (so +1)
001176  1  8D 0C 09         sta vera_byte_mid
001179  1               @decrement: ; next row
001179  1  CA               dex
00117A  1  80 E6            bra @loop
00117C  1               @done:
00117C  1               
00117C  1               ; prepare the pointers to the back-end field data, so we know what to display
00117C  1  A5 28            lda ZP_PTR_FIELD
00117E  1  85 00            sta ZP_PTR_1
001180  1  A5 29            lda ZP_PTR_FIELD+1
001182  1  85 01            sta ZP_PTR_1+1
001184  1               
001184  1               ; start displaying the selected field
001184  1               ; (vera_byte_mid / vera_byte_low) is the address for the top-left position on-screen in the tile map
001184  1  A2 00            ldx #0 ; row counter
001186  1               @nextrow:
001186  1  A0 00            ldy #0 ; column counter
001188  1                   ; prepare vera pointers for this row
001188  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
00118B  1  A9 10            lda #$10
00118D  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
001190  1  AD 0C 09         lda vera_byte_mid
001193  1  8D 21 9F         sta VERA_MID
001196  1  AD 0B 09         lda vera_byte_low
001199  1  8D 20 9F         sta VERA_LOW
00119C  1               
00119C  1               @row:
00119C  1                   ; sweep the field, row by row, indexed by column y
00119C  1  B1 00            lda (ZP_PTR_1),y
00119E  1  C9 40            cmp #'@'
0011A0  1  F0 2A            beq @player
0011A2  1  C9 2B            cmp #'+'
0011A4  1  F0 26            beq @player
0011A6  1  C9 24            cmp #'$'
0011A8  1  F0 32            beq @crate
0011AA  1  C9 2E            cmp #'.'
0011AC  1  F0 4E            beq @goal
0011AE  1  C9 2A            cmp #'*'
0011B0  1  F0 3A            beq @crateongoal
0011B2  1  C9 20            cmp #' '
0011B4  1  F0 06            beq @ignore
0011B6  1  C9 00            cmp #0
0011B8  1  F0 02            beq @ignore
0011BA  1  80 50            bra @wall
0011BC  1               @ignore:
0011BC  1                   ; ignore
0011BC  1  A9 00            lda #$0 ; black tile
0011BE  1  8D 23 9F         sta VERA_DATA0
0011C1  1  9C 23 9F         stz VERA_DATA0
0011C4  1  C8               iny
0011C5  1  CC 09 09         cpy fieldwidth
0011C8  1  D0 D2            bne @row
0011CA  1  80 4E            bra @endline
0011CC  1               @player:
0011CC  1  A9 02            lda #$2
0011CE  1  8D 23 9F         sta VERA_DATA0
0011D1  1  9C 23 9F         stz VERA_DATA0
0011D4  1  C8               iny
0011D5  1  CC 09 09         cpy fieldwidth
0011D8  1  D0 C2            bne @row
0011DA  1  80 3E            bra @endline
0011DC  1               @crate:
0011DC  1  A9 03            lda #$3
0011DE  1  8D 23 9F         sta VERA_DATA0
0011E1  1  9C 23 9F         stz VERA_DATA0
0011E4  1  C8               iny
0011E5  1  CC 09 09         cpy fieldwidth
0011E8  1  D0 B2            bne @row
0011EA  1  80 2E            bra @endline
0011EC  1               @crateongoal:
0011EC  1  A9 05            lda #$5
0011EE  1  8D 23 9F         sta VERA_DATA0
0011F1  1  9C 23 9F         stz VERA_DATA0
0011F4  1  C8               iny
0011F5  1  CC 09 09         cpy fieldwidth
0011F8  1  D0 A2            bne @row
0011FA  1  80 1E            bra @endline
0011FC  1               @goal:
0011FC  1  A9 04            lda #$4
0011FE  1  8D 23 9F         sta VERA_DATA0
001201  1  9C 23 9F         stz VERA_DATA0
001204  1  C8               iny
001205  1  CC 09 09         cpy fieldwidth
001208  1  D0 92            bne @row
00120A  1  80 0E            bra @endline
00120C  1               
00120C  1               @wall:
00120C  1  A9 01            lda #$1 ; load tile 1 ; brick
00120E  1  8D 23 9F         sta VERA_DATA0
001211  1  9C 23 9F         stz VERA_DATA0
001214  1               
001214  1  C8               iny
001215  1  CC 09 09         cpy fieldwidth
001218  1  D0 82            bne @row
00121A  1               @endline:
00121A  1                   ; advance pointer to next row in the field
00121A  1  A5 00            lda ZP_PTR_1
00121C  1  18               clc
00121D  1  6D 09 09         adc fieldwidth
001220  1  85 00            sta ZP_PTR_1
001222  1  90 06            bcc @checklastrow ; no carry, don't increment high byte on pointer
001224  1  A5 01            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
001226  1  69 00            adc #0
001228  1  85 01            sta ZP_PTR_1+1
00122A  1               @checklastrow:
00122A  1                   ; last row?
00122A  1                   ; increment vera pointer to next row
00122A  1  AD 0B 09         lda vera_byte_low
00122D  1  18               clc
00122E  1  69 80            adc #$80    ; add address delta to next row - 64 tiles * 2 = 128 / $80
001230  1  8D 0B 09         sta vera_byte_low
001233  1  90 08            bcc @next3  ; no need to change the high byte
001235  1  AD 0C 09         lda vera_byte_mid
001238  1  69 00            adc #$0     ; add carry (so +1)
00123A  1  8D 0C 09         sta vera_byte_mid
00123D  1               @next3:
00123D  1  E8               inx
00123E  1  EC 0A 09         cpx fieldheight
001241  1  F0 03            beq @nextsection
001243  1               
001243  1  4C 86 11         jmp @nextrow
001246  1               @nextsection:
001246  1  60               rts
001247  1               
001247  1               titlescreen:
001247  1  00 00 01 00  .incbin "tiles/titlescreen.bin"
00124B  1  01 00 01 00  
00124F  1  00 00 00 00  
002247  1               messagescreen:
002247  1  00 00 00 00  .incbin "tiles/messagescreen.bin"
00224B  1  00 00 00 00  
00224F  1  00 00 00 00  
003247  1               completescreen:
003247  1  00 00 00 00  .incbin "tiles/complete.bin"
00324B  1  00 00 00 00  
00324F  1  00 00 00 00  
004247  1               tiledata:
004247  1               black:
004247  1  00 00 00 00  .incbin "tiles/black.bin"
00424B  1  00 00 00 00  
00424F  1  00 00 00 00  
004347  1               Brick:
004347  1  08 08 08 08  .incbin "tiles/brick.bin"
00434B  1  08 08 08 E5  
00434F  1  08 08 08 08  
004447  1               player:
004447  1  00 00 00 00  .incbin "tiles/player.bin"
00444B  1  00 10 10 10  
00444F  1  10 0B 00 00  
004547  1               crate:
004547  1  57 57 57 57  .incbin "tiles/crate.bin"
00454B  1  57 57 57 57  
00454F  1  57 57 57 57  
004647  1               goal:
004647  1  00 00 00 00  .incbin "tiles/goal.bin"
00464B  1  00 00 00 00  
00464F  1  00 00 00 00  
004747  1               crateongoal:
004747  1  57 57 57 57  .incbin "tiles/crateongoal.bin"
00474B  1  57 57 57 57  
00474F  1  57 57 57 57  
004847  1               LOADSTART:
004847  1  32 00 5A 02  .incbin "levels.bin"
00484B  1  0B 00 0B 00  
00484F  1  03 00 00 00  
008250  1               
008250  1               
