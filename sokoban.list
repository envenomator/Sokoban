ca65 V2.19 - Git ab8bb268
Main file   : sokoban.asm
Current file: sokoban.asm

000000r 1               .include "x16.inc"
000000r 2               .ifndef X16_INC
000000r 2               X16_INC  = 1
000000r 2               
000000r 2               .ifndef __CX16__
000000r 2               __CX16__ = 1
000000r 2               .endif
000000r 2               
000000r 2               SD_DEVICE   = 1
000000r 2               HOST_DEVICE = 8
000000r 2               DISK_DEVICE = HOST_DEVICE
000000r 2               
000000r 2               
000000r 2               ; RAM Addresses
000000r 2               
000000r 2               ; Kernal Registers
000000r 2               r0						= $02
000000r 2               r0L					= r0
000000r 2               r0H					= r0+1
000000r 2               r1						= $04
000000r 2               r1L					= r1
000000r 2               r1H					= r1+1
000000r 2               r2						= $06
000000r 2               r2L					= r2
000000r 2               r2H					= r2+1
000000r 2               r3						= $08
000000r 2               r3L					= r3
000000r 2               r3H					= r3+1
000000r 2               r4						= $0A
000000r 2               r4L					= r4
000000r 2               r4H					= r4+1
000000r 2               r5						= $0C
000000r 2               r5L					= r5
000000r 2               r5H					= r5+1
000000r 2               r6						= $0E
000000r 2               r6L					= r6
000000r 2               r6H					= r6+1
000000r 2               r7						= $10
000000r 2               r7L					= r7
000000r 2               r7H					= r7+1
000000r 2               r8						= $12
000000r 2               r8L					= r8
000000r 2               r8H					= r8+1
000000r 2               r9						= $14
000000r 2               r9L					= r9
000000r 2               r9H					= r9+1
000000r 2               r10					= $16
000000r 2               r10L					= r10
000000r 2               r10H					= r10+1
000000r 2               r11					= $18
000000r 2               r11L					= r11
000000r 2               r11H					= r11+1
000000r 2               r12					= $1A
000000r 2               r12L					= r12
000000r 2               r12H					= r12+1
000000r 2               r13					= $1C
000000r 2               r13L					= r13
000000r 2               r13H					= r13+1
000000r 2               r14					= $1E
000000r 2               r14L					= r14
000000r 2               r14H					= r14+1
000000r 2               r15					= $20
000000r 2               r15L					= r15
000000r 2               r15H					= r15+1
000000r 2               
000000r 2               ; Zero-Page userspace
000000r 2               ZP_PTR_1          = $00	; first four pointers for temporary use only
000000r 2               ZP_PTR_2          = $22
000000r 2               ZP_PTR_3          = $24
000000r 2               ZP_PTR_4          = $26
000000r 2               
000000r 2               ; I/O Registers
000000r 2               VERA_addr_low     = $9F20
000000r 2               VERA_addr_high    = $9F21
000000r 2               VERA_addr_bank    = $9F22
000000r 2               VERA_data0        = $9F23
000000r 2               VERA_data1        = $9F24
000000r 2               VERA_ctrl         = $9F25
000000r 2               VERA_ien          = $9F26
000000r 2               VERA_isr          = $9F27
000000r 2               VERA_irqline_l    = $9F28
000000r 2               VERA_dc_video     = $9F29
000000r 2               VERA_dc_hscale    = $9F2A
000000r 2               VERA_dc_vscale    = $9F2B
000000r 2               VERA_dc_border    = $9F2C
000000r 2               VERA_dc_hstart    = $9F29
000000r 2               VERA_dc_hstop     = $9F2A
000000r 2               VERA_dc_vsstart   = $9F2B
000000r 2               VERA_dc_vstop     = $9F2C
000000r 2               VERA_L0_config    = $9F2D
000000r 2               VERA_L0_mapbase   = $9F2E
000000r 2               VERA_L0_tilebase  = $9F2F
000000r 2               VERA_L0_hscroll_l = $9F30
000000r 2               VERA_L0_hscroll_h = $9F31
000000r 2               VERA_L0_vscroll_l = $9F32
000000r 2               VERA_L0_vscroll_h = $9F33
000000r 2               VERA_L1_config    = $9F34
000000r 2               VERA_L1_mapbase   = $9F35
000000r 2               VERA_L1_tilebase  = $9F36
000000r 2               VERA_L1_hscroll_l = $9F37
000000r 2               VERA_L1_hscroll_h = $9F38
000000r 2               VERA_L1_vscroll_l = $9F39
000000r 2               VERA_L1_vscroll_h = $9F3A
000000r 2               VERA_audio_ctrl   = $9F3B
000000r 2               VERA_audio_rate   = $9F3C
000000r 2               VERA_audio_data   = $9F3D
000000r 2               VERA_spi_data     = $9F3E
000000r 2               VERA_spi_ctrl     = $9F3F
000000r 2               
000000r 2               
000000r 2               ROM_BANK          = $9F60
000000r 2               RAM_BANK          = $9F61
000000r 2               
000000r 2               YM_reg            = $9FE0
000000r 2               YM_data           = $9FE1
000000r 2               
000000r 2               ; Emulator Registers
000000r 2               GIF_ctrl          = $9FB5
000000r 2               
000000r 2               ; ROM Banks
000000r 2               KERNAL_ROM_BANK   = 0
000000r 2               BASIC_ROM_BANK    = 4
000000r 2               
000000r 2               ; Banked Addresses
000000r 2               RAM_WIN           = $A000
000000r 2               RAM_WIN_SIZE      = $2000
000000r 2               ROM_WIN           = $C000
000000r 2               
000000r 2               ; Kernal Subroutines
000000r 2               CONSOLE_set_paging_message		:= $FED5
000000r 2               CONSOLE_put_image					:= $FED8
000000r 2               CONSOLE_init						:= $FEDB
000000r 2               CONSOLE_put_char					:= $FEDE
000000r 2               CONSOLE_get_char					:= $FEE1
000000r 2               MEMORY_FILL                   := $FEE4
000000r 2               MEMORY_COPY                   := $FEE7
000000r 2               MEMORY_CRC                    := $FEEA
000000r 2               MEMORY_DECOMPRESS             := $FEED
000000r 2               SPRITE_set_image					:= $FEF0
000000r 2               SPRITE_set_position				:= $FEF3
000000r 2               FB_init                 		:= $FEF6
000000r 2               FB_get_info             		:= $FEF9
000000r 2               FB_set_palette          		:= $FEFC
000000r 2               FB_cursor_position      		:= $FEFF
000000r 2               FB_cursor_next_line     		:= $FF02
000000r 2               FB_get_pixel            		:= $FF05
000000r 2               FB_get_pixels           		:= $FF08
000000r 2               FB_set_pixel            		:= $FF0B
000000r 2               FB_set_pixels           		:= $FF0E
000000r 2               FB_set_8_pixels         		:= $FF11
000000r 2               FB_set_8_pixels_opaque  		:= $FF14
000000r 2               FB_fill_pixels          		:= $FF17
000000r 2               FB_filter_pixels        		:= $FF1A
000000r 2               FB_move_pixels          		:= $FF1D
000000r 2               GRAPH_init							:= $FF20
000000r 2               GRAPH_clear							:= $FF23
000000r 2               GRAPH_set_window					:= $FF26
000000r 2               GRAPH_set_colors					:= $FF29
000000r 2               GRAPH_draw_line					:= $FF2C
000000r 2               GRAPH_draw_rect					:= $FF2F
000000r 2               GRAPH_move_rect					:= $FF32
000000r 2               GRAPH_draw_oval					:= $FF35
000000r 2               GRAPH_draw_image					:= $FF38
000000r 2               GRAPH_set_font						:= $FF3B
000000r 2               GRAPH_get_char_size				:= $FF3E
000000r 2               GRAPH_put_char						:= $FF41
000000r 2               MONITOR								:= $FF44
000000r 2               ENTER_BASIC							:= $FF47
000000r 2               CLOCK_SET_DATE_TIME           := $FF4D
000000r 2               CLOCK_GET_DATE_TIME           := $FF50
000000r 2               JOYSTICK_SCAN                 := $FF53
000000r 2               JOYSTICK_GET                  := $FF56
000000r 2               SCREEN_SET_MODE					:= $FF5F
000000r 2               SCREEN_SET_CHARSET				:= $FF62
000000r 2               
000000r 2               MOUSE_CONFIG                  := $FF68
000000r 2               MOUSE_GET			            := $FF6B
000000r 2               MOUSE_SCAN                    := $FF71
000000r 2               SCINIT                        := $FF81
000000r 2               IOINIT                        := $FF84
000000r 2               RAMTAS                        := $FF87
000000r 2               RESTOR                        := $FF8A
000000r 2               SETLFS                        := $FFBA
000000r 2               SETNAM                        := $FFBD
000000r 2               OPEN                          := $FFC0
000000r 2               CLOSE                         := $FFC3
000000r 2               CHKIN                         := $FFC6
000000r 2               CHKOUT                        := $FFC9
000000r 2               CLRCHN                        := $FFCC
000000r 2               CHRIN                         := $FFCF
000000r 2               CHROUT                        := $FFD2
000000r 2               LOAD                          := $FFD5
000000r 2               SAVE                          := $FFD8
000000r 2               SETTIM                        := $FFDB
000000r 2               RDTIM                         := $FFDE
000000r 2               STOP                          := $FFE1
000000r 2               GETIN                         := $FFE4
000000r 2               CLALL									:= $FFE7
000000r 2               UDTIM									:= $FFEA
000000r 2               SCREEN								:= $FFED
000000r 2               PLOT									:= $FFF0
000000r 2               IOBASE								:= $FFF3
000000r 2               
000000r 2               ; BASIC Vectors
000000r 2               BASIC_PANIC       := $C000
000000r 2               BASIC_INIT        := $C003
000000r 2               
000000r 2               
000000r 2               ; VRAM Addresses
000000r 2               VRAM_petscii   = $0F800
000000r 2               VRAM_psg       = $1F9C0
000000r 2               VRAM_palette   = $1FA00
000000r 2               VRAM_sprattr   = $1FC00
000000r 2               
000000r 2               ; IRQs
000000r 2               IRQVec         := $0314
000000r 2               BRKVec         := $0316
000000r 2               NMIVec         := $0318
000000r 2               
000000r 2               ;   Macros
000000r 2               
000000r 2               .macro VERA_SET_ADDR addr, stride
000000r 2               	.ifnblank stride
000000r 2                     .if stride < 0
000000r 2                        lda #((^addr) | $08 | ((0-stride) << 4))
000000r 2                     .else
000000r 2                        lda #((^addr) | (stride << 4))
000000r 2                     .endif
000000r 2               	.else
000000r 2               		lda #(^addr) | $10
000000r 2               	.endif
000000r 2               
000000r 2               	sta VERA_addr_bank
000000r 2               	lda #(>addr)
000000r 2               	sta VERA_addr_high
000000r 2               	lda #(<addr)
000000r 2               	sta VERA_addr_low
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .endif
000000r 2               
000000r 1               
000000r 1               ; constants
000000r 1               ZP_PTR_FIELD = $28
000000r 1               temp = $30  ; used for temp 8/16 bit storage $30/$31
000000r 1               
000000r 1               NEWLINE = $0D
000000r 1               UPPERCASE = $8E
000000r 1               CLEARSCREEN = 147
000000r 1               LEVELHEADER = 10
000000r 1               
000000r 1               ; screen 16x16bit tile width/height
000000r 1               SCREENWIDTH = 40
000000r 1               SCREENHEIGHT = 30
000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1               ; VERA Registers
00080D  1               VERA_LOW            = $9F20
00080D  1               VERA_MID            = $9F21
00080D  1               VERA_HIGH           = $9F22
00080D  1               VERA_DATA0          = $9F23
00080D  1               VERA_CTRL           = $9F25
00080D  1               
00080D  1  4C 74 08        jmp start
000810  1               
000810  1               ; string constants
000810  1  50 52 45 53  message:          .byte "press a key",0
000814  1  53 20 41 20  
000818  1  4B 45 59 00  
00081C  1  53 45 4C 45  selectmessage:    .byte "select a level (",0
000820  1  43 54 20 41  
000824  1  20 4C 45 56  
00082D  1  29 3A 20 00  selectendmessage: .byte "): ",0
000831  1  45 52 52 4F  errormessage:     .byte "error loading file",0
000835  1  52 20 4C 4F  
000839  1  41 44 49 4E  
000844  1  50 52 45 53  quitmessage:      .byte "press q to quit",0
000848  1  53 20 51 20  
00084C  1  54 4F 20 51  
000854  1  4C 45 56 45  filename:         .byte "levels.bin"
000858  1  4C 53 2E 42  
00085C  1  49 4E        
00085E  1               filename_end:
00085E  1  47 4F 41 4C  winstatement:     .byte "goal reached!",0
000862  1  20 52 45 41  
000866  1  43 48 45 44  
00086C  1               
00086C  1               ; variables that the program uses during execution
00086C  1  00           currentlevel:   .byte 0 ; will need to be filled somewhere in the future in the GUI, or asked from the user
00086D  1  00           no_levels:      .byte 0 ; will be read by initfield
00086E  1  00           no_goals:       .byte 0 ; will be read by initfield, depending on the currentlevel
00086F  1  00           no_goalsreached:.byte 0 ; static now, reset for each game
000870  1  00           fieldwidth:     .byte 0 ; will be read by initfield, depending on the currentlevel
000871  1  00           fieldheight:    .byte 0 ; will be read by initfield, depending on the currentlevel
000872  1  00           vera_byte_low:  .byte 0
000873  1  00           vera_byte_mid: .byte 0
000874  1               
000874  1               ; usage of zeropage pointers:
000874  1               ; ZP_PTR_1 - temporary pointer
000874  1               ; ZP_PTR_2 - temporary pointer
000874  1               ; ZP_PTR_3 - position of player
000874  1               
000874  1               start:
000874  1                   ; force uppercase
000874  1  A9 8E            lda #UPPERCASE
000876  1  20 D2 FF         jsr CHROUT
000879  1               
000879  1  20 D6 0A         jsr resetvars
00087C  1  20 B3 0B         jsr loadtiles       ; load tiles from normal memory to VRAM
00087F  1  20 06 0C         jsr layerconfig     ; configure layer 0/1 on screen
000882  1               
000882  1  20 67 0A         jsr selectlevel
000885  1  20 EB 0A         jsr initfield       ; load correct startup values for selected field
000888  1  20 77 0C         jsr printfield2
00088B  1               ;    jsr printfield
00088B  1               
00088B  1               keyloop:
00088B  1  20 E4 FF         jsr GETIN
00088E  1               @checkdown:
00088E  1  C9 11            cmp #$11
000890  1  D0 05            bne @checkup
000892  1  20 29 09         jsr handledown
000895  1  80 1E            bra @done
000897  1               @checkup:
000897  1  C9 91            cmp #$91
000899  1  D0 05            bne @checkleft
00089B  1  20 00 09         jsr handleup
00089E  1  80 15            bra @done
0008A0  1               @checkleft:
0008A0  1  C9 9D            cmp #$9d
0008A2  1  D0 05            bne @checkright
0008A4  1  20 E2 08         jsr handleleft
0008A7  1  80 0C            bra @done
0008A9  1               @checkright:
0008A9  1  C9 1D            cmp #$1d
0008AB  1  D0 03            bne @checkquit
0008AD  1  20 C4 08         jsr handleright
0008B0  1               @checkquit:
0008B0  1  C9 51            cmp #$51
0008B2  1  D0 01            bne @done
0008B4  1  60               rts
0008B5  1               @done:
0008B5  1                   ; check if we have reached all goals
0008B5  1  AD 6E 08         lda no_goals
0008B8  1  CD 6F 08         cmp no_goalsreached
0008BB  1  D0 04            bne @donenextkey
0008BD  1  20 32 0A         jsr printwinstatement
0008C0  1  60               rts
0008C1  1               @donenextkey:
0008C1  1  4C 8B 08         jmp keyloop
0008C4  1               
0008C4  1               handleright:
0008C4  1                   ; pointers
0008C4  1                   ; 3 - player
0008C4  1                   ; 2 - block to the right of the player
0008C4  1                   ; 1 - block to the right of that block
0008C4  1               
0008C4  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1x position
0008C4  1  18               clc
0008C5  1  A5 24            lda ZP_PTR_3
0008C7  1  69 01            adc #$1               ; 1x position
0008C9  1  85 22            sta ZP_PTR_2
0008CB  1  A5 25            lda ZP_PTR_3+1
0008CD  1  69 00            adc #$0
0008CF  1  85 23            sta ZP_PTR_2+1
0008D1  1               
0008D1  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2x position
0008D1  1  18               clc
0008D2  1  A5 24            lda ZP_PTR_3
0008D4  1  69 02            adc #$2               ; 2x position
0008D6  1  85 00            sta ZP_PTR_1
0008D8  1  A5 25            lda ZP_PTR_3+1
0008DA  1  69 00            adc #$0
0008DC  1  85 01            sta ZP_PTR_1+1
0008DE  1               
0008DE  1  20 52 09         jsr handlemove
0008E1  1  60               rts
0008E2  1               
0008E2  1               handleleft:
0008E2  1                   ; pointers
0008E2  1                   ; 3 - player
0008E2  1                   ; 2 - block to the left of the player
0008E2  1                   ; 1 - block to the left of that block
0008E2  1               
0008E2  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1x position
0008E2  1  38               sec
0008E3  1  A5 24            lda ZP_PTR_3
0008E5  1  E9 01            sbc #$1               ; 1x position
0008E7  1  85 22            sta ZP_PTR_2
0008E9  1  A5 25            lda ZP_PTR_3+1
0008EB  1  E9 00            sbc #$0
0008ED  1  85 23            sta ZP_PTR_2+1
0008EF  1               
0008EF  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2x position
0008EF  1  38               sec
0008F0  1  A5 24            lda ZP_PTR_3
0008F2  1  E9 02            sbc #$2               ; 2x position
0008F4  1  85 00            sta ZP_PTR_1
0008F6  1  A5 25            lda ZP_PTR_3+1
0008F8  1  E9 00            sbc #$0
0008FA  1  85 01            sta ZP_PTR_1+1
0008FC  1               
0008FC  1  20 52 09         jsr handlemove
0008FF  1               
0008FF  1               @done:
0008FF  1  60               rts
000900  1               handleup:
000900  1                   ; pointers
000900  1                   ; 3 - player
000900  1                   ; 2 - block to the top of the player
000900  1                   ; 1 - block to the top of that block
000900  1               
000900  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1xFIELDWIDTH
000900  1  AD 70 08         lda fieldwidth
000903  1  85 30            sta temp
000905  1  38               sec
000906  1  A5 24            lda ZP_PTR_3
000908  1  E5 30            sbc temp
00090A  1  85 22            sta ZP_PTR_2
00090C  1  A5 25            lda ZP_PTR_3+1
00090E  1  E9 00            sbc #$0
000910  1  85 23            sta ZP_PTR_2+1
000912  1               
000912  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2xFIELDWIDTH
000912  1  AD 70 08         lda fieldwidth
000915  1  0A               asl ; 2x
000916  1  85 30            sta temp
000918  1  38               sec
000919  1  A5 24            lda ZP_PTR_3
00091B  1  E5 30            sbc temp
00091D  1  85 00            sta ZP_PTR_1
00091F  1  A5 25            lda ZP_PTR_3+1
000921  1  E9 00            sbc #$0
000923  1  85 01            sta ZP_PTR_1+1
000925  1               
000925  1  20 52 09         jsr handlemove
000928  1               
000928  1               @done:
000928  1  60               rts
000929  1               
000929  1               handledown:
000929  1                   ; pointers
000929  1                   ; 3 - player
000929  1                   ; 2 - block to the bottom of the player
000929  1                   ; 1 - block to the bottom of that block
000929  1               
000929  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1xFIELDWIDTH
000929  1  AD 70 08         lda fieldwidth
00092C  1  85 30            sta temp
00092E  1  18               clc
00092F  1  A5 24            lda ZP_PTR_3
000931  1  65 30            adc temp
000933  1  85 22            sta ZP_PTR_2
000935  1  A5 25            lda ZP_PTR_3+1
000937  1  69 00            adc #$0
000939  1  85 23            sta ZP_PTR_2+1
00093B  1               
00093B  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2xFIELDWIDTH
00093B  1  AD 70 08         lda fieldwidth
00093E  1  0A               asl ; 2x
00093F  1  85 30            sta temp
000941  1  18               clc
000942  1  A5 24            lda ZP_PTR_3
000944  1  65 30            adc temp
000946  1  85 00            sta ZP_PTR_1
000948  1  A5 25            lda ZP_PTR_3+1
00094A  1  69 00            adc #$0
00094C  1  85 01            sta ZP_PTR_1+1
00094E  1               
00094E  1  20 52 09         jsr handlemove
000951  1  60               rts
000952  1               
000952  1               handlemove:
000952  1                   ; pointers
000952  1                   ; 3 - points to the player position
000952  1                   ; 2 - points to the next block at the indicated direction
000952  1                   ; 1 - points to the block after that block
000952  1               
000952  1  A0 00            ldy #0
000954  1  B1 22            lda (ZP_PTR_2),y
000956  1  C9 20            cmp #' ' ; empty block next to player?
000958  1  F0 06            beq @moveplayertopoint2
00095A  1  C9 2E            cmp #'.' ; goal position next to player?
00095C  1  F0 02            beq @moveplayertopoint2
00095E  1  80 0D            bra @next ; no ' ' or '.' found next to player, is it a crate or a wall?
000960  1               @moveplayertopoint2:
000960  1                   ; move player to pointer 2
000960  1  20 E1 09         jsr moveplayeronfield
000963  1  20 97 09         jsr moveplayerposition
000966  1               
000966  1  20 AD 0B         jsr cls
000969  1               ;    jsr printfield
000969  1  20 77 0C         jsr printfield2
00096C  1               
00096C  1  60               rts
00096D  1               @next:
00096D  1  A0 00            ldy #0
00096F  1  B1 22            lda (ZP_PTR_2),y
000971  1  C9 24            cmp #'$' ; crate next to player?
000973  1  F0 06            beq @combinedmovecheck
000975  1  C9 2A            cmp #'*' ; crate on goal next to player?
000977  1  F0 02            beq @combinedmovecheck
000979  1  80 1B            bra @done ; something else not able to push
00097B  1               @combinedmovecheck:
00097B  1  B1 00            lda (ZP_PTR_1),y
00097D  1  C9 20            cmp #' ' ; space after crate?
00097F  1  F0 06            beq @combinedmove
000981  1  C9 2E            cmp #'.' ; goal after crate?
000983  1  F0 02            beq @combinedmove
000985  1  80 0F            bra @done ; nothing to move
000987  1               @combinedmove:
000987  1  20 A0 09         jsr movecrateonfield
00098A  1  20 E1 09         jsr moveplayeronfield
00098D  1  20 97 09         jsr moveplayerposition
000990  1               
000990  1  20 77 0C         jsr printfield2
000993  1  20 AD 0B         jsr cls
000996  1               ;    jsr printfield
000996  1               @done:
000996  1  60               rts
000997  1               
000997  1               moveplayerposition:
000997  1                   ; moves pointer 3 to position of pointer 2
000997  1  A5 22            lda ZP_PTR_2
000999  1  85 24            sta ZP_PTR_3
00099B  1  A5 23            lda ZP_PTR_2+1
00099D  1  85 25            sta ZP_PTR_3+1
00099F  1  60               rts
0009A0  1               
0009A0  1               movecrateonfield:
0009A0  1                   ; copies (ZP_PTR_2) to (ZP_PTR_1)
0009A0  1                   ; and handles different crate move options (normal / crate on goal)
0009A0  1  A0 00            ldy #0
0009A2  1  B1 22            lda (ZP_PTR_2),y
0009A4  1                   ; was there a goal underneath the crate?
0009A4  1  C9 2A            cmp #'*'
0009A6  1  D0 1D            bne @crateonly
0009A8  1                   ; do we move to a goal position? (from goal to goal..)
0009A8  1  B1 00            lda (ZP_PTR_1),y
0009AA  1  C9 2E            cmp #'.'
0009AC  1  D0 0A            bne @movetonormalposition
0009AE  1               @movetogoalposition:
0009AE  1  A9 2A            lda #'*' ; crate on goal symbol
0009B0  1  91 00            sta (ZP_PTR_1),y
0009B2  1  A9 2E            lda #'.'
0009B4  1  91 22            sta (ZP_PTR_2),y
0009B6  1  80 28            bra @done
0009B8  1               @movetonormalposition:
0009B8  1  CE 6F 08         dec no_goalsreached ; -1 win points
0009BB  1  A9 24            lda #'$'; crate symbol
0009BD  1  91 00            sta (ZP_PTR_1),y
0009BF  1  A9 2E            lda #'.'
0009C1  1  91 22            sta (ZP_PTR_2),y
0009C3  1  80 1B            bra @done
0009C5  1               @crateonly:
0009C5  1                   ; is the destination a goal?
0009C5  1  B1 00            lda (ZP_PTR_1),y
0009C7  1  C9 2E            cmp #'.'
0009C9  1  D0 0D            bne @crateonly_nongoal
0009CB  1                   ; crate moves to goal, from a non-goal position
0009CB  1  EE 6F 08         inc no_goalsreached ; +1 to win
0009CE  1  A9 2A            lda #'*'
0009D0  1  91 00            sta (ZP_PTR_1),y
0009D2  1  A9 20            lda #' '
0009D4  1  91 22            sta (ZP_PTR_2),y
0009D6  1  80 08            bra @done
0009D8  1               @crateonly_nongoal:
0009D8  1  A9 24            lda #'$'
0009DA  1  91 00            sta (ZP_PTR_1),y
0009DC  1  A9 20            lda #' '; empty space to move the player in next
0009DE  1  91 22            sta (ZP_PTR_2),y
0009E0  1               @done:
0009E0  1  60               rts
0009E1  1               
0009E1  1               moveplayeronfield:
0009E1  1                   ; copies (ZP_PTR_3) to (ZP_PTR_2)
0009E1  1                   ; and handles multiple player move options (normal / on goal)
0009E1  1  A0 00            ldy #0
0009E3  1  B1 24            lda (ZP_PTR_3),y
0009E5  1                   ; was there a goal underneath the player?
0009E5  1  C9 2B            cmp #'+'
0009E7  1  D0 1A            bne @playeronly
0009E9  1                   ; do we move to a goal position? (from goal to goal..)
0009E9  1  B1 22            lda (ZP_PTR_2),y
0009EB  1  C9 2E            cmp #'.'
0009ED  1  D0 0A            bne @movetonormalposition
0009EF  1               @movetogoalposition:
0009EF  1  A9 2B            lda #'+' ; player on goal symbol
0009F1  1  91 22            sta (ZP_PTR_2),y
0009F3  1  A9 2E            lda #'.'
0009F5  1  91 24            sta (ZP_PTR_3),y
0009F7  1  80 22            bra @done
0009F9  1               @movetonormalposition:
0009F9  1  A9 40            lda #'@'; crate symbol
0009FB  1  91 22            sta (ZP_PTR_2),y
0009FD  1  A9 2E            lda #'.'
0009FF  1  91 24            sta (ZP_PTR_3),y
000A01  1  80 18            bra @done
000A03  1               @playeronly:
000A03  1                   ; is the destination a goal?
000A03  1  B1 22            lda (ZP_PTR_2),y
000A05  1  C9 2E            cmp #'.'
000A07  1  D0 0A            bne @playeronly_nongoal
000A09  1                   ; player moves to goal, from a non-goal position
000A09  1  A9 2B            lda #'+'
000A0B  1  91 22            sta (ZP_PTR_2),y
000A0D  1  A9 20            lda #' '
000A0F  1  91 24            sta (ZP_PTR_3),y
000A11  1  80 08            bra @done
000A13  1               @playeronly_nongoal:
000A13  1  A9 40            lda #'@'
000A15  1  91 22            sta (ZP_PTR_2),y
000A17  1  A9 20            lda #' '; empty space
000A19  1  91 24            sta (ZP_PTR_3),y
000A1B  1               @done:
000A1B  1  60               rts
000A1C  1               
000A1C  1               print:
000A1C  1                   ; print from address ZP_PTR_1
000A1C  1                   ; don't end with newline character
000A1C  1  A0 00            ldy #0
000A1E  1               @loop:
000A1E  1  B1 00            lda (ZP_PTR_1),y ; load character from address
000A20  1  F0 06            beq @done        ; end at 0 character
000A22  1  20 D2 FF         jsr CHROUT
000A25  1  C8               iny
000A26  1  80 F6            bra @loop
000A28  1               @done:
000A28  1  60               rts
000A29  1               
000A29  1               printline:
000A29  1                   ; print from address ZP_PTR_1
000A29  1                   ; end with newline character
000A29  1  20 1C 0A         jsr print
000A2C  1  A9 0D            lda #NEWLINE
000A2E  1  20 D2 FF         jsr CHROUT
000A31  1  60               rts
000A32  1               
000A32  1               printwinstatement:
000A32  1  A9 5E            lda #<winstatement
000A34  1  85 00            sta ZP_PTR_1
000A36  1  A9 08            lda #>winstatement
000A38  1  85 01            sta ZP_PTR_1+1
000A3A  1  20 29 0A         jsr printline
000A3D  1  60               rts
000A3E  1               
000A3E  1               printdecimal:
000A3E  1                   ; prints decimal from A register
000A3E  1  A0 2F            ldy #$2f
000A40  1  A2 3A            ldx #$3a
000A42  1  38               sec
000A43  1               @loop1:
000A43  1  C8               iny
000A44  1  E9 64            sbc #100
000A46  1  B0 FB            bcs @loop1
000A48  1               @loop2:
000A48  1  CA               dex
000A49  1  69 0A            adc #10
000A4B  1  30 FB            bmi @loop2
000A4D  1  69 2F            adc #$2f
000A4F  1               
000A4F  1                   ; Y = hundreds, X = tens, A = ones
000A4F  1  48               pha
000A50  1  8A               txa
000A51  1  48               pha
000A52  1  98               tya
000A53  1  C9 30            cmp #$30 ; is it a '0' petscii?
000A55  1  F0 03            beq @tens
000A57  1  20 D2 FF         jsr CHROUT ; print Y
000A5A  1               @tens:
000A5A  1  68               pla
000A5B  1  C9 30            cmp #$30 ; is it a '0' petscii?
000A5D  1  F0 03            beq @ones
000A5F  1  20 D2 FF         jsr CHROUT ; print X
000A62  1               @ones:
000A62  1  68               pla
000A63  1  20 D2 FF         jsr CHROUT ; print A
000A66  1               
000A66  1  60               rts
000A67  1               
000A67  1               selectlevel:
000A67  1  A9 01            lda #1 ; start out with first level
000A69  1  8D 6C 08         sta currentlevel
000A6C  1               
000A6C  1               @mainloop:
000A6C  1  20 AD 0B         jsr cls
000A6F  1                   ; print selection message
000A6F  1  A9 1C            lda #<selectmessage
000A71  1  85 00            sta ZP_PTR_1
000A73  1  A9 08            lda #>selectmessage
000A75  1  85 01            sta ZP_PTR_1+1
000A77  1  20 1C 0A         jsr print
000A7A  1                   ; print range
000A7A  1  20 D2 FF         jsr CHROUT
000A7D  1  A9 31            lda #'1'
000A7F  1  20 D2 FF         jsr CHROUT
000A82  1  A9 2D            lda #'-'
000A84  1  20 D2 FF         jsr CHROUT
000A87  1  AD 6D 08         lda no_levels
000A8A  1  20 3E 0A         jsr printdecimal
000A8D  1  A9 2D            lda #<selectendmessage
000A8F  1  85 00            sta ZP_PTR_1
000A91  1  A9 08            lda #>selectendmessage
000A93  1  85 01            sta ZP_PTR_1+1
000A95  1  20 1C 0A         jsr print
000A98  1                   ; print level number
000A98  1  AD 6C 08         lda currentlevel
000A9B  1  20 3E 0A         jsr printdecimal
000A9E  1               
000A9E  1               @charloop:
000A9E  1  20 E4 FF         jsr GETIN
000AA1  1               @checkdown:
000AA1  1  C9 11            cmp #$11 ; down pressed
000AA3  1  F0 06            beq @down
000AA5  1  C9 9D            cmp #$9d ; left pressed
000AA7  1  F0 02            beq @down
000AA9  1  80 0C            bra @checkup
000AAB  1               @down:
000AAB  1                   ; down key pressed
000AAB  1  AD 6C 08         lda currentlevel
000AAE  1  C9 01            cmp #1
000AB0  1  F0 EC            beq @charloop   ; lowest value == 1
000AB2  1  CE 6C 08         dec currentlevel
000AB5  1  80 B5            bra @mainloop
000AB7  1               @checkup:
000AB7  1  C9 91            cmp #$91 ; up pressed
000AB9  1  F0 06            beq @up
000ABB  1  C9 1D            cmp #$1d ; right pressed
000ABD  1  F0 02            beq @up
000ABF  1  80 0D            bra @checkreturnkey
000AC1  1               @up:
000AC1  1                   ; up key pressed
000AC1  1  AD 6C 08         lda currentlevel
000AC4  1  CD 6D 08         cmp no_levels
000AC7  1  F0 D5            beq @charloop   ; maximum value reached
000AC9  1  EE 6C 08         inc currentlevel
000ACC  1  80 9E            bra @mainloop
000ACE  1               @checkreturnkey:
000ACE  1  C9 0D            cmp #$0d
000AD0  1  D0 CC            bne @charloop
000AD2  1                   ; return key pressed - select this level
000AD2  1  20 AD 0B         jsr cls
000AD5  1  60               rts
000AD6  1               
000AD6  1               resetvars:
000AD6  1                   ; reset goals
000AD6  1  A9 00            lda #0
000AD8  1  8D 6F 08         sta no_goalsreached
000ADB  1               
000ADB  1                   ; load field pointer to first address at LOADSTART
000ADB  1                   ; load 1st pointer to temp pointer ZP_PTR_1
000ADB  1  A9 9B            lda #<LOADSTART
000ADD  1  85 00            sta ZP_PTR_1
000ADF  1  A9 13            lda #>LOADSTART
000AE1  1  85 01            sta ZP_PTR_1+1
000AE3  1               
000AE3  1                   ; load number of levels, pointed to by ZP_PTR_1,0
000AE3  1  A0 00            ldy #0
000AE5  1  B1 00            lda (ZP_PTR_1),y
000AE7  1  8D 6D 08         sta no_levels
000AEA  1               
000AEA  1  60               rts
000AEB  1               
000AEB  1               initfield:
000AEB  1                   ; load field pointer to first address at LOADSTART
000AEB  1                   ; load 1st pointer to temp pointer ZP_PTR_1
000AEB  1  A9 9B            lda #<LOADSTART
000AED  1  85 00            sta ZP_PTR_1
000AEF  1  A9 13            lda #>LOADSTART
000AF1  1  85 01            sta ZP_PTR_1+1
000AF3  1               
000AF3  1                   ; skip to the first header, two bytes next
000AF3  1  18               clc
000AF4  1  A5 00            lda ZP_PTR_1
000AF6  1  69 02            adc #2
000AF8  1  85 00            sta ZP_PTR_1
000AFA  1               
000AFA  1                   ; now advance pointer (currentlevel - 1) * HEADERSIZE to advance to the correct payload pointer to that level
000AFA  1  AD 6C 08         lda currentlevel
000AFD  1  AA               tax ; x contains the currentlevel now and will act as a counter
000AFE  1               @loop:
000AFE  1  CA               dex
000AFF  1  F0 11            beq @fieldptrdone
000B01  1                   ; advance the field payload pointer
000B01  1  A5 00            lda ZP_PTR_1
000B03  1  18               clc
000B04  1  69 0A            adc #LEVELHEADER
000B06  1  85 00            sta ZP_PTR_1
000B08  1  90 F4            bcc @loop   ; nothing to do for the high byte
000B0A  1  A5 01            lda ZP_PTR_1+1
000B0C  1  69 00            adc #$0     ; increase the high byte
000B0E  1  85 01            sta ZP_PTR_1+1
000B10  1  80 EC            bra @loop
000B12  1               @fieldptrdone:
000B12  1  A0 00            ldy #0  ; index to the offset from LOADSTART
000B14  1                   ; add LOADSTART address to the offset in this field
000B14  1  18               clc
000B15  1  B1 00            lda (ZP_PTR_1),y
000B17  1  69 9B            adc #<LOADSTART
000B19  1  85 28            sta ZP_PTR_FIELD
000B1B  1  C8               iny
000B1C  1  B1 00            lda (ZP_PTR_1),y
000B1E  1  69 13            adc #>LOADSTART
000B20  1  85 29            sta ZP_PTR_FIELD+1
000B22  1                   ; ZP_PTR_FIELD now contains the actual address in memory, not only the offset from the data
000B22  1               
000B22  1  A0 02            ldy #2  ; index from payload pointer to width variable (low byte)
000B24  1  B1 00            lda (ZP_PTR_1),y
000B26  1  8D 70 08         sta fieldwidth
000B29  1  A0 04            ldy #4  ; index from payload pointer to height variable (low byte)
000B2B  1  B1 00            lda (ZP_PTR_1),y
000B2D  1  8D 71 08         sta fieldheight
000B30  1  A0 06            ldy #6  ; index from payload pointer to goals in this level (low byte)
000B32  1  B1 00            lda (ZP_PTR_1),y
000B34  1  8D 6E 08         sta no_goals
000B37  1  A0 08            ldy #8  ; index from payload pointer to player ptr in this level
000B39  1               
000B39  1  18               clc
000B3A  1  B1 00            lda (ZP_PTR_1),y
000B3C  1  69 9B            adc #<LOADSTART
000B3E  1  85 24            sta ZP_PTR_3
000B40  1  C8               iny
000B41  1  B1 00            lda (ZP_PTR_1),y
000B43  1  69 13            adc #>LOADSTART
000B45  1  85 25            sta ZP_PTR_3+1
000B47  1                   ; ZP_PTR_3 now contains the actual address in memory of the player, not only the offset from the data
000B47  1  60               rts
000B48  1               
000B48  1               printfield:
000B48  1                   ; no clearscreen, just print the field to screen on current position
000B48  1                   ; depends only on
000B48  1                   ; - field label for start of field
000B48  1               
000B48  1  A5 28            lda ZP_PTR_FIELD
000B4A  1  85 00            sta ZP_PTR_1
000B4C  1  A5 29            lda ZP_PTR_FIELD+1
000B4E  1  85 01            sta ZP_PTR_1+1
000B50  1  A2 00            ldx #0 ; row counter
000B52  1               @nextrow:
000B52  1  A0 00            ldy #0 ; column counter
000B54  1               @row:
000B54  1  B1 00            lda (ZP_PTR_1),y
000B56  1  C9 40            cmp #'@'
000B58  1  F0 06            beq @character
000B5A  1  C9 2B            cmp #'+'
000B5C  1  F0 02            beq @character
000B5E  1  80 17            bra @normalcolor
000B60  1               @character:
000B60  1  48               pha
000B61  1  A9 9E            lda #$9e ; YELLOW
000B63  1  20 D2 FF         jsr CHROUT
000B66  1  68               pla
000B67  1  20 D2 FF         jsr CHROUT
000B6A  1  A9 05            lda #$05 ; WHITE
000B6C  1  20 D2 FF         jsr CHROUT
000B6F  1  C8               iny
000B70  1  CC 70 08         cpy fieldwidth
000B73  1  D0 DF            bne @row
000B75  1  80 09            bra @endline
000B77  1               @normalcolor:
000B77  1  20 D2 FF         jsr CHROUT
000B7A  1  C8               iny
000B7B  1  CC 70 08         cpy fieldwidth
000B7E  1  D0 D4            bne @row
000B80  1               @endline:
000B80  1  A9 0D            lda #NEWLINE
000B82  1  20 D2 FF         jsr CHROUT
000B85  1               
000B85  1                   ; advance pointer to next row
000B85  1  A5 00            lda ZP_PTR_1
000B87  1  18               clc
000B88  1  6D 70 08         adc fieldwidth
000B8B  1  85 00            sta ZP_PTR_1
000B8D  1  90 07            bcc @checklastrow ; no carry, don't increment high byte on pointer
000B8F  1  A5 01            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
000B91  1  18               clc
000B92  1  69 01            adc #1
000B94  1  85 01            sta ZP_PTR_1+1
000B96  1               @checklastrow:
000B96  1                   ; last row?
000B96  1  E8               inx
000B97  1  EC 71 08         cpx fieldheight
000B9A  1  D0 B6            bne @nextrow
000B9C  1               
000B9C  1                   ; print quit message at the end of the field
000B9C  1  A9 0D            lda #NEWLINE
000B9E  1  20 D2 FF         jsr CHROUT
000BA1  1  A9 44            lda #<quitmessage
000BA3  1  85 00            sta ZP_PTR_1
000BA5  1  A9 08            lda #>quitmessage
000BA7  1  85 01            sta ZP_PTR_1+1
000BA9  1  20 29 0A         jsr printline
000BAC  1               
000BAC  1  60               rts
000BAD  1               
000BAD  1               cls:
000BAD  1  A9 93            lda #CLEARSCREEN
000BAF  1  20 D2 FF         jsr CHROUT
000BB2  1  60               rts
000BB3  1               
000BB3  1               loadtiles:
000BB3  1               ; Build  16x16 256 color tiles in VRAM location $12000
000BB3  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000BB6  1  A9 11            lda #$11
000BB8  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 1
000BBB  1  A9 20            lda #$20
000BBD  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $20
000BC0  1  9C 20 9F         stz VERA_LOW                        ; Set Low Byte to $00
000BC3  1               
000BC3  1  A2 00            ldx #0
000BC5  1  BD 9B 0D     :   lda tiledata,x                      ; index 0 / black tile
000BC8  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000BCB  1  E8               inx
000BCC  1  D0 F7            bne :-
000BCE  1                   ; load Brick data
000BCE  1  A2 00            ldx #0
000BD0  1  BD 9B 0E     :   lda Brick,x                         ; index 1 / brick
000BD3  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000BD6  1  E8               inx
000BD7  1  D0 F7            bne :-
000BD9  1                   ; load player data
000BD9  1  A2 00            ldx #0
000BDB  1  BD 9B 0F     :   lda player,x                        ; index 2 / player
000BDE  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000BE1  1  E8               inx
000BE2  1  D0 F7            bne :-
000BE4  1                   ; load crate data
000BE4  1  A2 00            ldx #0
000BE6  1  BD 9B 10     :   lda crate,x                         ; index 3 / crate (normal)
000BE9  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000BEC  1  E8               inx
000BED  1  D0 F7            bne :-
000BEF  1                   ; load goal data
000BEF  1  A2 00            ldx #0
000BF1  1  BD 9B 11     :   lda goal,x                         ; index 4 / goal (normal)
000BF4  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000BF7  1  E8               inx
000BF8  1  D0 F7            bne :-
000BFA  1                   ; load crateongoal data
000BFA  1  A2 00            ldx #0
000BFC  1  BD 9B 12     :   lda crateongoal,x                   ; index 5 / crate on goal
000BFF  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000C02  1  E8               inx
000C03  1  D0 F7            bne :-
000C05  1               
000C05  1  60               rts
000C06  1               
000C06  1               layerconfig:
000C06  1               ; Configure Layer 0
000C06  1  A9 53            lda #%01010011                      ; 64 x 64 tiles, 8 bits per pixel
000C08  1  8D 2D 9F         sta $9F2D
000C0B  1  A9 20            lda #$20                            ; $20 points to $4000 in VRAM
000C0D  1  8D 2E 9F         sta $9F2E                           ; Store to Map Base Pointer
000C10  1               
000C10  1  A9 93            lda #$93                            ; $48 points to $12000, Width and Height 16 pixel
000C12  1  8D 2F 9F         sta $9F2F                           ; Store to Tile Base Pointer
000C15  1               
000C15  1               ; Fill the Layer 0 with all zeros (black)
000C15  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000C18  1  A9 10            lda #$10
000C1A  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
000C1D  1  A9 40            lda #$40
000C1F  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $40
000C22  1  A9 00            lda #$0
000C24  1  8D 20 9F         sta VERA_LOW                        ; Set Low Byte to $00
000C27  1               
000C27  1  A9 00            lda #0
000C29  1  8D 23 9F         sta VERA_DATA0
000C2C  1  8D 23 9F         sta VERA_DATA0
000C2F  1               
000C2F  1  A0 40            ldy #64
000C31  1  A9 00            lda #0
000C33  1  A2 40        :   ldx #64
000C35  1  8D 23 9F     :   sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000C38  1  8D 23 9F         sta VERA_DATA0                      ; Write Attribute
000C3B  1  CA               dex
000C3C  1  D0 F7            bne :-
000C3E  1  88               dey
000C3F  1  D0 F2            bne :--
000C41  1               
000C41  1               ; Turn on Layer 0
000C41  1  AD 29 9F         lda $9F29
000C44  1  09 30            ora #%00110000                      ; Bits 4 and 5 are set to 1
000C46  1  8D 29 9F         sta $9F29                           ; So both Later 0 and 1 are turned on
000C49  1               
000C49  1               ; Change Layer 1 to 256 Color Mode
000C49  1  AD 34 9F         lda $9F34
000C4C  1  09 08            ora #%001000                        ; Set bit 3 to 1, rest unchanged
000C4E  1  8D 34 9F         sta $9F34
000C51  1               
000C51  1               ; Clear Layer 1
000C51  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000C54  1  A9 10            lda #$10
000C56  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
000C59  1  9C 21 9F         stz VERA_MID                        ; Set Middle Byte to $00
000C5C  1  9C 20 9F         stz VERA_LOW                        ; Set Low Byte to $00
000C5F  1               
000C5F  1  A9 1E            lda #30
000C61  1  85 02            sta $02                             ; save counter for rows
000C63  1  A0 01            ldy #$01                            ; Color Attribute white on black background
000C65  1  A9 20            lda #$20                            ; Blank character
000C67  1  A2 00            ldx #0
000C69  1  8D 23 9F     :   sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000C6C  1  8C 23 9F         sty VERA_DATA0                      ; Write Attribute
000C6F  1  E8               inx
000C70  1  D0 F7            bne :-
000C72  1  C6 02            dec $02
000C74  1  D0 F3            bne :-
000C76  1               
000C76  1               ; Scale Display x2 for resolution of 320 x 240 pixels
000C76  1               ;    lda #$40
000C76  1               ;    sta $9F2A
000C76  1               ;    sta $9F2B
000C76  1               
000C76  1  60               rts
000C77  1               
000C77  1               printfield2:
000C77  1               ; prep variables for vera med/high bytes
000C77  1               ;    topleft address for first tile is 0x04000
000C77  1  A9 40            lda #$40
000C79  1  8D 73 08         sta vera_byte_mid
000C7C  1  9C 72 08         stz vera_byte_low
000C7F  1               
000C7F  1               ; shift to the right (SCREENWIDTH - fieldwidth) /2 positions *2 to compensate for attribute
000C7F  1  A9 28            lda #SCREENWIDTH
000C81  1  38               sec
000C82  1  ED 70 08         sbc fieldwidth
000C85  1  4A               lsr ; /2
000C86  1  0A               asl ; *2 - so uneven widths result in an even address and we don't end up in parameter space of the TILEMAP
000C87  1  8D 72 08         sta vera_byte_low
000C8A  1               
000C8A  1               ; shift down number of rows (SCREENHEIGHT - fieldheight) /2 positions
000C8A  1  A9 1E            lda #SCREENHEIGHT
000C8C  1  38               sec
000C8D  1  ED 71 08         sbc fieldheight
000C90  1  4A               lsr ; /2
000C91  1  AA               tax ; transfer number of rows down to counter
000C92  1               @loop:
000C92  1  E0 00            cpx #$0 ; any rows down (left)?
000C94  1  F0 16            beq @done ; exit loop when x == 0
000C96  1                   ; go 64 tiles further down - 64 * (1 address + 1 parameter of tile) = 128 / $80
000C96  1  AD 72 08         lda vera_byte_low
000C99  1  18               clc
000C9A  1  69 80            adc #$80    ; add row <<<ADDRESS>>> height for exactly one row down
000C9C  1  8D 72 08         sta vera_byte_low
000C9F  1  90 08            bcc @decrement  ; no need to change the high byte
000CA1  1  AD 73 08         lda vera_byte_mid
000CA4  1  69 00            adc #$0     ; add carry (so +1)
000CA6  1  8D 73 08         sta vera_byte_mid
000CA9  1               @decrement: ; next row
000CA9  1  CA               dex
000CAA  1  80 E6            bra @loop
000CAC  1               @done:
000CAC  1               
000CAC  1               ; prepare the pointers to the back-end field data, so we know what to display
000CAC  1  A5 28            lda ZP_PTR_FIELD
000CAE  1  85 00            sta ZP_PTR_1
000CB0  1  A5 29            lda ZP_PTR_FIELD+1
000CB2  1  85 01            sta ZP_PTR_1+1
000CB4  1               
000CB4  1               ; start displaying the selected field
000CB4  1               ; (vera_byte_mid / vera_byte_low) is the address for the top-left position on-screen in the tile map
000CB4  1  A2 00            ldx #0 ; row counter
000CB6  1               @nextrow:
000CB6  1  A0 00            ldy #0 ; column counter
000CB8  1                   ; prepare vera pointers for this row
000CB8  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000CBB  1  A9 10            lda #$10
000CBD  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
000CC0  1  AD 73 08         lda vera_byte_mid
000CC3  1  8D 21 9F         sta VERA_MID
000CC6  1  AD 72 08         lda vera_byte_low
000CC9  1  8D 20 9F         sta VERA_LOW
000CCC  1               
000CCC  1               @row:
000CCC  1                   ; sweep the field, row by row, indexed by column y
000CCC  1  B1 00            lda (ZP_PTR_1),y
000CCE  1  C9 40            cmp #'@'
000CD0  1  F0 2A            beq @player
000CD2  1  C9 2B            cmp #'+'
000CD4  1  F0 26            beq @player
000CD6  1  C9 24            cmp #'$'
000CD8  1  F0 32            beq @crate
000CDA  1  C9 2E            cmp #'.'
000CDC  1  F0 4E            beq @goal
000CDE  1  C9 2A            cmp #'*'
000CE0  1  F0 3A            beq @crateongoal
000CE2  1  C9 20            cmp #' '
000CE4  1  F0 06            beq @ignore
000CE6  1  C9 00            cmp #0
000CE8  1  F0 02            beq @ignore
000CEA  1  80 50            bra @wall
000CEC  1               @ignore:
000CEC  1                   ; ignore
000CEC  1  A9 00            lda #$0 ; black tile
000CEE  1  8D 23 9F         sta VERA_DATA0
000CF1  1  9C 23 9F         stz VERA_DATA0
000CF4  1  C8               iny
000CF5  1  CC 70 08         cpy fieldwidth
000CF8  1  D0 D2            bne @row
000CFA  1  80 4E            bra @endline
000CFC  1               @player:
000CFC  1  A9 02            lda #$2
000CFE  1  8D 23 9F         sta VERA_DATA0
000D01  1  9C 23 9F         stz VERA_DATA0
000D04  1  C8               iny
000D05  1  CC 70 08         cpy fieldwidth
000D08  1  D0 C2            bne @row
000D0A  1  80 3E            bra @endline
000D0C  1               @crate:
000D0C  1  A9 03            lda #$3
000D0E  1  8D 23 9F         sta VERA_DATA0
000D11  1  9C 23 9F         stz VERA_DATA0
000D14  1  C8               iny
000D15  1  CC 70 08         cpy fieldwidth
000D18  1  D0 B2            bne @row
000D1A  1  80 2E            bra @endline
000D1C  1               @crateongoal:
000D1C  1  A9 05            lda #$5
000D1E  1  8D 23 9F         sta VERA_DATA0
000D21  1  9C 23 9F         stz VERA_DATA0
000D24  1  C8               iny
000D25  1  CC 70 08         cpy fieldwidth
000D28  1  D0 A2            bne @row
000D2A  1  80 1E            bra @endline
000D2C  1               @goal:
000D2C  1  A9 04            lda #$4
000D2E  1  8D 23 9F         sta VERA_DATA0
000D31  1  9C 23 9F         stz VERA_DATA0
000D34  1  C8               iny
000D35  1  CC 70 08         cpy fieldwidth
000D38  1  D0 92            bne @row
000D3A  1  80 0E            bra @endline
000D3C  1               
000D3C  1               @wall:
000D3C  1  A9 01            lda #$1 ; load tile 1 ; brick
000D3E  1  8D 23 9F         sta VERA_DATA0
000D41  1  9C 23 9F         stz VERA_DATA0
000D44  1               
000D44  1  C8               iny
000D45  1  CC 70 08         cpy fieldwidth
000D48  1  D0 82            bne @row
000D4A  1               @endline:
000D4A  1                   ; advance pointer to next row in the field
000D4A  1  A5 00            lda ZP_PTR_1
000D4C  1  18               clc
000D4D  1  6D 70 08         adc fieldwidth
000D50  1  85 00            sta ZP_PTR_1
000D52  1  90 06            bcc @checklastrow ; no carry, don't increment high byte on pointer
000D54  1  A5 01            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
000D56  1  69 00            adc #0
000D58  1  85 01            sta ZP_PTR_1+1
000D5A  1               @checklastrow:
000D5A  1                   ; last row?
000D5A  1                   ; increment vera pointer to next row
000D5A  1  AD 72 08         lda vera_byte_low
000D5D  1  18               clc
000D5E  1  69 80            adc #$80    ; add address delta to next row - 64 tiles * 2 = 128 / $80
000D60  1  8D 72 08         sta vera_byte_low
000D63  1  90 08            bcc @next3  ; no need to change the high byte
000D65  1  AD 73 08         lda vera_byte_mid
000D68  1  69 00            adc #$0     ; add carry (so +1)
000D6A  1  8D 73 08         sta vera_byte_mid
000D6D  1               @next3:
000D6D  1  E8               inx
000D6E  1  EC 71 08         cpx fieldheight
000D71  1  F0 03            beq @nextsection
000D73  1               
000D73  1  4C B6 0C         jmp @nextrow
000D76  1               @nextsection:
000D76  1  60               rts
000D77  1               
000D77  1               printdecimal2:
000D77  1                   ; on entry A = value to print to standard out
000D77  1  A2 FF            ldx #$ff
000D79  1  38               sec
000D7A  1               @prdec100:
000D7A  1  E8               inx
000D7B  1  E9 64            sbc #100
000D7D  1  B0 FB            bcs @prdec100
000D7F  1  69 64            adc #100
000D81  1  20 92 0D         jsr @prdecdigit
000D84  1  A2 FF            ldx #$ff
000D86  1  38               sec
000D87  1               @prdec10:
000D87  1  E8               inx
000D88  1  E9 0A            sbc #10
000D8A  1  B0 FB            bcs @prdec10
000D8C  1  69 0A            adc #10
000D8E  1  20 92 0D         jsr @prdecdigit
000D91  1  AA               tax
000D92  1               @prdecdigit:
000D92  1  48               pha
000D93  1  8A               txa
000D94  1  09 30            ora #'0'
000D96  1  20 D2 FF         jsr CHROUT
000D99  1  68               pla
000D9A  1  60               rts
000D9B  1               
000D9B  1               tiledata:
000D9B  1               black:
000D9B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000D9F  1  00 00 00 00  
000DA3  1  00 00 00 00  
000DAB  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000DAF  1  00 00 00 00  
000DB3  1  00 00 00 00  
000DBB  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000DBF  1  00 00 00 00  
000DC3  1  00 00 00 00  
000DCB  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000DCF  1  00 00 00 00  
000DD3  1  00 00 00 00  
000DDB  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000DDF  1  00 00 00 00  
000DE3  1  00 00 00 00  
000DEB  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000DEF  1  00 00 00 00  
000DF3  1  00 00 00 00  
000DFB  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000DFF  1  00 00 00 00  
000E03  1  00 00 00 00  
000E0B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E0F  1  00 00 00 00  
000E13  1  00 00 00 00  
000E1B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E1F  1  00 00 00 00  
000E23  1  00 00 00 00  
000E2B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E2F  1  00 00 00 00  
000E33  1  00 00 00 00  
000E3B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E3F  1  00 00 00 00  
000E43  1  00 00 00 00  
000E4B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E4F  1  00 00 00 00  
000E53  1  00 00 00 00  
000E5B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E5F  1  00 00 00 00  
000E63  1  00 00 00 00  
000E6B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E6F  1  00 00 00 00  
000E73  1  00 00 00 00  
000E7B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E7F  1  00 00 00 00  
000E83  1  00 00 00 00  
000E8B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E8F  1  00 00 00 00  
000E93  1  00 00 00 00  
000E9B  1               Brick:
000E9B  1  08 08 08 08      .byte 8,8,8,8,8,8,8,229,8,8,8,8,8,8,8,8
000E9F  1  08 08 08 E5  
000EA3  1  08 08 08 08  
000EAB  1  2A 2A 2A 2A      .byte 42,42,42,42,42,42,41,229,8,42,42,42,42,42,42,42
000EAF  1  2A 2A 29 E5  
000EB3  1  08 2A 2A 2A  
000EBB  1  2A 2A 2A 2A      .byte 42,42,42,42,42,42,41,229,8,42,44,42,42,42,42,42
000EBF  1  2A 2A 29 E5  
000EC3  1  08 2A 2C 2A  
000ECB  1  2A 2A 2C 2C      .byte 42,42,44,44,42,42,41,229,8,42,42,42,42,42,42,42
000ECF  1  2A 2A 29 E5  
000ED3  1  08 2A 2A 2A  
000EDB  1  2A 2A 2A 2A      .byte 42,42,42,42,42,42,41,229,8,42,42,42,42,42,42,42
000EDF  1  2A 2A 29 E5  
000EE3  1  08 2A 2A 2A  
000EEB  1  2A 2A 2A 2A      .byte 42,42,42,42,42,42,41,229,8,42,42,42,42,41,41,42
000EEF  1  2A 2A 29 E5  
000EF3  1  08 2A 2A 2A  
000EFB  1  29 29 29 29      .byte 41,41,41,41,41,41,41,229,8,41,41,41,41,41,41,41
000EFF  1  29 29 29 E5  
000F03  1  08 29 29 29  
000F0B  1  E5 E5 E5 E5      .byte 229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229
000F0F  1  E5 E5 E5 E5  
000F13  1  E5 E5 E5 E5  
000F1B  1  E5 08 08 08      .byte 229,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
000F1F  1  08 08 08 08  
000F23  1  08 08 08 08  
000F2B  1  E5 08 08 2A      .byte 229,8,8,42,44,44,42,42,42,42,42,42,42,42,42,41
000F2F  1  2C 2C 2A 2A  
000F33  1  2A 2A 2A 2A  
000F3B  1  E5 08 2A 2A      .byte 229,8,42,42,42,42,42,42,42,42,42,42,42,42,42,41
000F3F  1  2A 2A 2A 2A  
000F43  1  2A 2A 2A 2A  
000F4B  1  E5 08 2A 2A      .byte 229,8,42,42,42,42,41,41,42,42,42,42,42,42,42,41
000F4F  1  2A 2A 29 29  
000F53  1  2A 2A 2A 2A  
000F5B  1  E5 08 2A 2A      .byte 229,8,42,42,42,42,42,42,42,42,42,42,42,41,42,41
000F5F  1  2A 2A 2A 2A  
000F63  1  2A 2A 2A 2A  
000F6B  1  E5 08 2A 2A      .byte 229,8,42,42,42,42,42,42,42,42,42,42,42,42,42,41
000F6F  1  2A 2A 2A 2A  
000F73  1  2A 2A 2A 2A  
000F7B  1  E5 08 29 29      .byte 229,8,41,41,41,41,41,41,41,41,41,41,41,41,41,41
000F7F  1  29 29 29 29  
000F83  1  29 29 29 29  
000F8B  1  E5 E5 E5 E5      .byte 229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229
000F8F  1  E5 E5 E5 E5  
000F93  1  E5 E5 E5 E5  
000F9B  1               player:
000F9B  1  00 00 00 00  .incbin "tiles/player.bin"
000F9F  1  00 10 10 10  
000FA3  1  10 0B 00 00  
00109B  1               crate:
00109B  1  57 57 57 57  .incbin "tiles/crate.bin"
00109F  1  57 57 57 57  
0010A3  1  57 57 57 57  
00119B  1               goal:
00119B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00119F  1  00 00 00 00  
0011A3  1  00 00 00 00  
0011AB  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0011AF  1  00 00 00 00  
0011B3  1  00 00 00 00  
0011BB  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0011BF  1  00 00 00 00  
0011C3  1  00 00 00 00  
0011CB  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0011CF  1  00 00 00 00  
0011D3  1  00 00 00 00  
0011DB  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0011DF  1  00 00 00 00  
0011E3  1  00 00 00 00  
0011EB  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0011EF  1  00 00 00 00  
0011F3  1  00 00 00 00  
0011FB  1  00 00 00 00      .byte 0,0,0,0,0,0,$72,$72,$72,$72,0,0,0,0,0,0
0011FF  1  00 00 72 72  
001203  1  72 72 00 00  
00120B  1  00 00 00 00      .byte 0,0,0,0,0,0,$72,$72,$72,$72,0,0,0,0,0,0
00120F  1  00 00 72 72  
001213  1  72 72 00 00  
00121B  1  00 00 00 00      .byte 0,0,0,0,0,0,$72,$72,$72,$72,0,0,0,0,0,0
00121F  1  00 00 72 72  
001223  1  72 72 00 00  
00122B  1  00 00 00 00      .byte 0,0,0,0,0,0,$72,$72,$72,$72,0,0,0,0,0,0
00122F  1  00 00 72 72  
001233  1  72 72 00 00  
00123B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00123F  1  00 00 00 00  
001243  1  00 00 00 00  
00124B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00124F  1  00 00 00 00  
001253  1  00 00 00 00  
00125B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00125F  1  00 00 00 00  
001263  1  00 00 00 00  
00126B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00126F  1  00 00 00 00  
001273  1  00 00 00 00  
00127B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00127F  1  00 00 00 00  
001283  1  00 00 00 00  
00128B  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00128F  1  00 00 00 00  
001293  1  00 00 00 00  
00129B  1               crateongoal:
00129B  1  65 65 65 65  .incbin "tiles/crateongoal.bin"
00129F  1  65 65 65 65  
0012A3  1  65 65 65 65  
00139B  1               LOADSTART:
00139B  1  32 00 F6 01  .incbin "LEVELS.BIN"
00139F  1  0B 00 0B 00  
0013A3  1  03 00 26 02  
00139B  1               
