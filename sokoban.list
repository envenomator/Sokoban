ca65 V2.19 - Git fcda94f25
Main file   : sokoban.asm
Current file: sokoban.asm

000000r 1               .include "x16.inc"
000000r 2               .ifndef X16_INC
000000r 2               X16_INC  = 1
000000r 2               
000000r 2               .ifndef __CX16__
000000r 2               __CX16__ = 1
000000r 2               .endif
000000r 2               
000000r 2               SD_DEVICE   = 1
000000r 2               HOST_DEVICE = 8
000000r 2               DISK_DEVICE = HOST_DEVICE
000000r 2               
000000r 2               
000000r 2               ; RAM Addresses
000000r 2               
000000r 2               ; Kernal Registers
000000r 2               r0						= $02
000000r 2               r0L					= r0
000000r 2               r0H					= r0+1
000000r 2               r1						= $04
000000r 2               r1L					= r1
000000r 2               r1H					= r1+1
000000r 2               r2						= $06
000000r 2               r2L					= r2
000000r 2               r2H					= r2+1
000000r 2               r3						= $08
000000r 2               r3L					= r3
000000r 2               r3H					= r3+1
000000r 2               r4						= $0A
000000r 2               r4L					= r4
000000r 2               r4H					= r4+1
000000r 2               r5						= $0C
000000r 2               r5L					= r5
000000r 2               r5H					= r5+1
000000r 2               r6						= $0E
000000r 2               r6L					= r6
000000r 2               r6H					= r6+1
000000r 2               r7						= $10
000000r 2               r7L					= r7
000000r 2               r7H					= r7+1
000000r 2               r8						= $12
000000r 2               r8L					= r8
000000r 2               r8H					= r8+1
000000r 2               r9						= $14
000000r 2               r9L					= r9
000000r 2               r9H					= r9+1
000000r 2               r10					= $16
000000r 2               r10L					= r10
000000r 2               r10H					= r10+1
000000r 2               r11					= $18
000000r 2               r11L					= r11
000000r 2               r11H					= r11+1
000000r 2               r12					= $1A
000000r 2               r12L					= r12
000000r 2               r12H					= r12+1
000000r 2               r13					= $1C
000000r 2               r13L					= r13
000000r 2               r13H					= r13+1
000000r 2               r14					= $1E
000000r 2               r14L					= r14
000000r 2               r14H					= r14+1
000000r 2               r15					= $20
000000r 2               r15L					= r15
000000r 2               r15H					= r15+1
000000r 2               
000000r 2               ; Zero-Page userspace
000000r 2               ZP_PTR_1          = $22	; first four pointers for temporary use only
000000r 2               ZP_PTR_2          = $24
000000r 2               ZP_PTR_3          = $26
000000r 2               ZP_PTR_4          = $28
000000r 2               
000000r 2               ; I/O Registers
000000r 2               VERA_addr_low     = $9F20
000000r 2               VERA_addr_high    = $9F21
000000r 2               VERA_addr_bank    = $9F22
000000r 2               VERA_data0        = $9F23
000000r 2               VERA_data1        = $9F24
000000r 2               VERA_ctrl         = $9F25
000000r 2               VERA_ien          = $9F26
000000r 2               VERA_isr          = $9F27
000000r 2               VERA_irqline_l    = $9F28
000000r 2               VERA_dc_video     = $9F29
000000r 2               VERA_dc_hscale    = $9F2A
000000r 2               VERA_dc_vscale    = $9F2B
000000r 2               VERA_dc_border    = $9F2C
000000r 2               VERA_dc_hstart    = $9F29
000000r 2               VERA_dc_hstop     = $9F2A
000000r 2               VERA_dc_vsstart   = $9F2B
000000r 2               VERA_dc_vstop     = $9F2C
000000r 2               VERA_L0_config    = $9F2D
000000r 2               VERA_L0_mapbase   = $9F2E
000000r 2               VERA_L0_tilebase  = $9F2F
000000r 2               VERA_L0_hscroll_l = $9F30
000000r 2               VERA_L0_hscroll_h = $9F31
000000r 2               VERA_L0_vscroll_l = $9F32
000000r 2               VERA_L0_vscroll_h = $9F33
000000r 2               VERA_L1_config    = $9F34
000000r 2               VERA_L1_mapbase   = $9F35
000000r 2               VERA_L1_tilebase  = $9F36
000000r 2               VERA_L1_hscroll_l = $9F37
000000r 2               VERA_L1_hscroll_h = $9F38
000000r 2               VERA_L1_vscroll_l = $9F39
000000r 2               VERA_L1_vscroll_h = $9F3A
000000r 2               VERA_audio_ctrl   = $9F3B
000000r 2               VERA_audio_rate   = $9F3C
000000r 2               VERA_audio_data   = $9F3D
000000r 2               VERA_spi_data     = $9F3E
000000r 2               VERA_spi_ctrl     = $9F3F
000000r 2               
000000r 2               
000000r 2               ROM_BANK          = $9F60
000000r 2               RAM_BANK          = $9F61
000000r 2               
000000r 2               YM_reg            = $9FE0
000000r 2               YM_data           = $9FE1
000000r 2               
000000r 2               ; Emulator Registers
000000r 2               GIF_ctrl          = $9FB5
000000r 2               
000000r 2               ; ROM Banks
000000r 2               KERNAL_ROM_BANK   = 0
000000r 2               BASIC_ROM_BANK    = 4
000000r 2               
000000r 2               ; Banked Addresses
000000r 2               RAM_WIN           = $A000
000000r 2               RAM_WIN_SIZE      = $2000
000000r 2               ROM_WIN           = $C000
000000r 2               
000000r 2               ; Kernal Subroutines
000000r 2               CONSOLE_set_paging_message		:= $FED5
000000r 2               CONSOLE_put_image					:= $FED8
000000r 2               CONSOLE_init						:= $FEDB
000000r 2               CONSOLE_put_char					:= $FEDE
000000r 2               CONSOLE_get_char					:= $FEE1
000000r 2               MEMORY_FILL                   := $FEE4
000000r 2               MEMORY_COPY                   := $FEE7
000000r 2               MEMORY_CRC                    := $FEEA
000000r 2               MEMORY_DECOMPRESS             := $FEED
000000r 2               SPRITE_set_image					:= $FEF0
000000r 2               SPRITE_set_position				:= $FEF3
000000r 2               FB_init                 		:= $FEF6
000000r 2               FB_get_info             		:= $FEF9
000000r 2               FB_set_palette          		:= $FEFC
000000r 2               FB_cursor_position      		:= $FEFF
000000r 2               FB_cursor_next_line     		:= $FF02
000000r 2               FB_get_pixel            		:= $FF05
000000r 2               FB_get_pixels           		:= $FF08
000000r 2               FB_set_pixel            		:= $FF0B
000000r 2               FB_set_pixels           		:= $FF0E
000000r 2               FB_set_8_pixels         		:= $FF11
000000r 2               FB_set_8_pixels_opaque  		:= $FF14
000000r 2               FB_fill_pixels          		:= $FF17
000000r 2               FB_filter_pixels        		:= $FF1A
000000r 2               FB_move_pixels          		:= $FF1D
000000r 2               GRAPH_init							:= $FF20
000000r 2               GRAPH_clear							:= $FF23
000000r 2               GRAPH_set_window					:= $FF26
000000r 2               GRAPH_set_colors					:= $FF29
000000r 2               GRAPH_draw_line					:= $FF2C
000000r 2               GRAPH_draw_rect					:= $FF2F
000000r 2               GRAPH_move_rect					:= $FF32
000000r 2               GRAPH_draw_oval					:= $FF35
000000r 2               GRAPH_draw_image					:= $FF38
000000r 2               GRAPH_set_font						:= $FF3B
000000r 2               GRAPH_get_char_size				:= $FF3E
000000r 2               GRAPH_put_char						:= $FF41
000000r 2               MONITOR								:= $FF44
000000r 2               ENTER_BASIC							:= $FF47
000000r 2               CLOCK_SET_DATE_TIME           := $FF4D
000000r 2               CLOCK_GET_DATE_TIME           := $FF50
000000r 2               JOYSTICK_SCAN                 := $FF53
000000r 2               JOYSTICK_GET                  := $FF56
000000r 2               SCREEN_SET_MODE					:= $FF5F
000000r 2               SCREEN_SET_CHARSET				:= $FF62
000000r 2               
000000r 2               MOUSE_CONFIG                  := $FF68
000000r 2               MOUSE_GET			            := $FF6B
000000r 2               MOUSE_SCAN                    := $FF71
000000r 2               SCINIT                        := $FF81
000000r 2               IOINIT                        := $FF84
000000r 2               RAMTAS                        := $FF87
000000r 2               RESTOR                        := $FF8A
000000r 2               SETLFS                        := $FFBA
000000r 2               SETNAM                        := $FFBD
000000r 2               OPEN                          := $FFC0
000000r 2               CLOSE                         := $FFC3
000000r 2               CHKIN                         := $FFC6
000000r 2               CHKOUT                        := $FFC9
000000r 2               CLRCHN                        := $FFCC
000000r 2               CHRIN                         := $FFCF
000000r 2               CHROUT                        := $FFD2
000000r 2               LOAD                          := $FFD5
000000r 2               SAVE                          := $FFD8
000000r 2               SETTIM                        := $FFDB
000000r 2               RDTIM                         := $FFDE
000000r 2               STOP                          := $FFE1
000000r 2               GETIN                         := $FFE4
000000r 2               CLALL									:= $FFE7
000000r 2               UDTIM									:= $FFEA
000000r 2               SCREEN								:= $FFED
000000r 2               PLOT									:= $FFF0
000000r 2               IOBASE								:= $FFF3
000000r 2               
000000r 2               ; BASIC Vectors
000000r 2               BASIC_PANIC       := $C000
000000r 2               BASIC_INIT        := $C003
000000r 2               
000000r 2               
000000r 2               ; VRAM Addresses
000000r 2               VRAM_petscii   = $0F000
000000r 2               VRAM_psg       = $1F9C0
000000r 2               VRAM_palette   = $1FA00
000000r 2               VRAM_sprattr   = $1FC00
000000r 2               
000000r 2               ; IRQs
000000r 2               IRQVec         := $0314
000000r 2               BRKVec         := $0316
000000r 2               NMIVec         := $0318
000000r 2               
000000r 2               ;   Macros
000000r 2               
000000r 2               .macro VERA_SET_ADDR addr, stride
000000r 2               	.ifnblank stride
000000r 2                     .if stride < 0
000000r 2                        lda #((^addr) | $08 | ((0-stride) << 4))
000000r 2                     .else
000000r 2                        lda #((^addr) | (stride << 4))
000000r 2                     .endif
000000r 2               	.else
000000r 2               		lda #(^addr) | $10
000000r 2               	.endif
000000r 2               
000000r 2               	sta VERA_addr_bank
000000r 2               	lda #(>addr)
000000r 2               	sta VERA_addr_high
000000r 2               	lda #(<addr)
000000r 2               	sta VERA_addr_low
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .endif
000000r 2               
000000r 1               
000000r 1               ; constants
000000r 1               NEWLINE = $0D
000000r 1               UPPERCASE = $8E
000000r 1               CLEARSCREEN = 147
000000r 1               LEVELHEADER = 12
000000r 1               MAXUNDO = 10
000000r 1               SCREENWIDTH = 40        ; screen width/height in 16x16 tiles
000000r 1               SCREENHEIGHT = 30
000000r 1               RAMBANK = $a000         ; Ram Bank 0
000000r 1               
000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1               ; VERA Registers
00080D  1               VERA_LOW            = $9F20
00080D  1               VERA_MID            = $9F21
00080D  1               VERA_HIGH           = $9F22
00080D  1               VERA_DATA0          = $9F23
00080D  1               VERA_CTRL           = $9F25
00080D  1               
00080D  1  4C 42 09        jmp start
000810  1               
000810  1               ; string constants
000810  1  52 45 41 4C  quitaskmessage:      .byte "really quit? y/n",0
000814  1  4C 59 20 51  
000818  1  55 49 54 3F  
000821  1  53 45 4C 45  selectmessage:    .byte "select a level (1-",0
000825  1  43 54 20 41  
000829  1  20 4C 45 56  
000834  1  29 3A 20 00  selectendmessage: .byte "): ",0
000838  1  20 20 20 20  clear:            .byte "                                        ",0
00083C  1  20 20 20 20  
000840  1  20 20 20 20  
000861  1  52 45 41 4C  resetmessage:     .byte "really reset level? y/n",0
000865  1  4C 59 20 52  
000869  1  45 53 45 54  
000879  1  50 52 45 53  quitmessage:      .byte "press q to quit",0
00087D  1  53 20 51 20  
000881  1  54 4F 20 51  
000889  1  4C 45 56 45  winstatement:     .byte "level complete! new level? y/n",0
00088D  1  4C 20 43 4F  
000891  1  4D 50 4C 45  
0008A8  1  28 43 29 32  help0:            .byte "(c)2021 venom",0
0008AC  1  30 32 31 20  
0008B0  1  56 45 4E 4F  
0008B6  1  4B 45 59 42  help1:            .byte "keyboard shortcuts:",0
0008BA  1  4F 41 52 44  
0008BE  1  20 53 48 4F  
0008CA  1  43 55 52 53  help2:            .byte "cursor - moves player",0
0008CE  1  4F 52 20 2D  
0008D2  1  20 4D 4F 56  
0008E0  1  20 20 20 20  help3:            .byte "     q - quit",0
0008E4  1  20 51 20 2D  
0008E8  1  20 51 55 49  
0008EE  1  20 20 20 20  help4:            .byte "     u - undo move(s)",0
0008F2  1  20 55 20 2D  
0008F6  1  20 55 4E 44  
000904  1  20 20 20 20  help5:            .byte "     r - reset level",0
000908  1  20 52 20 2D  
00090C  1  20 52 45 53  
000919  1  4D 28 45 4E  done0:            .byte "m(enu)",0
00091D  1  55 29 00     
000920  1  4E 28 45 58  done1:            .byte "n(ext)",0
000924  1  54 29 00     
000927  1  51 28 55 49  done2:            .byte "q(uit)",0
00092B  1  54 29 00     
00092E  1               
00092E  1               ; variables that the program uses during execution
00092E  1  00           currentlevel:   .byte 0 ; will need to be filled somewhere in the future in the GUI, or asked from the user
00092F  1  00           no_levels:      .byte 0 ; will be read by initfield
000930  1  00           no_goals:       .byte 0 ; will be read by initfield, depending on the currentlevel
000931  1  00           no_goalsreached:.byte 0 ; static now, reset for each game
000932  1  00           fieldwidth:     .byte 0 ; will be read by initfield, depending on the currentlevel
000933  1  00           fieldheight:    .byte 0 ; will be read by initfield, depending on the currentlevel
000934  1  00           vera_byte_low:  .byte 0
000935  1  00           vera_byte_mid:  .byte 0
000936  1  00 00 00 00  undostack:      .byte 0,0,0,0,0,0,0,0,0,0
00093A  1  00 00 00 00  
00093E  1  00 00        
000940  1  00           undoindex:      .byte 0
000941  1  00           undocounter:    .byte 0
000942  1               
000942  1               ; usage of zeropage address space:
000942  1               ; ZP_PTR_1 - temporary pointer
000942  1               ; ZP_PTR_2 - temporary pointer
000942  1               ; ZP_PTR_3 - position of player
000942  1               ZP_PTR_FIELD = $2A
000942  1               temp = $30  ; used for temp 8/16 bit storage $30/$31
000942  1               ZP_PTR_UNDO = $32 ; used to point to the 'undo stack'
000942  1               vera_textbase = $34;  RAM base for VERA text mode
000942  1               vera_highbit  = $36;  RAM base bit 16
000942  1               
000942  1               start:
000942  1                   ; First read VERA screen RAM in text mode
000942  1  AD 35 9F         lda $9F35;
000945  1  29 7F            and #%01111111      ; clear out high bit, which is address bit 16
000947  1  0A               asl                 ; shift result one bit up
000948  1  85 34            sta vera_textbase   ; store as the offset. r38 = 0, r39 = B0
00094A  1                                       ; add this offset to vertical line offset in code
00094A  1  AD 35 9F         lda $9F35
00094D  1  30 04            bmi @highbit        ; high bit set
00094F  1  64 36            stz vera_highbit
000951  1  80 04            bra @veraoffsetdone
000953  1               @highbit:
000953  1  A9 01            lda #1              ; high bit set
000955  1  85 36            sta vera_highbit
000957  1               @veraoffsetdone:
000957  1                   ; force uppercase
000957  1  A9 8E            lda #UPPERCASE
000959  1  20 D2 FF         jsr CHROUT
00095C  1               
00095C  1  20 E7 0F         jsr loadtiles       ; load tiles from normal memory to VRAM
00095F  1  20 97 11         jsr layerconfig     ; configure layer 0/1 on screen
000962  1               
000962  1  20 E1 0F         jsr cls
000965  1               
000965  1  20 65 0E         jsr resetvars
000968  1  20 66 11         jsr cleartiles
00096B  1               
00096B  1  20 BD 10         jsr displaytitlescreen
00096E  1               
00096E  1  20 E3 0D         jsr selectlevel
000971  1  90 04            bcc @continue
000973  1  20 8B 11         jsr resetlayerconfig
000976  1  60               rts                 ; pressed 'q'
000977  1               @continue:
000977  1  20 66 11         jsr cleartiles      ; cls tiles
00097A  1               
00097A  1  20 AE 0E         jsr initfield       ; load correct startup values for selected field
00097D  1  20 DF 11         jsr printfield2
000980  1               
000980  1               keyloop:
000980  1  20 E4 FF         jsr GETIN
000983  1               @checkdown:
000983  1  C9 11            cmp #$11
000985  1  D0 05            bne @checkup
000987  1  20 0D 0C         jsr handledown
00098A  1  80 61            bra @done
00098C  1               @checkup:
00098C  1  C9 91            cmp #$91
00098E  1  D0 05            bne @checkleft
000990  1  20 A7 0B         jsr handleup
000993  1  80 58            bra @done
000995  1               @checkleft:
000995  1  C9 9D            cmp #$9d
000997  1  D0 05            bne @checkright
000999  1  20 4E 0B         jsr handleleft
00099C  1  80 4F            bra @done
00099E  1               @checkright:
00099E  1  C9 1D            cmp #$1d
0009A0  1  D0 05            bne @checkundo
0009A2  1  20 F5 0A         jsr handleright
0009A5  1  80 46            bra @done
0009A7  1               @checkundo:
0009A7  1  C9 55            cmp #$55 ; 'u'
0009A9  1  D0 05            bne @checkreset
0009AB  1  20 24 0A         jsr handle_undocommand
0009AE  1  80 3D            bra @done
0009B0  1               @checkreset:
0009B0  1  C9 52            cmp #$52 ; 'r'
0009B2  1  D0 21            bne @checkquit
0009B4  1  20 DB 0A         jsr askreset
0009B7  1  B0 0B            bcs @resetgame
0009B9  1  20 E1 0F         jsr cls
0009BC  1  20 66 11         jsr cleartiles
0009BF  1  20 DF 11         jsr printfield2
0009C2  1  80 29            bra @done
0009C4  1               @resetgame:
0009C4  1  20 E1 0F         jsr cls
0009C7  1  20 66 11         jsr cleartiles
0009CA  1  20 65 0E         jsr resetvars
0009CD  1  20 AE 0E         jsr initfield
0009D0  1  20 DF 11         jsr printfield2
0009D3  1  80 AB            bra keyloop
0009D5  1               @checkquit:
0009D5  1  C9 51            cmp #$51 ; 'q'
0009D7  1  D0 14            bne @done
0009D9  1  20 C1 0A         jsr askquit
0009DC  1  B0 0B            bcs @exit
0009DE  1  20 E1 0F         jsr cls
0009E1  1  20 66 11         jsr cleartiles
0009E4  1  20 DF 11         jsr printfield2
0009E7  1  80 04            bra @done
0009E9  1               @exit:
0009E9  1  20 8B 11         jsr resetlayerconfig
0009EC  1  60               rts
0009ED  1               @done:
0009ED  1                   ; check if we have reached all goals
0009ED  1  AD 30 09         lda no_goals
0009F0  1  CD 31 09         cmp no_goalsreached
0009F3  1  D0 2C            bne @donenextkey
0009F5  1  20 4C 0A         jsr asknewlevel
0009F8  1  C9 4D            cmp #$4d ; Menu
0009FA  1  F0 08            beq @gotomenu   ; reset game / let user decide on new level
0009FC  1  C9 51            cmp #$51 ; Quit
0009FE  1  D0 07            bne @nextgame
000A00  1  20 8B 11         jsr resetlayerconfig
000A03  1  60               rts
000A04  1               @gotomenu:
000A04  1  4C 42 09         jmp start
000A07  1               @nextgame:
000A07  1                   ; check if this was the last level
000A07  1  AD 2F 09         lda no_levels
000A0A  1  CD 2E 09         cmp currentlevel
000A0D  1  F0 F5            beq @gotomenu   ; select another game
000A0F  1  EE 2E 09         inc currentlevel ; next level
000A12  1  20 E1 0F         jsr cls
000A15  1  20 65 0E         jsr resetvars
000A18  1  20 66 11         jsr cleartiles
000A1B  1               
000A1B  1  20 AE 0E         jsr initfield       ; load correct startup values for selected field
000A1E  1  20 DF 11         jsr printfield2
000A21  1               
000A21  1               @donenextkey:
000A21  1  4C 80 09         jmp keyloop
000A24  1               
000A24  1               handle_undocommand:
000A24  1  20 DE 0C         jsr pull_undostack
000A27  1                   ; x now contains previous move
000A27  1                   ;   as #%000MUDRL - Multiple move / Up / Down / Right / Left
000A27  1                   ; we will give x to the handle_undo_**** routine, so it can see the combined bit (4) and act on it
000A27  1               @checkup:
000A27  1  8A               txa
000A28  1  29 08            and #%00001000
000A2A  1  F0 04            beq @checkdown
000A2C  1  20 D2 0B         jsr handle_undo_up
000A2F  1  60               rts
000A30  1               @checkdown:
000A30  1  8A               txa
000A31  1  29 04            and #%00000100
000A33  1  F0 04            beq @checkright
000A35  1  20 38 0C         jsr handle_undo_down
000A38  1  60               rts
000A39  1               @checkright:
000A39  1  8A               txa
000A3A  1  29 02            and #%00000010
000A3C  1  F0 04            beq @checkleft
000A3E  1  20 15 0B         jsr handle_undo_right
000A41  1  60               rts
000A42  1               @checkleft:
000A42  1  8A               txa
000A43  1  29 01            and #%00000001
000A45  1  F0 04            beq @emptystack
000A47  1  20 6E 0B         jsr handle_undo_left
000A4A  1  60               rts
000A4B  1               @emptystack:
000A4B  1                   ; do nothing
000A4B  1  60               rts
000A4C  1               
000A4C  1               asknewlevel:
000A4C  1                   ; display level complete tilesetj
000A4C  1  20 E1 0F         jsr cls
000A4F  1  A9 DF            lda #<completescreen
000A51  1  85 22            sta ZP_PTR_1
000A53  1  A9 32            lda #>completescreen
000A55  1  85 23            sta ZP_PTR_1+1
000A57  1  20 87 10         jsr displaytileset
000A5A  1               
000A5A  1  9C 25 9F         stz VERA_CTRL
000A5D  1  A2 09            ldx #$9 ; color brown
000A5F  1  A9 10            lda #$10
000A61  1  18               clc
000A62  1  65 36            adc vera_highbit
000A64  1  8D 22 9F         sta VERA_HIGH
000A67  1               
000A67  1  A9 19            lda #<done0
000A69  1  85 22            sta ZP_PTR_1
000A6B  1  A9 09            lda #>done0
000A6D  1  85 23            sta ZP_PTR_1+1
000A6F  1  A9 25            lda #37 ; line 37
000A71  1  18               clc
000A72  1  65 34            adc vera_textbase
000A74  1  8D 21 9F         sta VERA_MID
000A77  1  A9 4C            lda #38*2
000A79  1  8D 20 9F         sta VERA_LOW
000A7C  1  20 6F 10         jsr printverastring
000A7F  1               
000A7F  1  A9 20            lda #<done1
000A81  1  85 22            sta ZP_PTR_1
000A83  1  A9 09            lda #>done1
000A85  1  85 23            sta ZP_PTR_1+1
000A87  1  A9 29            lda #41     ; line 41
000A89  1  18               clc
000A8A  1  65 34            adc vera_textbase
000A8C  1  8D 21 9F         sta VERA_MID
000A8F  1  A9 4C            lda #38*2
000A91  1  8D 20 9F         sta VERA_LOW
000A94  1  20 6F 10         jsr printverastring
000A97  1               
000A97  1  A9 27            lda #<done2
000A99  1  85 22            sta ZP_PTR_1
000A9B  1  A9 09            lda #>done2
000A9D  1  85 23            sta ZP_PTR_1+1
000A9F  1  A9 2D            lda #45     ; line 45
000AA1  1  18               clc
000AA2  1  65 34            adc vera_textbase
000AA4  1  8D 21 9F         sta VERA_MID
000AA7  1  A9 4C            lda #38*2
000AA9  1  8D 20 9F         sta VERA_LOW
000AAC  1  20 6F 10         jsr printverastring
000AAF  1               
000AAF  1               @keyloop:
000AAF  1  20 E4 FF         jsr GETIN
000AB2  1               @checkmenu:
000AB2  1  C9 4D            cmp #$4D ; M (enu)
000AB4  1  D0 01            bne @checknext
000AB6  1  60               rts
000AB7  1               @checknext:
000AB7  1  C9 4E            cmp #$4E ; N (ext)
000AB9  1  D0 01            bne @checkquit
000ABB  1  60               rts
000ABC  1               @checkquit:
000ABC  1  C9 51            cmp #$51 ; Q (uit)
000ABE  1  D0 EF            bne @keyloop
000AC0  1  60               rts
000AC1  1               
000AC1  1               askquit:
000AC1  1                   ; ask if the user would like to quit, and return carry on 'y'
000AC1  1  A9 10            lda #<quitaskmessage
000AC3  1  85 22            sta ZP_PTR_1
000AC5  1  A9 08            lda #>quitaskmessage
000AC7  1  85 23            sta ZP_PTR_1+1
000AC9  1  20 3A 10         jsr displaymessagescreen
000ACC  1               
000ACC  1               @keyloop:
000ACC  1  20 E4 FF         jsr GETIN
000ACF  1               @checkyes:
000ACF  1  C9 59            cmp #$59 ; Y
000AD1  1  D0 02            bne @checkno
000AD3  1  38               sec
000AD4  1  60               rts
000AD5  1               @checkno:
000AD5  1  C9 4E            cmp #$4e ; N
000AD7  1  D0 F3            bne @keyloop
000AD9  1  18               clc
000ADA  1  60               rts
000ADB  1               
000ADB  1               askreset:
000ADB  1                   ; ask if the user would like to reset, and return carry on 'y'
000ADB  1  A9 61            lda #<resetmessage
000ADD  1  85 22            sta ZP_PTR_1
000ADF  1  A9 08            lda #>resetmessage
000AE1  1  85 23            sta ZP_PTR_1+1
000AE3  1  20 3A 10         jsr displaymessagescreen
000AE6  1               
000AE6  1               @keyloop:
000AE6  1  20 E4 FF         jsr GETIN
000AE9  1               @checkyes:
000AE9  1  C9 59            cmp #$59 ; Y
000AEB  1  D0 02            bne @checkno
000AED  1  38               sec
000AEE  1  60               rts
000AEF  1               @checkno:
000AEF  1  C9 4E            cmp #$4e ; N
000AF1  1  D0 F3            bne @keyloop
000AF3  1  18               clc
000AF4  1  60               rts
000AF5  1               
000AF5  1               handleright:
000AF5  1                   ; pointers
000AF5  1                   ; 3 - player
000AF5  1                   ; 2 - block to the right of the player
000AF5  1                   ; 1 - block to the right of that block
000AF5  1               
000AF5  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1x position
000AF5  1  18               clc
000AF6  1  A5 26            lda ZP_PTR_3
000AF8  1  69 01            adc #$1               ; 1x position
000AFA  1  85 24            sta ZP_PTR_2
000AFC  1  A5 27            lda ZP_PTR_3+1
000AFE  1  69 00            adc #$0
000B00  1  85 25            sta ZP_PTR_2+1
000B02  1               
000B02  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2x position
000B02  1  18               clc
000B03  1  A5 26            lda ZP_PTR_3
000B05  1  69 02            adc #$2               ; 2x position
000B07  1  85 22            sta ZP_PTR_1
000B09  1  A5 27            lda ZP_PTR_3+1
000B0B  1  69 00            adc #$0
000B0D  1  85 23            sta ZP_PTR_1+1
000B0F  1               
000B0F  1  A2 02            ldx #%00000010 ; right direction
000B11  1  20 73 0C         jsr handlemove
000B14  1  60               rts
000B15  1               
000B15  1               handle_undo_right:
000B15  1                   ; 3 - player
000B15  1               
000B15  1  DA               phx ; store x to stack
000B16  1                   ; point 1 to player
000B16  1               
000B16  1  A5 26            lda ZP_PTR_3
000B18  1  85 22            sta ZP_PTR_1
000B1A  1  A5 27            lda ZP_PTR_3+1
000B1C  1  85 23            sta ZP_PTR_1+1
000B1E  1               
000B1E  1                   ; pointer 2 will point to the left of the player
000B1E  1                   ; so the player will move back to the left
000B1E  1  38               sec
000B1F  1  A5 26            lda ZP_PTR_3
000B21  1  E9 01            sbc #$1
000B23  1  85 24            sta ZP_PTR_2
000B25  1  A5 27            lda ZP_PTR_3+1
000B27  1  E9 00            sbc #$0
000B29  1  85 25            sta ZP_PTR_2+1
000B2B  1               
000B2B  1  20 46 0D         jsr moveplayeronfield
000B2E  1  20 FC 0C         jsr moveplayerposition
000B31  1               
000B31  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000B31  1  FA               plx
000B32  1  8A               txa
000B33  1  29 10            and #%00010000 ; was a crate moved in this move?
000B35  1  F0 10            beq @done
000B37  1               
000B37  1                   ; load pointer 2 to the right of the previous player's position
000B37  1  18               clc
000B38  1  A5 22            lda ZP_PTR_1
000B3A  1  69 01            adc #$1
000B3C  1  85 24            sta ZP_PTR_2
000B3E  1  A5 23            lda ZP_PTR_1+1
000B40  1  69 00            adc #$0
000B42  1  85 25            sta ZP_PTR_2+1
000B44  1               
000B44  1  20 05 0D         jsr movecrateonfield
000B47  1               @done:
000B47  1  20 E1 0F         jsr cls
000B4A  1  20 DF 11         jsr printfield2
000B4D  1  60               rts
000B4E  1               
000B4E  1               handleleft:
000B4E  1                   ; pointers
000B4E  1                   ; 3 - player
000B4E  1                   ; 2 - block to the left of the player
000B4E  1                   ; 1 - block to the left of that block
000B4E  1               
000B4E  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1x position
000B4E  1  38               sec
000B4F  1  A5 26            lda ZP_PTR_3
000B51  1  E9 01            sbc #$1               ; 1x position
000B53  1  85 24            sta ZP_PTR_2
000B55  1  A5 27            lda ZP_PTR_3+1
000B57  1  E9 00            sbc #$0
000B59  1  85 25            sta ZP_PTR_2+1
000B5B  1               
000B5B  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2x position
000B5B  1  38               sec
000B5C  1  A5 26            lda ZP_PTR_3
000B5E  1  E9 02            sbc #$2               ; 2x position
000B60  1  85 22            sta ZP_PTR_1
000B62  1  A5 27            lda ZP_PTR_3+1
000B64  1  E9 00            sbc #$0
000B66  1  85 23            sta ZP_PTR_1+1
000B68  1               
000B68  1  A2 01            ldx #%00000001 ; left direction
000B6A  1  20 73 0C         jsr handlemove
000B6D  1               
000B6D  1               @done:
000B6D  1  60               rts
000B6E  1               
000B6E  1               handle_undo_left:
000B6E  1                   ; 3 - player
000B6E  1               
000B6E  1  DA               phx ; store x to stack
000B6F  1               
000B6F  1                   ; point 1 to player
000B6F  1  A5 26            lda ZP_PTR_3
000B71  1  85 22            sta ZP_PTR_1
000B73  1  A5 27            lda ZP_PTR_3+1
000B75  1  85 23            sta ZP_PTR_1+1
000B77  1               
000B77  1                   ; pointer 2 will point to the right of the player
000B77  1                   ; so the player will move back to the right
000B77  1  18               clc
000B78  1  A5 26            lda ZP_PTR_3
000B7A  1  69 01            adc #$1
000B7C  1  85 24            sta ZP_PTR_2
000B7E  1  A5 27            lda ZP_PTR_3+1
000B80  1  69 00            adc #$0
000B82  1  85 25            sta ZP_PTR_2+1
000B84  1               
000B84  1  20 46 0D         jsr moveplayeronfield
000B87  1  20 FC 0C         jsr moveplayerposition
000B8A  1               
000B8A  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000B8A  1  FA               plx
000B8B  1  8A               txa
000B8C  1  29 10            and #%00010000 ; was a crate moved in this move?
000B8E  1  F0 10            beq @done
000B90  1               
000B90  1                   ; load pointer 2 to the left of the previous player's position
000B90  1  38               sec
000B91  1  A5 22            lda ZP_PTR_1
000B93  1  E9 01            sbc #$1
000B95  1  85 24            sta ZP_PTR_2
000B97  1  A5 23            lda ZP_PTR_1+1
000B99  1  E9 00            sbc #$0
000B9B  1  85 25            sta ZP_PTR_2+1
000B9D  1               
000B9D  1  20 05 0D         jsr movecrateonfield
000BA0  1               @done:
000BA0  1  20 E1 0F         jsr cls
000BA3  1  20 DF 11         jsr printfield2
000BA6  1  60               rts
000BA7  1               
000BA7  1               handleup:
000BA7  1                   ; pointers
000BA7  1                   ; 3 - player
000BA7  1                   ; 2 - block to the top of the player
000BA7  1                   ; 1 - block to the top of that block
000BA7  1               
000BA7  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1xFIELDWIDTH
000BA7  1  AD 32 09         lda fieldwidth
000BAA  1  85 30            sta temp
000BAC  1  38               sec
000BAD  1  A5 26            lda ZP_PTR_3
000BAF  1  E5 30            sbc temp
000BB1  1  85 24            sta ZP_PTR_2
000BB3  1  A5 27            lda ZP_PTR_3+1
000BB5  1  E9 00            sbc #$0
000BB7  1  85 25            sta ZP_PTR_2+1
000BB9  1               
000BB9  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2xFIELDWIDTH
000BB9  1  AD 32 09         lda fieldwidth
000BBC  1  0A               asl ; 2x
000BBD  1  85 30            sta temp
000BBF  1  38               sec
000BC0  1  A5 26            lda ZP_PTR_3
000BC2  1  E5 30            sbc temp
000BC4  1  85 22            sta ZP_PTR_1
000BC6  1  A5 27            lda ZP_PTR_3+1
000BC8  1  E9 00            sbc #$0
000BCA  1  85 23            sta ZP_PTR_1+1
000BCC  1               
000BCC  1  A2 08            ldx #%00001000 ; up direction
000BCE  1  20 73 0C         jsr handlemove
000BD1  1               
000BD1  1  60               rts
000BD2  1               
000BD2  1               handle_undo_up:
000BD2  1                   ; 3 - player
000BD2  1               
000BD2  1  DA               phx ; store x to stack
000BD3  1               
000BD3  1                   ; point 1 to player
000BD3  1  A5 26            lda ZP_PTR_3
000BD5  1  85 22            sta ZP_PTR_1
000BD7  1  A5 27            lda ZP_PTR_3+1
000BD9  1  85 23            sta ZP_PTR_1+1
000BDB  1               
000BDB  1                   ; pointer 2 will point to the position down of the player
000BDB  1                   ; so the player will move back down
000BDB  1  18               clc
000BDC  1  A5 26            lda ZP_PTR_3
000BDE  1  6D 32 09         adc fieldwidth
000BE1  1  85 24            sta ZP_PTR_2
000BE3  1  A5 27            lda ZP_PTR_3+1
000BE5  1  69 00            adc #$0
000BE7  1  85 25            sta ZP_PTR_2+1
000BE9  1               
000BE9  1  20 46 0D         jsr moveplayeronfield
000BEC  1  20 FC 0C         jsr moveplayerposition
000BEF  1               
000BEF  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000BEF  1  FA               plx
000BF0  1  8A               txa
000BF1  1  29 10            and #%00010000 ; was a crate moved in this move?
000BF3  1  F0 11            beq @done
000BF5  1               
000BF5  1                   ; load pointer 2 to the top of the previous player's position
000BF5  1  38               sec
000BF6  1  A5 22            lda ZP_PTR_1
000BF8  1  ED 32 09         sbc fieldwidth
000BFB  1  85 24            sta ZP_PTR_2
000BFD  1  A5 23            lda ZP_PTR_1+1
000BFF  1  E9 00            sbc #$0
000C01  1  85 25            sta ZP_PTR_2+1
000C03  1               
000C03  1  20 05 0D         jsr movecrateonfield
000C06  1               @done:
000C06  1  20 E1 0F         jsr cls
000C09  1  20 DF 11         jsr printfield2
000C0C  1  60               rts
000C0D  1               
000C0D  1               handledown:
000C0D  1                   ; pointers
000C0D  1                   ; 3 - player
000C0D  1                   ; 2 - block to the bottom of the player
000C0D  1                   ; 1 - block to the bottom of that block
000C0D  1               
000C0D  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1xFIELDWIDTH
000C0D  1  AD 32 09         lda fieldwidth
000C10  1  85 30            sta temp
000C12  1  18               clc
000C13  1  A5 26            lda ZP_PTR_3
000C15  1  65 30            adc temp
000C17  1  85 24            sta ZP_PTR_2
000C19  1  A5 27            lda ZP_PTR_3+1
000C1B  1  69 00            adc #$0
000C1D  1  85 25            sta ZP_PTR_2+1
000C1F  1               
000C1F  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2xFIELDWIDTH
000C1F  1  AD 32 09         lda fieldwidth
000C22  1  0A               asl ; 2x
000C23  1  85 30            sta temp
000C25  1  18               clc
000C26  1  A5 26            lda ZP_PTR_3
000C28  1  65 30            adc temp
000C2A  1  85 22            sta ZP_PTR_1
000C2C  1  A5 27            lda ZP_PTR_3+1
000C2E  1  69 00            adc #$0
000C30  1  85 23            sta ZP_PTR_1+1
000C32  1               
000C32  1  A2 04            ldx #%00000100 ; down direction
000C34  1  20 73 0C         jsr handlemove
000C37  1               
000C37  1  60               rts
000C38  1               
000C38  1               handle_undo_down:
000C38  1                   ; 3 - player
000C38  1               
000C38  1  DA               phx ; store x to stack
000C39  1               
000C39  1                   ; point 1 to player
000C39  1  A5 26            lda ZP_PTR_3
000C3B  1  85 22            sta ZP_PTR_1
000C3D  1  A5 27            lda ZP_PTR_3+1
000C3F  1  85 23            sta ZP_PTR_1+1
000C41  1               
000C41  1                   ; pointer 2 will point to the position up of the player
000C41  1                   ; so the player will move back up
000C41  1  38               sec
000C42  1  A5 26            lda ZP_PTR_3
000C44  1  ED 32 09         sbc fieldwidth
000C47  1  85 24            sta ZP_PTR_2
000C49  1  A5 27            lda ZP_PTR_3+1
000C4B  1  E9 00            sbc #$0
000C4D  1  85 25            sta ZP_PTR_2+1
000C4F  1               
000C4F  1  20 46 0D         jsr moveplayeronfield
000C52  1  20 FC 0C         jsr moveplayerposition
000C55  1               
000C55  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000C55  1  FA               plx
000C56  1  8A               txa
000C57  1  29 10            and #%00010000 ; was a crate moved in this move?
000C59  1  F0 11            beq @done
000C5B  1               
000C5B  1                   ; load pointer 2 to the bottom of the previous player's position
000C5B  1  18               clc
000C5C  1  A5 22            lda ZP_PTR_1
000C5E  1  6D 32 09         adc fieldwidth
000C61  1  85 24            sta ZP_PTR_2
000C63  1  A5 23            lda ZP_PTR_1+1
000C65  1  69 00            adc #$0
000C67  1  85 25            sta ZP_PTR_2+1
000C69  1               
000C69  1  20 05 0D         jsr movecrateonfield
000C6C  1               @done:
000C6C  1  20 E1 0F         jsr cls
000C6F  1  20 DF 11         jsr printfield2
000C72  1  60               rts
000C73  1               
000C73  1               handlemove:
000C73  1                   ; pointers
000C73  1                   ; 3 - points to the player position
000C73  1                   ; 2 - points to the next block at the indicated direction
000C73  1                   ; 1 - points to the block after that block
000C73  1               
000C73  1  DA               phx ; push x to stack with stored direction
000C74  1               
000C74  1  A0 00            ldy #0
000C76  1  B1 24            lda (ZP_PTR_2),y
000C78  1  C9 20            cmp #' ' ; empty block next to player?
000C7A  1  F0 06            beq @moveplayertopoint2
000C7C  1  C9 2E            cmp #'.' ; goal position next to player?
000C7E  1  F0 02            beq @moveplayertopoint2
000C80  1  80 0C            bra @next ; no ' ' or '.' found next to player, is it a crate or a wall?
000C82  1               @moveplayertopoint2:
000C82  1                   ; move player to pointer 2
000C82  1  20 46 0D         jsr moveplayeronfield
000C85  1  20 FC 0C         jsr moveplayerposition
000C88  1               
000C88  1  FA               plx ; pull direction from the stack
000C89  1  20 C1 0C         jsr push_undostack
000C8C  1  80 2A            bra @movecomplete
000C8E  1               @next:
000C8E  1  A0 00            ldy #0
000C90  1  B1 24            lda (ZP_PTR_2),y
000C92  1  C9 24            cmp #'$' ; crate next to player?
000C94  1  F0 06            beq @combinedmovecheck
000C96  1  C9 2A            cmp #'*' ; crate on goal next to player?
000C98  1  F0 02            beq @combinedmovecheck
000C9A  1  80 23            bra @ignore ; something else not able to push
000C9C  1               @combinedmovecheck:
000C9C  1  B1 22            lda (ZP_PTR_1),y
000C9E  1  C9 20            cmp #' ' ; space after crate?
000CA0  1  F0 06            beq @combinedmove
000CA2  1  C9 2E            cmp #'.' ; goal after crate?
000CA4  1  F0 02            beq @combinedmove
000CA6  1  80 17            bra @ignore ; nothing to move
000CA8  1               @combinedmove:
000CA8  1  20 05 0D         jsr movecrateonfield
000CAB  1  20 46 0D         jsr moveplayeronfield
000CAE  1  20 FC 0C         jsr moveplayerposition
000CB1  1               
000CB1  1                   ; record combined move to undo stack
000CB1  1  68               pla
000CB2  1  09 10            ora #%00010000   ; set 'combined' bit 4
000CB4  1  AA               tax
000CB5  1  20 C1 0C         jsr push_undostack
000CB8  1               
000CB8  1               @movecomplete:
000CB8  1  20 DF 11         jsr printfield2
000CBB  1  20 E1 0F         jsr cls
000CBE  1  60               rts
000CBF  1               
000CBF  1               @ignore: ; nothing to move
000CBF  1  FA               plx  ; don't forget to remove the stacked x move
000CC0  1  60               rts
000CC1  1               
000CC1  1               push_undostack:
000CC1  1                   ; record single move to undo stack
000CC1  1                   ; x contains direction and single/multiple move
000CC1  1                   ; x = 0%000MUDRL - Multiple / Up / Down / Right / Left
000CC1  1                   ;
000CC1  1                   ; the stack index 'pointer' undoindex points to a new entry each time
000CC1  1  8A               txa
000CC2  1  AC 40 09         ldy undoindex
000CC5  1  91 32            sta (ZP_PTR_UNDO),y
000CC7  1               
000CC7  1  C0 09            cpy #MAXUNDO-1 ; at last physical item in memory? then loop around
000CC9  1  F0 05            beq @loopindex
000CCB  1  EE 40 09         inc undoindex
000CCE  1  80 03            bra @checkmaxcount
000CD0  1                @loopindex:
000CD0  1  9C 40 09         stz undoindex
000CD3  1                @checkmaxcount:
000CD3  1  AD 41 09         lda undocounter
000CD6  1  C9 0A            cmp #MAXUNDO
000CD8  1  F0 03            beq @done ; maximum count reached / stack will loop around
000CDA  1  EE 41 09         inc undocounter
000CDD  1                @done:
000CDD  1  60               rts
000CDE  1               
000CDE  1               pull_undostack:
000CDE  1                   ; remove single move from undo stack
000CDE  1                   ; afterwards, x contains direction and single/multiple move
000CDE  1                   ; x = 0%000MUDRL - Multiple / Up / Down / Right / Left
000CDE  1               
000CDE  1  AD 41 09         lda undocounter ; check if we have any moves pushed to the stack
000CE1  1  D0 03            bne @stackedmoves
000CE3  1  A2 00            ldx #$0 ; empty move, nothing in the stack
000CE5  1  60               rts
000CE6  1               
000CE6  1               @stackedmoves:
000CE6  1  CE 41 09         dec undocounter ; reduce the number pushed to the stack with 1
000CE9  1  AC 40 09         ldy undoindex
000CEC  1  C0 00            cpy #$0 ; index at first position?
000CEE  1  D0 04            bne @normalindex
000CF0  1  A0 09            ldy #MAXUNDO-1 ; move it to the 'previous' index position in a circular manner
000CF2  1  80 01            bra @next
000CF4  1               @normalindex:
000CF4  1  88               dey ; move it to the 'previous' index position
000CF5  1               @next:
000CF5  1  8C 40 09         sty undoindex
000CF8  1                   ; y now points to the previous move, as an index to the stack memory
000CF8  1  B1 32            lda (ZP_PTR_UNDO),y
000CFA  1  AA               tax
000CFB  1  60               rts
000CFC  1               
000CFC  1               moveplayerposition:
000CFC  1                   ; moves pointer 3 to position of pointer 2
000CFC  1  A5 24            lda ZP_PTR_2
000CFE  1  85 26            sta ZP_PTR_3
000D00  1  A5 25            lda ZP_PTR_2+1
000D02  1  85 27            sta ZP_PTR_3+1
000D04  1  60               rts
000D05  1               
000D05  1               movecrateonfield:
000D05  1                   ; copies (ZP_PTR_2) to (ZP_PTR_1)
000D05  1                   ; and handles different crate move options (normal / crate on goal)
000D05  1  A0 00            ldy #0
000D07  1  B1 24            lda (ZP_PTR_2),y
000D09  1                   ; was there a goal underneath the crate?
000D09  1  C9 2A            cmp #'*'
000D0B  1  D0 1D            bne @crateonly
000D0D  1                   ; do we move to a goal position? (from goal to goal..)
000D0D  1  B1 22            lda (ZP_PTR_1),y
000D0F  1  C9 2E            cmp #'.'
000D11  1  D0 0A            bne @movetonormalposition
000D13  1               @movetogoalposition:
000D13  1  A9 2A            lda #'*' ; crate on goal symbol
000D15  1  91 22            sta (ZP_PTR_1),y
000D17  1  A9 2E            lda #'.'
000D19  1  91 24            sta (ZP_PTR_2),y
000D1B  1  80 28            bra @done
000D1D  1               @movetonormalposition:
000D1D  1  CE 31 09         dec no_goalsreached ; -1 win points
000D20  1  A9 24            lda #'$'; crate symbol
000D22  1  91 22            sta (ZP_PTR_1),y
000D24  1  A9 2E            lda #'.'
000D26  1  91 24            sta (ZP_PTR_2),y
000D28  1  80 1B            bra @done
000D2A  1               @crateonly:
000D2A  1                   ; is the destination a goal?
000D2A  1  B1 22            lda (ZP_PTR_1),y
000D2C  1  C9 2E            cmp #'.'
000D2E  1  D0 0D            bne @crateonly_nongoal
000D30  1                   ; crate moves to goal, from a non-goal position
000D30  1  EE 31 09         inc no_goalsreached ; +1 to win
000D33  1  A9 2A            lda #'*'
000D35  1  91 22            sta (ZP_PTR_1),y
000D37  1  A9 20            lda #' '
000D39  1  91 24            sta (ZP_PTR_2),y
000D3B  1  80 08            bra @done
000D3D  1               @crateonly_nongoal:
000D3D  1  A9 24            lda #'$'
000D3F  1  91 22            sta (ZP_PTR_1),y
000D41  1  A9 20            lda #' '; empty space to move the player in next
000D43  1  91 24            sta (ZP_PTR_2),y
000D45  1               @done:
000D45  1  60               rts
000D46  1               
000D46  1               moveplayeronfield:
000D46  1                   ; copies (ZP_PTR_3) to (ZP_PTR_2)
000D46  1                   ; and handles multiple player move options (normal / on goal)
000D46  1  A0 00            ldy #0
000D48  1  B1 26            lda (ZP_PTR_3),y
000D4A  1                   ; was there a goal underneath the player?
000D4A  1  C9 2B            cmp #'+'
000D4C  1  D0 1A            bne @playeronly
000D4E  1                   ; do we move to a goal position? (from goal to goal..)
000D4E  1  B1 24            lda (ZP_PTR_2),y
000D50  1  C9 2E            cmp #'.'
000D52  1  D0 0A            bne @movetonormalposition
000D54  1               @movetogoalposition:
000D54  1  A9 2B            lda #'+' ; player on goal symbol
000D56  1  91 24            sta (ZP_PTR_2),y
000D58  1  A9 2E            lda #'.'
000D5A  1  91 26            sta (ZP_PTR_3),y
000D5C  1  80 22            bra @done
000D5E  1               @movetonormalposition:
000D5E  1  A9 40            lda #'@'; player symbol
000D60  1  91 24            sta (ZP_PTR_2),y
000D62  1  A9 2E            lda #'.'
000D64  1  91 26            sta (ZP_PTR_3),y
000D66  1  80 18            bra @done
000D68  1               @playeronly:
000D68  1                   ; is the destination a goal?
000D68  1  B1 24            lda (ZP_PTR_2),y
000D6A  1  C9 2E            cmp #'.'
000D6C  1  D0 0A            bne @playeronly_nongoal
000D6E  1                   ; player moves to goal, from a non-goal position
000D6E  1  A9 2B            lda #'+'
000D70  1  91 24            sta (ZP_PTR_2),y
000D72  1  A9 20            lda #' '
000D74  1  91 26            sta (ZP_PTR_3),y
000D76  1  80 08            bra @done
000D78  1               @playeronly_nongoal:
000D78  1  A9 40            lda #'@'
000D7A  1  91 24            sta (ZP_PTR_2),y
000D7C  1  A9 20            lda #' '; empty space
000D7E  1  91 26            sta (ZP_PTR_3),y
000D80  1               @done:
000D80  1  60               rts
000D81  1               
000D81  1               print:
000D81  1                   ; console routines only
000D81  1                   ; print from address ZP_PTR_1
000D81  1                   ; don't end with newline character
000D81  1  5A               phy
000D82  1  A0 00            ldy #0
000D84  1               @loop:
000D84  1  B1 22            lda (ZP_PTR_1),y ; load character from address
000D86  1  F0 06            beq @done        ; end at 0 character
000D88  1  20 D2 FF         jsr CHROUT
000D8B  1  C8               iny
000D8C  1  80 F6            bra @loop
000D8E  1               @done:
000D8E  1  7A               ply
000D8F  1  60               rts
000D90  1               
000D90  1               printline:
000D90  1                   ; console routines only
000D90  1                   ; print from address ZP_PTR_1
000D90  1                   ; end with newline character
000D90  1  20 81 0D         jsr print
000D93  1  A9 0D            lda #NEWLINE
000D95  1  20 D2 FF         jsr CHROUT
000D98  1  60               rts
000D99  1               
000D99  1               printwinstatement:
000D99  1                   ; console routines only
000D99  1  A9 89            lda #<winstatement
000D9B  1  85 22            sta ZP_PTR_1
000D9D  1  A9 08            lda #>winstatement
000D9F  1  85 23            sta ZP_PTR_1+1
000DA1  1  20 90 0D         jsr printline
000DA4  1  60               rts
000DA5  1               
000DA5  1               printdecimal:
000DA5  1                   ; prints decimal from A register
000DA5  1                   ; VERA control needs to be set up previously
000DA5  1  DA               phx
000DA6  1  5A               phy
000DA7  1  86 30            stx temp    ; keep color to print in
000DA9  1  A0 2F            ldy #$2f
000DAB  1  A2 3A            ldx #$3a
000DAD  1  38               sec
000DAE  1               @loop1:
000DAE  1  C8               iny
000DAF  1  E9 64            sbc #100
000DB1  1  B0 FB            bcs @loop1
000DB3  1               @loop2:
000DB3  1  CA               dex
000DB4  1  69 0A            adc #10
000DB6  1  30 FB            bmi @loop2
000DB8  1  69 2F            adc #$2f
000DBA  1               
000DBA  1                   ; Y = hundreds, X = tens, A = ones
000DBA  1  48               pha
000DBB  1  8A               txa
000DBC  1  48               pha
000DBD  1  98               tya
000DBE  1  C9 30            cmp #$30 ; is it a '0' petscii?
000DC0  1  F0 08            beq @tens
000DC2  1  8D 23 9F         sta VERA_DATA0
000DC5  1  A5 30            lda temp
000DC7  1  8D 23 9F         sta VERA_DATA0
000DCA  1               @tens:
000DCA  1  68               pla
000DCB  1  C9 30            cmp #$30 ; is it a '0' petscii?
000DCD  1  F0 08            beq @ones
000DCF  1  8D 23 9F         sta VERA_DATA0
000DD2  1  A5 30            lda temp
000DD4  1  8D 23 9F         sta VERA_DATA0
000DD7  1               @ones:
000DD7  1  68               pla
000DD8  1  8D 23 9F         sta VERA_DATA0
000DDB  1  A5 30            lda temp
000DDD  1  8D 23 9F         sta VERA_DATA0
000DE0  1               
000DE0  1  7A               ply
000DE1  1  FA               plx
000DE2  1  60               rts
000DE3  1               
000DE3  1               selectlevel:
000DE3  1  A9 01            lda #1 ; start out with first level
000DE5  1  8D 2E 09         sta currentlevel
000DE8  1               
000DE8  1               @mainloop:
000DE8  1  20 88 0E         jsr clearselect
000DEB  1                   ; text prep to VERA
000DEB  1  9C 25 9F         stz VERA_CTRL
000DEE  1  A2 09            ldx #$9 ; color brown
000DF0  1  A9 10            lda #$10
000DF2  1  18               clc
000DF3  1  65 36            adc vera_highbit
000DF5  1  8D 22 9F         sta VERA_HIGH
000DF8  1  A9 21            lda #<selectmessage
000DFA  1  85 22            sta ZP_PTR_1
000DFC  1  A9 08            lda #>selectmessage
000DFE  1  85 23            sta ZP_PTR_1+1
000E00  1  A9 2D            lda #45     ; line 45
000E02  1  18               clc
000E03  1  65 34            adc vera_textbase
000E05  1  8D 21 9F         sta VERA_MID
000E08  1  A9 14            lda #10*2
000E0A  1  8D 20 9F         sta VERA_LOW
000E0D  1  20 6F 10         jsr printverastring
000E10  1               
000E10  1                   ; print range
000E10  1  AD 2F 09         lda no_levels
000E13  1  20 A5 0D         jsr printdecimal
000E16  1  A9 34            lda #<selectendmessage
000E18  1  85 22            sta ZP_PTR_1
000E1A  1  A9 08            lda #>selectendmessage
000E1C  1  85 23            sta ZP_PTR_1+1
000E1E  1  20 6F 10         jsr printverastring
000E21  1                   ; print level number
000E21  1  AD 2E 09         lda currentlevel
000E24  1  20 A5 0D         jsr printdecimal
000E27  1               
000E27  1               @charloop:
000E27  1  20 E4 FF         jsr GETIN
000E2A  1               @checkdown:
000E2A  1  C9 11            cmp #$11 ; down pressed
000E2C  1  F0 06            beq @down
000E2E  1  C9 9D            cmp #$9d ; left pressed
000E30  1  F0 02            beq @down
000E32  1  80 0C            bra @checkup
000E34  1               @down:
000E34  1                   ; down key pressed
000E34  1  AD 2E 09         lda currentlevel
000E37  1  C9 01            cmp #1
000E39  1  F0 EC            beq @charloop   ; lowest value == 1
000E3B  1  CE 2E 09         dec currentlevel
000E3E  1  80 A8            bra @mainloop
000E40  1               @checkup:
000E40  1  C9 91            cmp #$91 ; up pressed
000E42  1  F0 06            beq @up
000E44  1  C9 1D            cmp #$1d ; right pressed
000E46  1  F0 02            beq @up
000E48  1  80 0D            bra @checkreturnkey
000E4A  1               @up:
000E4A  1                   ; up key pressed
000E4A  1  AD 2E 09         lda currentlevel
000E4D  1  CD 2F 09         cmp no_levels
000E50  1  F0 D5            beq @charloop   ; maximum value reached
000E52  1  EE 2E 09         inc currentlevel
000E55  1  80 91            bra @mainloop
000E57  1               @checkreturnkey:
000E57  1  C9 0D            cmp #$0d
000E59  1  D0 04            bne @checkquit
000E5B  1                   ; return key pressed - select this level
000E5B  1  20 E1 0F         jsr cls
000E5E  1  60               rts
000E5F  1               @checkquit:
000E5F  1  C9 51            cmp #$51
000E61  1  D0 C4            bne @charloop
000E63  1  38               sec ; set carry to notify caller
000E64  1  60               rts
000E65  1               resetvars:
000E65  1                   ; reset goals
000E65  1  A9 00            lda #0
000E67  1  8D 31 09         sta no_goalsreached
000E6A  1               
000E6A  1                   ; load field pointer to first address at LOADSTART
000E6A  1                   ; load 1st pointer to temp pointer ZP_PTR_1
000E6A  1  A9 DF            lda #<LOADSTART
000E6C  1  85 22            sta ZP_PTR_1
000E6E  1  A9 48            lda #>LOADSTART
000E70  1  85 23            sta ZP_PTR_1+1
000E72  1               
000E72  1                   ; load number of levels, pointed to by ZP_PTR_1,0
000E72  1  A0 00            ldy #0
000E74  1  B1 22            lda (ZP_PTR_1),y
000E76  1  8D 2F 09         sta no_levels
000E79  1               
000E79  1                   ; reset undo stack
000E79  1  A9 36            lda #<undostack
000E7B  1  85 32            sta ZP_PTR_UNDO
000E7D  1  A9 09            lda #>undostack
000E7F  1  85 33            sta ZP_PTR_UNDO+1
000E81  1               
000E81  1  9C 40 09         stz undoindex
000E84  1  9C 41 09         stz undocounter
000E87  1  60               rts
000E88  1               
000E88  1               clearselect:
000E88  1                   ; clear out select text first
000E88  1  9C 25 9F         stz VERA_CTRL
000E8B  1  A2 09            ldx #$9
000E8D  1  A9 10            lda #$10
000E8F  1  18               clc
000E90  1  65 36            adc vera_highbit
000E92  1  8D 22 9F         sta VERA_HIGH
000E95  1  A9 38            lda #<clear
000E97  1  85 22            sta ZP_PTR_1
000E99  1  A9 08            lda #>clear
000E9B  1  85 23            sta ZP_PTR_1+1
000E9D  1  A9 2D            lda #45     ;line 45
000E9F  1  18               clc
000EA0  1  65 34            adc vera_textbase
000EA2  1  8D 21 9F         sta VERA_MID
000EA5  1  A9 14            lda #10*2
000EA7  1  8D 20 9F         sta VERA_LOW
000EAA  1  20 6F 10         jsr printverastring
000EAD  1  60               rts
000EAE  1               
000EAE  1               initfield:
000EAE  1                   ; load field pointer to first address at LOADSTART
000EAE  1                   ; load 1st pointer to temp pointer ZP_PTR_1
000EAE  1  A9 DF            lda #<LOADSTART
000EB0  1  85 22            sta ZP_PTR_1
000EB2  1  A9 48            lda #>LOADSTART
000EB4  1  85 23            sta ZP_PTR_1+1
000EB6  1               
000EB6  1                   ; skip to the first header, two bytes next
000EB6  1  18               clc
000EB7  1  A5 22            lda ZP_PTR_1
000EB9  1  69 02            adc #2
000EBB  1  85 22            sta ZP_PTR_1
000EBD  1               
000EBD  1                   ; now advance pointer (currentlevel - 1) * HEADERSIZE to advance to the correct payload pointer to that level
000EBD  1  AD 2E 09         lda currentlevel
000EC0  1  AA               tax ; x contains the currentlevel now and will act as a counter
000EC1  1               @loop:
000EC1  1  CA               dex
000EC2  1  F0 11            beq @fieldptrdone
000EC4  1                   ; advance the field payload pointer
000EC4  1  A5 22            lda ZP_PTR_1
000EC6  1  18               clc
000EC7  1  69 0C            adc #LEVELHEADER
000EC9  1  85 22            sta ZP_PTR_1
000ECB  1  90 F4            bcc @loop   ; nothing to do for the high byte
000ECD  1  A5 23            lda ZP_PTR_1+1
000ECF  1  69 00            adc #$0     ; increase the high byte
000ED1  1  85 23            sta ZP_PTR_1+1
000ED3  1  80 EC            bra @loop
000ED5  1               @fieldptrdone:
000ED5  1               
000ED5  1  A0 02            ldy #2  ; index from payload pointer to width variable (low byte)
000ED7  1  B1 22            lda (ZP_PTR_1),y
000ED9  1  8D 32 09         sta fieldwidth
000EDC  1  A0 04            ldy #4  ; index from payload pointer to height variable (low byte)
000EDE  1  B1 22            lda (ZP_PTR_1),y
000EE0  1  8D 33 09         sta fieldheight
000EE3  1  A0 06            ldy #6  ; index from payload pointer to goals in this level (low byte)
000EE5  1  B1 22            lda (ZP_PTR_1),y
000EE7  1  8D 30 09         sta no_goals
000EEA  1  A0 08            ldy #8  ; index from payload pointer to goals taken in this level (low byte)
000EEC  1  B1 22            lda (ZP_PTR_1),y
000EEE  1  8D 31 09         sta no_goalsreached
000EF1  1  A0 0A            ldy #10  ; index from payload pointer to player offset in this level
000EF3  1               
000EF3  1  B1 22            lda (ZP_PTR_1),y
000EF5  1  18               clc
000EF6  1  69 00            adc #<RAMBANK
000EF8  1  85 26            sta ZP_PTR_3
000EFA  1  C8               iny
000EFB  1  B1 22            lda (ZP_PTR_1),y
000EFD  1  69 A0            adc #>RAMBANK
000EFF  1  85 27            sta ZP_PTR_3+1
000F01  1                   ; ZP_PTR_3 now contains the actual address in memory of the player, not only the offset from the data
000F01  1               
000F01  1                   ; now copy the field data to the RAM bank
000F01  1  AD 33 09         lda fieldheight
000F04  1  AA               tax ; create counter
000F05  1                   ; clear temp counter
000F05  1  64 30            stz temp
000F07  1  64 31            stz temp+1
000F09  1               
000F09  1               @multiply:
000F09  1                   ; add fieldwidth variable to temp at each iteration - temp = temp + (width * height)
000F09  1  A5 30            lda temp
000F0B  1  18               clc
000F0C  1  6D 32 09         adc fieldwidth
000F0F  1  85 30            sta temp
000F11  1  A5 31            lda temp+1 ; don't forget the high byte
000F13  1  69 00            adc #0
000F15  1  85 31            sta temp+1
000F17  1  CA               dex
000F18  1  D0 EF            bne @multiply
000F1A  1               
000F1A  1                   ; copy (temp) amount of bytes from current field pointer to Ram bank 0
000F1A  1               
000F1A  1                   ; currently ZP_PTR_1 is pointing to the selected field HEADER
000F1A  1                   ; retrieve the field pointer from it, and let ZP_PTR_FIELD to that
000F1A  1  A0 00            ldy #0
000F1C  1  B1 22            lda (ZP_PTR_1),y
000F1E  1  85 2A            sta ZP_PTR_FIELD
000F20  1  C8               iny
000F21  1  B1 22            lda (ZP_PTR_1),y
000F23  1  85 2B            sta ZP_PTR_FIELD+1
000F25  1                   ; now let this pointer start counting from LOADSTART, just as the offset in the input file references
000F25  1  A5 2A            lda ZP_PTR_FIELD
000F27  1  18               clc
000F28  1  69 DF            adc #<LOADSTART
000F2A  1  85 2A            sta ZP_PTR_FIELD
000F2C  1  A5 2B            lda ZP_PTR_FIELD+1
000F2E  1  69 48            adc #>LOADSTART
000F30  1  85 2B            sta ZP_PTR_FIELD+1
000F32  1               
000F32  1                   ; set up destination pointer
000F32  1  A9 00            lda #<RAMBANK
000F34  1  85 24            sta ZP_PTR_2
000F36  1  A9 A0            lda #>RAMBANK
000F38  1  85 25            sta ZP_PTR_2+1
000F3A  1               
000F3A  1  A0 00            ldy #0
000F3C  1               @copybyte:
000F3C  1                   ; copy one byte of data
000F3C  1  B1 2A            lda (ZP_PTR_FIELD),y
000F3E  1  91 24            sta (ZP_PTR_2),y
000F40  1               
000F40  1                   ; temp = temp -1
000F40  1  A5 30            lda temp
000F42  1  38               sec
000F43  1  E9 01            sbc #1
000F45  1  85 30            sta temp
000F47  1  A5 31            lda temp+1
000F49  1  E9 00            sbc #0
000F4B  1  85 31            sta temp+1
000F4D  1               
000F4D  1                   ; if temp==0 done
000F4D  1  A5 31            lda temp+1
000F4F  1  D0 06            bne @copynextbyte
000F51  1  A5 30            lda temp
000F53  1  D0 02            bne @copynextbyte
000F55  1  80 1C            bra @done
000F57  1               @copynextbyte:
000F57  1  A5 2A            lda ZP_PTR_FIELD
000F59  1  18               clc
000F5A  1  69 01            adc #1
000F5C  1  85 2A            sta ZP_PTR_FIELD
000F5E  1  A5 2B            lda ZP_PTR_FIELD+1
000F60  1  69 00            adc #0
000F62  1  85 2B            sta ZP_PTR_FIELD+1
000F64  1  A5 24            lda ZP_PTR_2
000F66  1  18               clc
000F67  1  69 01            adc #1
000F69  1  85 24            sta ZP_PTR_2
000F6B  1  A5 25            lda ZP_PTR_2+1
000F6D  1  69 00            adc #0
000F6F  1  85 25            sta ZP_PTR_2+1
000F71  1  80 C9            bra @copybyte
000F73  1               @done:
000F73  1               
000F73  1                   ; prep the field pointer
000F73  1  A9 00            lda #<RAMBANK
000F75  1  85 2A            sta ZP_PTR_FIELD
000F77  1  A9 A0            lda #>RAMBANK
000F79  1  85 2B            sta ZP_PTR_FIELD+1
000F7B  1  60               rts
000F7C  1               
000F7C  1               printfield:
000F7C  1                   ; console routines only
000F7C  1                   ; no clearscreen, just print the field to screen on current position
000F7C  1                   ; depends only on
000F7C  1                   ; - field label for start of field
000F7C  1               
000F7C  1  A5 2A            lda ZP_PTR_FIELD
000F7E  1  85 22            sta ZP_PTR_1
000F80  1  A5 2B            lda ZP_PTR_FIELD+1
000F82  1  85 23            sta ZP_PTR_1+1
000F84  1  A2 00            ldx #0 ; row counter
000F86  1               @nextrow:
000F86  1  A0 00            ldy #0 ; column counter
000F88  1               @row:
000F88  1  B1 22            lda (ZP_PTR_1),y
000F8A  1  C9 40            cmp #'@'
000F8C  1  F0 06            beq @character
000F8E  1  C9 2B            cmp #'+'
000F90  1  F0 02            beq @character
000F92  1  80 17            bra @normalcolor
000F94  1               @character:
000F94  1  48               pha
000F95  1  A9 9E            lda #$9e ; YELLOW
000F97  1  20 D2 FF         jsr CHROUT
000F9A  1  68               pla
000F9B  1  20 D2 FF         jsr CHROUT
000F9E  1  A9 05            lda #$05 ; WHITE
000FA0  1  20 D2 FF         jsr CHROUT
000FA3  1  C8               iny
000FA4  1  CC 32 09         cpy fieldwidth
000FA7  1  D0 DF            bne @row
000FA9  1  80 09            bra @endline
000FAB  1               @normalcolor:
000FAB  1  20 D2 FF         jsr CHROUT
000FAE  1  C8               iny
000FAF  1  CC 32 09         cpy fieldwidth
000FB2  1  D0 D4            bne @row
000FB4  1               @endline:
000FB4  1  A9 0D            lda #NEWLINE
000FB6  1  20 D2 FF         jsr CHROUT
000FB9  1               
000FB9  1                   ; advance pointer to next row
000FB9  1  A5 22            lda ZP_PTR_1
000FBB  1  18               clc
000FBC  1  6D 32 09         adc fieldwidth
000FBF  1  85 22            sta ZP_PTR_1
000FC1  1  90 07            bcc @checklastrow ; no carry, don't increment high byte on pointer
000FC3  1  A5 23            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
000FC5  1  18               clc
000FC6  1  69 01            adc #1
000FC8  1  85 23            sta ZP_PTR_1+1
000FCA  1               @checklastrow:
000FCA  1                   ; last row?
000FCA  1  E8               inx
000FCB  1  EC 33 09         cpx fieldheight
000FCE  1  D0 B6            bne @nextrow
000FD0  1               
000FD0  1                   ; print quit message at the end of the field
000FD0  1  A9 0D            lda #NEWLINE
000FD2  1  20 D2 FF         jsr CHROUT
000FD5  1  A9 79            lda #<quitmessage
000FD7  1  85 22            sta ZP_PTR_1
000FD9  1  A9 08            lda #>quitmessage
000FDB  1  85 23            sta ZP_PTR_1+1
000FDD  1  20 90 0D         jsr printline
000FE0  1               
000FE0  1  60               rts
000FE1  1               
000FE1  1               cls:
000FE1  1  A9 93            lda #CLEARSCREEN
000FE3  1  20 D2 FF         jsr CHROUT
000FE6  1  60               rts
000FE7  1               
000FE7  1               loadtiles:
000FE7  1               ; Build  16x16 256 color tiles in VRAM location $12000
000FE7  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000FEA  1  A9 11            lda #$11
000FEC  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 1
000FEF  1  A9 20            lda #$20
000FF1  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $20
000FF4  1  9C 20 9F         stz VERA_LOW                        ; Set Low Byte to $00
000FF7  1               
000FF7  1  A2 00            ldx #0
000FF9  1  BD DF 42     :   lda tiledata,x                      ; index 0 / black tile
000FFC  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000FFF  1  E8               inx
001000  1  D0 F7            bne :-
001002  1                   ; load Brick data
001002  1  A2 00            ldx #0
001004  1  BD DF 43     :   lda Brick,x                         ; index 1 / brick
001007  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
00100A  1  E8               inx
00100B  1  D0 F7            bne :-
00100D  1                   ; load player data
00100D  1  A2 00            ldx #0
00100F  1  BD DF 44     :   lda player,x                        ; index 2 / player
001012  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
001015  1  E8               inx
001016  1  D0 F7            bne :-
001018  1                   ; load crate data
001018  1  A2 00            ldx #0
00101A  1  BD DF 45     :   lda crate,x                         ; index 3 / crate (normal)
00101D  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
001020  1  E8               inx
001021  1  D0 F7            bne :-
001023  1                   ; load goal data
001023  1  A2 00            ldx #0
001025  1  BD DF 46     :   lda goal,x                         ; index 4 / goal (normal)
001028  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
00102B  1  E8               inx
00102C  1  D0 F7            bne :-
00102E  1                   ; load crateongoal data
00102E  1  A2 00            ldx #0
001030  1  BD DF 47     :   lda crateongoal,x                   ; index 5 / crate on goal
001033  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
001036  1  E8               inx
001037  1  D0 F7            bne :-
001039  1               
001039  1  60               rts
00103A  1               
00103A  1               
00103A  1               displaymessagescreen:
00103A  1                   ; temp store pointer to the requested text
00103A  1  A5 22            lda ZP_PTR_1
00103C  1  48               pha
00103D  1  A5 23            lda ZP_PTR_1+1
00103F  1  48               pha
001040  1               
001040  1  A9 DF            lda #<messagescreen
001042  1  85 22            sta ZP_PTR_1
001044  1  A9 22            lda #>messagescreen
001046  1  85 23            sta ZP_PTR_1+1
001048  1  20 87 10         jsr displaytileset
00104B  1                   ; now display the string at ZP_PTR_1 in the middle and return
00104B  1  68               pla
00104C  1  85 23            sta ZP_PTR_1+1
00104E  1  68               pla
00104F  1  85 22            sta ZP_PTR_1
001051  1  9C 25 9F         stz VERA_CTRL
001054  1                   ;lda #%00100000
001054  1  A9 10            lda #$10
001056  1  18               clc
001057  1  65 36            adc vera_highbit
001059  1  8D 22 9F         sta VERA_HIGH
00105C  1  A9 1C            lda #28    ; was 28
00105E  1  18               clc
00105F  1  65 34            adc vera_textbase
001061  1  8D 21 9F         sta VERA_MID
001064  1  A9 38            lda #28*2
001066  1  8D 20 9F         sta VERA_LOW
001069  1  A2 09            ldx #$9 ; color brown
00106B  1  20 6F 10         jsr printverastring
00106E  1  60               rts
00106F  1               
00106F  1               printverastring:
00106F  1                   ; ZP_PTR_1 is pointing to the string
00106F  1                   ; x contains color of the text
00106F  1  18               clc
001070  1  A0 00            ldy #0
001072  1               @loop:
001072  1  B1 22            lda (ZP_PTR_1),y
001074  1  F0 10            beq @end
001076  1  C9 40            cmp #$40
001078  1  90 03            bcc @output
00107A  1               @AZ:
00107A  1  38               sec
00107B  1  E9 40            sbc #$40
00107D  1               @output:
00107D  1  8D 23 9F         sta VERA_DATA0
001080  1  8E 23 9F         stx VERA_DATA0
001083  1  C8               iny
001084  1  80 EC            bra @loop
001086  1               @end:
001086  1  60               rts
001087  1               
001087  1               displaytileset:
001087  1               ; Fill the Layer 0 with the tileset pointed to by ZP_PTR_1
001087  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
00108A  1  A9 10            lda #$10
00108C  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
00108F  1  A9 40            lda #$40
001091  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $40
001094  1  A9 00            lda #$0
001096  1  8D 20 9F         sta VERA_LOW                        ; Set Low Byte to $00
001099  1               
001099  1  A0 20            ldy #32
00109B  1               @outerloop:
00109B  1  A2 40            ldx #64
00109D  1               @innerloop:
00109D  1  5A               phy
00109E  1  A0 00            ldy #0
0010A0  1  B1 22            lda (ZP_PTR_1),y                    ; load byte from tileset
0010A2  1  8D 23 9F         sta VERA_DATA0
0010A5  1  9C 23 9F         stz VERA_DATA0                      ; zero it's attribute
0010A8  1  7A               ply
0010A9  1               
0010A9  1                   ; increase pointer to next byte in the set
0010A9  1  A5 22            lda ZP_PTR_1
0010AB  1  18               clc
0010AC  1  69 02            adc #$2
0010AE  1  85 22            sta ZP_PTR_1
0010B0  1  A5 23            lda ZP_PTR_1+1
0010B2  1  69 00            adc #$0
0010B4  1  85 23            sta ZP_PTR_1+1
0010B6  1               
0010B6  1  CA               dex
0010B7  1  D0 E4            bne @innerloop
0010B9  1  88               dey
0010BA  1  D0 DF            bne @outerloop
0010BC  1               
0010BC  1  60               rts
0010BD  1               
0010BD  1               displaytitlescreen:
0010BD  1  A9 DF            lda #<titlescreen
0010BF  1  85 22            sta ZP_PTR_1
0010C1  1  A9 12            lda #>titlescreen
0010C3  1  85 23            sta ZP_PTR_1+1
0010C5  1  20 87 10         jsr displaytileset
0010C8  1               
0010C8  1  9C 25 9F         stz VERA_CTRL
0010CB  1  A2 09            ldx #$9 ; color brown
0010CD  1  A9 10            lda #$10
0010CF  1  18               clc
0010D0  1  65 36            adc vera_highbit
0010D2  1  8D 22 9F         sta VERA_HIGH
0010D5  1               
0010D5  1  A9 A8            lda #<help0
0010D7  1  85 22            sta ZP_PTR_1
0010D9  1  A9 08            lda #>help0
0010DB  1  85 23            sta ZP_PTR_1+1
0010DD  1  A9 17            lda #23     ; line 23
0010DF  1  18               clc
0010E0  1  65 34            adc vera_textbase
0010E2  1  8D 21 9F         sta VERA_MID
0010E5  1  A9 64            lda #50*2
0010E7  1  8D 20 9F         sta VERA_LOW
0010EA  1  20 6F 10         jsr printverastring
0010ED  1  A9 B6            lda #<help1
0010EF  1  85 22            sta ZP_PTR_1
0010F1  1  A9 08            lda #>help1
0010F3  1  85 23            sta ZP_PTR_1+1
0010F5  1  A9 1E            lda #30     ; line 30
0010F7  1  18               clc
0010F8  1  65 34            adc vera_textbase
0010FA  1  8D 21 9F         sta VERA_MID
0010FD  1  A9 64            lda #50*2
0010FF  1  8D 20 9F         sta VERA_LOW
001102  1  20 6F 10         jsr printverastring
001105  1               
001105  1  A9 CA            lda #<help2
001107  1  85 22            sta ZP_PTR_1
001109  1  A9 08            lda #>help2
00110B  1  85 23            sta ZP_PTR_1+1
00110D  1  A9 20            lda #32     ; line 32
00110F  1  18               clc
001110  1  65 34            adc vera_textbase
001112  1  8D 21 9F         sta VERA_MID
001115  1  A9 64            lda #50*2
001117  1  8D 20 9F         sta VERA_LOW
00111A  1  20 6F 10         jsr printverastring
00111D  1               
00111D  1  A9 E0            lda #<help3
00111F  1  85 22            sta ZP_PTR_1
001121  1  A9 08            lda #>help3
001123  1  85 23            sta ZP_PTR_1+1
001125  1  A9 21            lda #33     ; line 33
001127  1  18               clc
001128  1  65 34            adc vera_textbase
00112A  1  8D 21 9F         sta VERA_MID
00112D  1  A9 64            lda #50*2
00112F  1  8D 20 9F         sta VERA_LOW
001132  1  20 6F 10         jsr printverastring
001135  1               
001135  1  A9 EE            lda #<help4
001137  1  85 22            sta ZP_PTR_1
001139  1  A9 08            lda #>help4
00113B  1  85 23            sta ZP_PTR_1+1
00113D  1  A9 22            lda #34     ; line 34
00113F  1  18               clc
001140  1  65 34            adc vera_textbase
001142  1  8D 21 9F         sta VERA_MID
001145  1  A9 64            lda #50*2
001147  1  8D 20 9F         sta VERA_LOW
00114A  1  20 6F 10         jsr printverastring
00114D  1               
00114D  1  A9 04            lda #<help5
00114F  1  85 22            sta ZP_PTR_1
001151  1  A9 09            lda #>help5
001153  1  85 23            sta ZP_PTR_1+1
001155  1  A9 23            lda #35     ; line 35
001157  1  18               clc
001158  1  65 34            adc vera_textbase
00115A  1  8D 21 9F         sta VERA_MID
00115D  1  A9 64            lda #50*2
00115F  1  8D 20 9F         sta VERA_LOW
001162  1  20 6F 10         jsr printverastring
001165  1  60               rts
001166  1               
001166  1               cleartiles:
001166  1               ; Fill the Layer 0 with all zeros (black)
001166  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
001169  1  A9 10            lda #$10
00116B  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
00116E  1  A9 40            lda #$40
001170  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $40
001173  1  A9 00            lda #$0
001175  1  8D 20 9F         sta VERA_LOW                        ; Set Low Byte to $00
001178  1               
001178  1  A0 20            ldy #32
00117A  1  A9 00            lda #0
00117C  1  A2 40        :   ldx #64
00117E  1  8D 23 9F     :   sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
001181  1  8D 23 9F         sta VERA_DATA0                      ; Write Attribute
001184  1  CA               dex
001185  1  D0 F7            bne :-
001187  1  88               dey
001188  1  D0 F2            bne :--
00118A  1               
00118A  1  60               rts
00118B  1               
00118B  1               resetlayerconfig:
00118B  1               ; Change Layer 1 to 8 Color Mode
00118B  1  AD 34 9F         lda $9F34
00118E  1  29 F7            and #%11110111                        ; Set bit 3 to 0, rest unchanged
001190  1  8D 34 9F         sta $9F34
001193  1               
001193  1  20 E1 0F         jsr cls
001196  1  60               rts
001197  1               
001197  1               layerconfig:
001197  1               ; Configure Layer 0
001197  1  A9 53            lda #%01010011                      ; 64 x 64 tiles, 8 bits per pixel
001199  1  8D 2D 9F         sta $9F2D
00119C  1  A9 20            lda #$20                            ; $20 points to $4000 in VRAM
00119E  1  8D 2E 9F         sta $9F2E                           ; Store to Map Base Pointer
0011A1  1               
0011A1  1  A9 93            lda #$93                            ; $48 points to $12000, Width and Height 16 pixel
0011A3  1  8D 2F 9F         sta $9F2F                           ; Store to Tile Base Pointer
0011A6  1               
0011A6  1  20 66 11         jsr cleartiles
0011A9  1               
0011A9  1               ; Turn on Layer 0
0011A9  1  AD 29 9F         lda $9F29
0011AC  1  09 30            ora #%00110000                      ; Bits 4 and 5 are set to 1
0011AE  1  8D 29 9F         sta $9F29                           ; So both Later 0 and 1 are turned on
0011B1  1               
0011B1  1               ; Change Layer 1 to 256 Color Mode
0011B1  1  AD 34 9F         lda $9F34
0011B4  1  09 08            ora #%001000                        ; Set bit 3 to 1, rest unchanged
0011B6  1  8D 34 9F         sta $9F34
0011B9  1               
0011B9  1               ; Clear Layer 1
0011B9  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
0011BC  1  A9 10            lda #$10
0011BE  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
0011C1  1  9C 21 9F         stz VERA_MID                        ; Set Middle Byte to $00
0011C4  1  9C 20 9F         stz VERA_LOW                        ; Set Low Byte to $00
0011C7  1               
0011C7  1  A9 1E            lda #30
0011C9  1  85 02            sta $02                             ; save counter for rows
0011CB  1  A0 01            ldy #$01                            ; Color Attribute white on black background
0011CD  1  A9 20            lda #$20                            ; Blank character
0011CF  1  A2 00            ldx #0
0011D1  1  8D 23 9F     :   sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
0011D4  1  8C 23 9F         sty VERA_DATA0                      ; Write Attribute
0011D7  1  E8               inx
0011D8  1  D0 F7            bne :-
0011DA  1  C6 02            dec $02
0011DC  1  D0 F3            bne :-
0011DE  1               
0011DE  1               ; Scale Display x2 for resolution of 320 x 240 pixels
0011DE  1               ;    lda #$40
0011DE  1               ;    sta $9F2A
0011DE  1               ;    sta $9F2B
0011DE  1               
0011DE  1  60               rts
0011DF  1               
0011DF  1               printfield2:
0011DF  1               ; prep variables for vera med/high bytes
0011DF  1               ;    topleft address for first tile is 0x04000
0011DF  1  A9 40            lda #$40
0011E1  1  8D 35 09         sta vera_byte_mid
0011E4  1  9C 34 09         stz vera_byte_low
0011E7  1               
0011E7  1               ; shift to the right (SCREENWIDTH - fieldwidth) /2 positions *2 to compensate for attribute
0011E7  1  A9 28            lda #SCREENWIDTH
0011E9  1  38               sec
0011EA  1  ED 32 09         sbc fieldwidth
0011ED  1  4A               lsr ; /2
0011EE  1  0A               asl ; *2 - so uneven widths result in an even address and we don't end up in parameter space of the TILEMAP
0011EF  1  8D 34 09         sta vera_byte_low
0011F2  1               
0011F2  1               ; shift down number of rows (SCREENHEIGHT - fieldheight) /2 positions
0011F2  1  A9 1E            lda #SCREENHEIGHT
0011F4  1  38               sec
0011F5  1  ED 33 09         sbc fieldheight
0011F8  1  4A               lsr ; /2
0011F9  1  AA               tax ; transfer number of rows down to counter
0011FA  1               @loop:
0011FA  1  E0 00            cpx #$0 ; any rows down (left)?
0011FC  1  F0 16            beq @done ; exit loop when x == 0
0011FE  1                   ; go 64 tiles further down - 64 * (1 address + 1 parameter of tile) = 128 / $80
0011FE  1  AD 34 09         lda vera_byte_low
001201  1  18               clc
001202  1  69 80            adc #$80    ; add row <<<ADDRESS>>> height for exactly one row down
001204  1  8D 34 09         sta vera_byte_low
001207  1  90 08            bcc @decrement  ; no need to change the high byte
001209  1  AD 35 09         lda vera_byte_mid
00120C  1  69 00            adc #$0     ; add carry (so +1)
00120E  1  8D 35 09         sta vera_byte_mid
001211  1               @decrement: ; next row
001211  1  CA               dex
001212  1  80 E6            bra @loop
001214  1               @done:
001214  1               
001214  1               ; prepare the pointers to the back-end field data, so we know what to display
001214  1  A5 2A            lda ZP_PTR_FIELD
001216  1  85 22            sta ZP_PTR_1
001218  1  A5 2B            lda ZP_PTR_FIELD+1
00121A  1  85 23            sta ZP_PTR_1+1
00121C  1               
00121C  1               ; start displaying the selected field
00121C  1               ; (vera_byte_mid / vera_byte_low) is the address for the top-left position on-screen in the tile map
00121C  1  A2 00            ldx #0 ; row counter
00121E  1               @nextrow:
00121E  1  A0 00            ldy #0 ; column counter
001220  1                   ; prepare vera pointers for this row
001220  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
001223  1  A9 10            lda #$10
001225  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
001228  1  AD 35 09         lda vera_byte_mid
00122B  1  8D 21 9F         sta VERA_MID
00122E  1  AD 34 09         lda vera_byte_low
001231  1  8D 20 9F         sta VERA_LOW
001234  1               
001234  1               @row:
001234  1                   ; sweep the field, row by row, indexed by column y
001234  1  B1 22            lda (ZP_PTR_1),y
001236  1  C9 40            cmp #'@'
001238  1  F0 2A            beq @player
00123A  1  C9 2B            cmp #'+'
00123C  1  F0 26            beq @player
00123E  1  C9 24            cmp #'$'
001240  1  F0 32            beq @crate
001242  1  C9 2E            cmp #'.'
001244  1  F0 4E            beq @goal
001246  1  C9 2A            cmp #'*'
001248  1  F0 3A            beq @crateongoal
00124A  1  C9 20            cmp #' '
00124C  1  F0 06            beq @ignore
00124E  1  C9 00            cmp #0
001250  1  F0 02            beq @ignore
001252  1  80 50            bra @wall
001254  1               @ignore:
001254  1                   ; ignore
001254  1  A9 00            lda #$0 ; black tile
001256  1  8D 23 9F         sta VERA_DATA0
001259  1  9C 23 9F         stz VERA_DATA0
00125C  1  C8               iny
00125D  1  CC 32 09         cpy fieldwidth
001260  1  D0 D2            bne @row
001262  1  80 4E            bra @endline
001264  1               @player:
001264  1  A9 02            lda #$2
001266  1  8D 23 9F         sta VERA_DATA0
001269  1  9C 23 9F         stz VERA_DATA0
00126C  1  C8               iny
00126D  1  CC 32 09         cpy fieldwidth
001270  1  D0 C2            bne @row
001272  1  80 3E            bra @endline
001274  1               @crate:
001274  1  A9 03            lda #$3
001276  1  8D 23 9F         sta VERA_DATA0
001279  1  9C 23 9F         stz VERA_DATA0
00127C  1  C8               iny
00127D  1  CC 32 09         cpy fieldwidth
001280  1  D0 B2            bne @row
001282  1  80 2E            bra @endline
001284  1               @crateongoal:
001284  1  A9 05            lda #$5
001286  1  8D 23 9F         sta VERA_DATA0
001289  1  9C 23 9F         stz VERA_DATA0
00128C  1  C8               iny
00128D  1  CC 32 09         cpy fieldwidth
001290  1  D0 A2            bne @row
001292  1  80 1E            bra @endline
001294  1               @goal:
001294  1  A9 04            lda #$4
001296  1  8D 23 9F         sta VERA_DATA0
001299  1  9C 23 9F         stz VERA_DATA0
00129C  1  C8               iny
00129D  1  CC 32 09         cpy fieldwidth
0012A0  1  D0 92            bne @row
0012A2  1  80 0E            bra @endline
0012A4  1               
0012A4  1               @wall:
0012A4  1  A9 01            lda #$1 ; load tile 1 ; brick
0012A6  1  8D 23 9F         sta VERA_DATA0
0012A9  1  9C 23 9F         stz VERA_DATA0
0012AC  1               
0012AC  1  C8               iny
0012AD  1  CC 32 09         cpy fieldwidth
0012B0  1  D0 82            bne @row
0012B2  1               @endline:
0012B2  1                   ; advance pointer to next row in the field
0012B2  1  A5 22            lda ZP_PTR_1
0012B4  1  18               clc
0012B5  1  6D 32 09         adc fieldwidth
0012B8  1  85 22            sta ZP_PTR_1
0012BA  1  90 06            bcc @checklastrow ; no carry, don't increment high byte on pointer
0012BC  1  A5 23            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
0012BE  1  69 00            adc #0
0012C0  1  85 23            sta ZP_PTR_1+1
0012C2  1               @checklastrow:
0012C2  1                   ; last row?
0012C2  1                   ; increment vera pointer to next row
0012C2  1  AD 34 09         lda vera_byte_low
0012C5  1  18               clc
0012C6  1  69 80            adc #$80    ; add address delta to next row - 64 tiles * 2 = 128 / $80
0012C8  1  8D 34 09         sta vera_byte_low
0012CB  1  90 08            bcc @next3  ; no need to change the high byte
0012CD  1  AD 35 09         lda vera_byte_mid
0012D0  1  69 00            adc #$0     ; add carry (so +1)
0012D2  1  8D 35 09         sta vera_byte_mid
0012D5  1               @next3:
0012D5  1  E8               inx
0012D6  1  EC 33 09         cpx fieldheight
0012D9  1  F0 03            beq @nextsection
0012DB  1               
0012DB  1  4C 1E 12         jmp @nextrow
0012DE  1               @nextsection:
0012DE  1  60               rts
0012DF  1               
0012DF  1               titlescreen:
0012DF  1  00 00 01 00  .incbin "tiles/titlescreen.bin"
0012E3  1  01 00 01 00  
0012E7  1  00 00 00 00  
0022DF  1               messagescreen:
0022DF  1  00 00 00 00  .incbin "tiles/messagescreen.bin"
0022E3  1  00 00 00 00  
0022E7  1  00 00 00 00  
0032DF  1               completescreen:
0032DF  1  00 00 00 00  .incbin "tiles/complete.bin"
0032E3  1  00 00 00 00  
0032E7  1  00 00 00 00  
0042DF  1               tiledata:
0042DF  1               black:
0042DF  1  00 00 00 00  .incbin "tiles/black.bin"
0042E3  1  00 00 00 00  
0042E7  1  00 00 00 00  
0043DF  1               Brick:
0043DF  1  08 08 08 08  .incbin "tiles/brick.bin"
0043E3  1  08 08 08 E5  
0043E7  1  08 08 08 08  
0044DF  1               player:
0044DF  1  00 00 00 00  .incbin "tiles/player.bin"
0044E3  1  00 10 10 10  
0044E7  1  10 0B 00 00  
0045DF  1               crate:
0045DF  1  57 57 57 57  .incbin "tiles/crate.bin"
0045E3  1  57 57 57 57  
0045E7  1  57 57 57 57  
0046DF  1               goal:
0046DF  1  00 00 00 00  .incbin "tiles/goal.bin"
0046E3  1  00 00 00 00  
0046E7  1  00 00 00 00  
0047DF  1               crateongoal:
0047DF  1  57 57 57 57  .incbin "tiles/crateongoal.bin"
0047E3  1  57 57 57 57  
0047E7  1  57 57 57 57  
0048DF  1               LOADSTART:
0048DF  1  32 00 5A 02  .incbin "levels.bin"
0048E3  1  0B 00 0B 00  
0048E7  1  03 00 00 00  
0082E8  1               
0082E8  1               
