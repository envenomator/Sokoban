ca65 V2.19 - Git ab8bb268
Main file   : sokoban.asm
Current file: sokoban.asm

000000r 1               .include "x16.inc"
000000r 2               .ifndef X16_INC
000000r 2               X16_INC  = 1
000000r 2               
000000r 2               .ifndef __CX16__
000000r 2               __CX16__ = 1
000000r 2               .endif
000000r 2               
000000r 2               SD_DEVICE   = 1
000000r 2               HOST_DEVICE = 8
000000r 2               DISK_DEVICE = HOST_DEVICE
000000r 2               
000000r 2               
000000r 2               ; RAM Addresses
000000r 2               
000000r 2               ; Kernal Registers
000000r 2               r0						= $02
000000r 2               r0L					= r0
000000r 2               r0H					= r0+1
000000r 2               r1						= $04
000000r 2               r1L					= r1
000000r 2               r1H					= r1+1
000000r 2               r2						= $06
000000r 2               r2L					= r2
000000r 2               r2H					= r2+1
000000r 2               r3						= $08
000000r 2               r3L					= r3
000000r 2               r3H					= r3+1
000000r 2               r4						= $0A
000000r 2               r4L					= r4
000000r 2               r4H					= r4+1
000000r 2               r5						= $0C
000000r 2               r5L					= r5
000000r 2               r5H					= r5+1
000000r 2               r6						= $0E
000000r 2               r6L					= r6
000000r 2               r6H					= r6+1
000000r 2               r7						= $10
000000r 2               r7L					= r7
000000r 2               r7H					= r7+1
000000r 2               r8						= $12
000000r 2               r8L					= r8
000000r 2               r8H					= r8+1
000000r 2               r9						= $14
000000r 2               r9L					= r9
000000r 2               r9H					= r9+1
000000r 2               r10					= $16
000000r 2               r10L					= r10
000000r 2               r10H					= r10+1
000000r 2               r11					= $18
000000r 2               r11L					= r11
000000r 2               r11H					= r11+1
000000r 2               r12					= $1A
000000r 2               r12L					= r12
000000r 2               r12H					= r12+1
000000r 2               r13					= $1C
000000r 2               r13L					= r13
000000r 2               r13H					= r13+1
000000r 2               r14					= $1E
000000r 2               r14L					= r14
000000r 2               r14H					= r14+1
000000r 2               r15					= $20
000000r 2               r15L					= r15
000000r 2               r15H					= r15+1
000000r 2               
000000r 2               ; Zero-Page userspace
000000r 2               ZP_PTR_1          = $00	; first four pointers for temporary use only
000000r 2               ZP_PTR_2          = $22
000000r 2               ZP_PTR_3          = $24
000000r 2               ZP_PTR_4          = $26
000000r 2               
000000r 2               ; I/O Registers
000000r 2               VERA_addr_low     = $9F20
000000r 2               VERA_addr_high    = $9F21
000000r 2               VERA_addr_bank    = $9F22
000000r 2               VERA_data0        = $9F23
000000r 2               VERA_data1        = $9F24
000000r 2               VERA_ctrl         = $9F25
000000r 2               VERA_ien          = $9F26
000000r 2               VERA_isr          = $9F27
000000r 2               VERA_irqline_l    = $9F28
000000r 2               VERA_dc_video     = $9F29
000000r 2               VERA_dc_hscale    = $9F2A
000000r 2               VERA_dc_vscale    = $9F2B
000000r 2               VERA_dc_border    = $9F2C
000000r 2               VERA_dc_hstart    = $9F29
000000r 2               VERA_dc_hstop     = $9F2A
000000r 2               VERA_dc_vsstart   = $9F2B
000000r 2               VERA_dc_vstop     = $9F2C
000000r 2               VERA_L0_config    = $9F2D
000000r 2               VERA_L0_mapbase   = $9F2E
000000r 2               VERA_L0_tilebase  = $9F2F
000000r 2               VERA_L0_hscroll_l = $9F30
000000r 2               VERA_L0_hscroll_h = $9F31
000000r 2               VERA_L0_vscroll_l = $9F32
000000r 2               VERA_L0_vscroll_h = $9F33
000000r 2               VERA_L1_config    = $9F34
000000r 2               VERA_L1_mapbase   = $9F35
000000r 2               VERA_L1_tilebase  = $9F36
000000r 2               VERA_L1_hscroll_l = $9F37
000000r 2               VERA_L1_hscroll_h = $9F38
000000r 2               VERA_L1_vscroll_l = $9F39
000000r 2               VERA_L1_vscroll_h = $9F3A
000000r 2               VERA_audio_ctrl   = $9F3B
000000r 2               VERA_audio_rate   = $9F3C
000000r 2               VERA_audio_data   = $9F3D
000000r 2               VERA_spi_data     = $9F3E
000000r 2               VERA_spi_ctrl     = $9F3F
000000r 2               
000000r 2               
000000r 2               ROM_BANK          = $9F60
000000r 2               RAM_BANK          = $9F61
000000r 2               
000000r 2               YM_reg            = $9FE0
000000r 2               YM_data           = $9FE1
000000r 2               
000000r 2               ; Emulator Registers
000000r 2               GIF_ctrl          = $9FB5
000000r 2               
000000r 2               ; ROM Banks
000000r 2               KERNAL_ROM_BANK   = 0
000000r 2               BASIC_ROM_BANK    = 4
000000r 2               
000000r 2               ; Banked Addresses
000000r 2               RAM_WIN           = $A000
000000r 2               RAM_WIN_SIZE      = $2000
000000r 2               ROM_WIN           = $C000
000000r 2               
000000r 2               ; Kernal Subroutines
000000r 2               CONSOLE_set_paging_message		:= $FED5
000000r 2               CONSOLE_put_image					:= $FED8
000000r 2               CONSOLE_init						:= $FEDB
000000r 2               CONSOLE_put_char					:= $FEDE
000000r 2               CONSOLE_get_char					:= $FEE1
000000r 2               MEMORY_FILL                   := $FEE4
000000r 2               MEMORY_COPY                   := $FEE7
000000r 2               MEMORY_CRC                    := $FEEA
000000r 2               MEMORY_DECOMPRESS             := $FEED
000000r 2               SPRITE_set_image					:= $FEF0
000000r 2               SPRITE_set_position				:= $FEF3
000000r 2               FB_init                 		:= $FEF6
000000r 2               FB_get_info             		:= $FEF9
000000r 2               FB_set_palette          		:= $FEFC
000000r 2               FB_cursor_position      		:= $FEFF
000000r 2               FB_cursor_next_line     		:= $FF02
000000r 2               FB_get_pixel            		:= $FF05
000000r 2               FB_get_pixels           		:= $FF08
000000r 2               FB_set_pixel            		:= $FF0B
000000r 2               FB_set_pixels           		:= $FF0E
000000r 2               FB_set_8_pixels         		:= $FF11
000000r 2               FB_set_8_pixels_opaque  		:= $FF14
000000r 2               FB_fill_pixels          		:= $FF17
000000r 2               FB_filter_pixels        		:= $FF1A
000000r 2               FB_move_pixels          		:= $FF1D
000000r 2               GRAPH_init							:= $FF20
000000r 2               GRAPH_clear							:= $FF23
000000r 2               GRAPH_set_window					:= $FF26
000000r 2               GRAPH_set_colors					:= $FF29
000000r 2               GRAPH_draw_line					:= $FF2C
000000r 2               GRAPH_draw_rect					:= $FF2F
000000r 2               GRAPH_move_rect					:= $FF32
000000r 2               GRAPH_draw_oval					:= $FF35
000000r 2               GRAPH_draw_image					:= $FF38
000000r 2               GRAPH_set_font						:= $FF3B
000000r 2               GRAPH_get_char_size				:= $FF3E
000000r 2               GRAPH_put_char						:= $FF41
000000r 2               MONITOR								:= $FF44
000000r 2               ENTER_BASIC							:= $FF47
000000r 2               CLOCK_SET_DATE_TIME           := $FF4D
000000r 2               CLOCK_GET_DATE_TIME           := $FF50
000000r 2               JOYSTICK_SCAN                 := $FF53
000000r 2               JOYSTICK_GET                  := $FF56
000000r 2               SCREEN_SET_MODE					:= $FF5F
000000r 2               SCREEN_SET_CHARSET				:= $FF62
000000r 2               
000000r 2               MOUSE_CONFIG                  := $FF68
000000r 2               MOUSE_GET			            := $FF6B
000000r 2               MOUSE_SCAN                    := $FF71
000000r 2               SCINIT                        := $FF81
000000r 2               IOINIT                        := $FF84
000000r 2               RAMTAS                        := $FF87
000000r 2               RESTOR                        := $FF8A
000000r 2               SETLFS                        := $FFBA
000000r 2               SETNAM                        := $FFBD
000000r 2               OPEN                          := $FFC0
000000r 2               CLOSE                         := $FFC3
000000r 2               CHKIN                         := $FFC6
000000r 2               CHKOUT                        := $FFC9
000000r 2               CLRCHN                        := $FFCC
000000r 2               CHRIN                         := $FFCF
000000r 2               CHROUT                        := $FFD2
000000r 2               LOAD                          := $FFD5
000000r 2               SAVE                          := $FFD8
000000r 2               SETTIM                        := $FFDB
000000r 2               RDTIM                         := $FFDE
000000r 2               STOP                          := $FFE1
000000r 2               GETIN                         := $FFE4
000000r 2               CLALL									:= $FFE7
000000r 2               UDTIM									:= $FFEA
000000r 2               SCREEN								:= $FFED
000000r 2               PLOT									:= $FFF0
000000r 2               IOBASE								:= $FFF3
000000r 2               
000000r 2               ; BASIC Vectors
000000r 2               BASIC_PANIC       := $C000
000000r 2               BASIC_INIT        := $C003
000000r 2               
000000r 2               
000000r 2               ; VRAM Addresses
000000r 2               VRAM_petscii   = $0F800
000000r 2               VRAM_psg       = $1F9C0
000000r 2               VRAM_palette   = $1FA00
000000r 2               VRAM_sprattr   = $1FC00
000000r 2               
000000r 2               ; IRQs
000000r 2               IRQVec         := $0314
000000r 2               BRKVec         := $0316
000000r 2               NMIVec         := $0318
000000r 2               
000000r 2               ;   Macros
000000r 2               
000000r 2               .macro VERA_SET_ADDR addr, stride
000000r 2               	.ifnblank stride
000000r 2                     .if stride < 0
000000r 2                        lda #((^addr) | $08 | ((0-stride) << 4))
000000r 2                     .else
000000r 2                        lda #((^addr) | (stride << 4))
000000r 2                     .endif
000000r 2               	.else
000000r 2               		lda #(^addr) | $10
000000r 2               	.endif
000000r 2               
000000r 2               	sta VERA_addr_bank
000000r 2               	lda #(>addr)
000000r 2               	sta VERA_addr_high
000000r 2               	lda #(<addr)
000000r 2               	sta VERA_addr_low
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .endif
000000r 2               
000000r 1               
000000r 1               ; constants
000000r 1               ;field = $100c; load for fields
000000r 1               ZP_PTR_FIELD = $28
000000r 1               temp = $30  ; used for temp 8/16 bit storage $30/$31
000000r 1               
000000r 1               LOADSTART = $a000;
000000r 1               NEWLINE = $0D
000000r 1               UPPERCASE = $8E
000000r 1               CLEARSCREEN = 147
000000r 1               LEVELHEADER = 10
000000r 1               
000000r 1               ; screen 16x16bit tile width/height
000000r 1               SCREENWIDTH = 20
000000r 1               SCREENHEIGHT = 15
000000r 1               
000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1               ; VERA Registers
00080D  1               VERA_LOW            = $9F20
00080D  1               VERA_MID            = $9F21
00080D  1               VERA_HIGH           = $9F22
00080D  1               VERA_DATA0          = $9F23
00080D  1               VERA_CTRL           = $9F25
00080D  1               
00080D  1  4C 8C 08        jmp start
000810  1               
000810  1               ; string constants
000810  1  50 52 45 53  message:          .byte "press a key",0
000814  1  53 20 41 20  
000818  1  4B 45 59 00  
00081C  1  53 45 4C 45  selectmessage:    .byte "select a level (",0
000820  1  43 54 20 41  
000824  1  20 4C 45 56  
00082D  1  29 3A 20 00  selectendmessage: .byte "): ",0
000831  1  45 52 52 4F  errormessage:     .byte "error loading file",0
000835  1  52 20 4C 4F  
000839  1  41 44 49 4E  
000844  1  50 52 45 53  quitmessage:      .byte "press q to quit",0
000848  1  53 20 51 20  
00084C  1  54 4F 20 51  
000854  1  4C 45 56 45  filename:         .byte "levels.bin"
000858  1  4C 53 2E 42  
00085C  1  49 4E        
00085E  1               filename_end:
00085E  1  47 4F 41 4C  winstatement:     .byte "goal reached!",0
000862  1  20 52 45 41  
000866  1  43 48 45 44  
00086C  1               
00086C  1               ; variables that the program uses during execution
00086C  1  01           currentlevel:   .byte 1 ; will need to be filled somewhere in the future in the GUI, or asked from the user
00086D  1  00           no_levels:      .byte 0 ; will be read by initfield
00086E  1  00           no_goals:       .byte 0 ; will be read by initfield, depending on the currentlevel
00086F  1  00           no_goalsreached:.byte 0 ; static now, reset for each game
000870  1  00           fieldwidth:     .byte 0 ; will be read by initfield, depending on the currentlevel
000871  1  00           fieldheight:    .byte 0 ; will be read by initfield, depending on the currentlevel
000872  1  00           vera_byte_low:  .byte 0
000873  1  00           vera_byte_mid: .byte 0
000874  1               
000874  1               ; usage of zeropage pointers:
000874  1               ; ZP_PTR_1 - temporary pointer
000874  1               ; ZP_PTR_2 - temporary pointer
000874  1               ; ZP_PTR_3 - position of player
000874  1               
000874  1               loadfield:
000874  1                   ; loads all fields from the file 'LEVELS.BIN'
000874  1  A9 0A            lda #filename_end - filename
000876  1  A2 54            ldx #<filename
000878  1  A0 08            ldy #>filename
00087A  1  20 BD FF         jsr SETNAM
00087D  1  A9 01            lda #$01
00087F  1  A2 08            ldx #$08
000881  1  A0 01            ldy #$01
000883  1  20 BA FF         jsr SETLFS
000886  1  A9 00            lda #$00 ; load to memory
000888  1  20 D5 FF         jsr LOAD
00088B  1                   ; sets carry flag on error, handled by upstream caller
00088B  1  60               rts
00088C  1               
00088C  1               start:
00088C  1                   ; force uppercase
00088C  1  A9 8E            lda #UPPERCASE
00088E  1  20 D2 FF         jsr CHROUT
000891  1               
000891  1  20 74 08         jsr loadfield
000894  1  90 0C            bcc @next
000896  1                   ; error
000896  1  A9 31            lda #<errormessage
000898  1  85 00            sta ZP_PTR_1
00089A  1  A9 08            lda #>errormessage
00089C  1  85 01            sta ZP_PTR_1+1
00089E  1  20 4F 0A         jsr printline
0008A1  1  60               rts ; exit program
0008A2  1               @next:
0008A2  1  20 FC 0A         jsr resetvars
0008A5  1  20 CF 0B         jsr loadtiles       ; load tiles from normal memory to VRAM
0008A8  1  20 22 0C         jsr layerconfig     ; configure layer 0/1 on screen
0008AB  1               
0008AB  1  20 8D 0A         jsr selectlevel
0008AE  1  20 11 0B         jsr initfield       ; load correct startup values for selected field
0008B1  1  20 9B 0C         jsr printfield2
0008B4  1               
0008B4  1               keyloop:
0008B4  1  20 E4 FF         jsr GETIN
0008B7  1               @checkdown:
0008B7  1  C9 11            cmp #$11
0008B9  1  D0 05            bne @checkup
0008BB  1  20 52 09         jsr handledown
0008BE  1  80 1E            bra @done
0008C0  1               @checkup:
0008C0  1  C9 91            cmp #$91
0008C2  1  D0 05            bne @checkleft
0008C4  1  20 29 09         jsr handleup
0008C7  1  80 15            bra @done
0008C9  1               @checkleft:
0008C9  1  C9 9D            cmp #$9d
0008CB  1  D0 05            bne @checkright
0008CD  1  20 0B 09         jsr handleleft
0008D0  1  80 0C            bra @done
0008D2  1               @checkright:
0008D2  1  C9 1D            cmp #$1d
0008D4  1  D0 03            bne @checkquit
0008D6  1  20 ED 08         jsr handleright
0008D9  1               @checkquit:
0008D9  1  C9 51            cmp #$51
0008DB  1  D0 01            bne @done
0008DD  1  60               rts
0008DE  1               @done:
0008DE  1                   ; check if we have reached all goals
0008DE  1  AD 6E 08         lda no_goals
0008E1  1  CD 6F 08         cmp no_goalsreached
0008E4  1  D0 04            bne @donenextkey
0008E6  1  20 58 0A         jsr printwinstatement
0008E9  1  60               rts
0008EA  1               @donenextkey:
0008EA  1  4C B4 08         jmp keyloop
0008ED  1               
0008ED  1               handleright:
0008ED  1                   ; pointers
0008ED  1                   ; 3 - player
0008ED  1                   ; 2 - block to the right of the player
0008ED  1                   ; 1 - block to the right of that block
0008ED  1               
0008ED  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1x position
0008ED  1  18               clc
0008EE  1  A5 24            lda ZP_PTR_3
0008F0  1  69 01            adc #$1               ; 1x position
0008F2  1  85 22            sta ZP_PTR_2
0008F4  1  A5 25            lda ZP_PTR_3+1
0008F6  1  69 00            adc #$0
0008F8  1  85 23            sta ZP_PTR_2+1
0008FA  1               
0008FA  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2x position
0008FA  1  18               clc
0008FB  1  A5 24            lda ZP_PTR_3
0008FD  1  69 02            adc #$2               ; 2x position
0008FF  1  85 00            sta ZP_PTR_1
000901  1  A5 25            lda ZP_PTR_3+1
000903  1  69 00            adc #$0
000905  1  85 01            sta ZP_PTR_1+1
000907  1               
000907  1  20 7B 09         jsr handlemove
00090A  1  60               rts
00090B  1               
00090B  1               handleleft:
00090B  1                   ; pointers
00090B  1                   ; 3 - player
00090B  1                   ; 2 - block to the left of the player
00090B  1                   ; 1 - block to the left of that block
00090B  1               
00090B  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1x position
00090B  1  38               sec
00090C  1  A5 24            lda ZP_PTR_3
00090E  1  E9 01            sbc #$1               ; 1x position
000910  1  85 22            sta ZP_PTR_2
000912  1  A5 25            lda ZP_PTR_3+1
000914  1  E9 00            sbc #$0
000916  1  85 23            sta ZP_PTR_2+1
000918  1               
000918  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2x position
000918  1  38               sec
000919  1  A5 24            lda ZP_PTR_3
00091B  1  E9 02            sbc #$2               ; 2x position
00091D  1  85 00            sta ZP_PTR_1
00091F  1  A5 25            lda ZP_PTR_3+1
000921  1  E9 00            sbc #$0
000923  1  85 01            sta ZP_PTR_1+1
000925  1               
000925  1  20 7B 09         jsr handlemove
000928  1               
000928  1               @done:
000928  1  60               rts
000929  1               handleup:
000929  1                   ; pointers
000929  1                   ; 3 - player
000929  1                   ; 2 - block to the top of the player
000929  1                   ; 1 - block to the top of that block
000929  1               
000929  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1xFIELDWIDTH
000929  1  AD 70 08         lda fieldwidth
00092C  1  85 30            sta temp
00092E  1  38               sec
00092F  1  A5 24            lda ZP_PTR_3
000931  1  E5 30            sbc temp
000933  1  85 22            sta ZP_PTR_2
000935  1  A5 25            lda ZP_PTR_3+1
000937  1  E9 00            sbc #$0
000939  1  85 23            sta ZP_PTR_2+1
00093B  1               
00093B  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2xFIELDWIDTH
00093B  1  AD 70 08         lda fieldwidth
00093E  1  0A               asl ; 2x
00093F  1  85 30            sta temp
000941  1  38               sec
000942  1  A5 24            lda ZP_PTR_3
000944  1  E5 30            sbc temp
000946  1  85 00            sta ZP_PTR_1
000948  1  A5 25            lda ZP_PTR_3+1
00094A  1  E9 00            sbc #$0
00094C  1  85 01            sta ZP_PTR_1+1
00094E  1               
00094E  1  20 7B 09         jsr handlemove
000951  1               
000951  1               @done:
000951  1  60               rts
000952  1               
000952  1               handledown:
000952  1                   ; pointers
000952  1                   ; 3 - player
000952  1                   ; 2 - block to the bottom of the player
000952  1                   ; 1 - block to the bottom of that block
000952  1               
000952  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1xFIELDWIDTH
000952  1  AD 70 08         lda fieldwidth
000955  1  85 30            sta temp
000957  1  18               clc
000958  1  A5 24            lda ZP_PTR_3
00095A  1  65 30            adc temp
00095C  1  85 22            sta ZP_PTR_2
00095E  1  A5 25            lda ZP_PTR_3+1
000960  1  69 00            adc #$0
000962  1  85 23            sta ZP_PTR_2+1
000964  1               
000964  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2xFIELDWIDTH
000964  1  AD 70 08         lda fieldwidth
000967  1  0A               asl ; 2x
000968  1  85 30            sta temp
00096A  1  18               clc
00096B  1  A5 24            lda ZP_PTR_3
00096D  1  65 30            adc temp
00096F  1  85 00            sta ZP_PTR_1
000971  1  A5 25            lda ZP_PTR_3+1
000973  1  69 00            adc #$0
000975  1  85 01            sta ZP_PTR_1+1
000977  1               
000977  1  20 7B 09         jsr handlemove
00097A  1  60               rts
00097B  1               
00097B  1               handlemove:
00097B  1                   ; pointers
00097B  1                   ; 3 - points to the player position
00097B  1                   ; 2 - points to the next block at the indicated direction
00097B  1                   ; 1 - points to the block after that block
00097B  1               
00097B  1  A0 00            ldy #0
00097D  1  B1 22            lda (ZP_PTR_2),y
00097F  1  C9 20            cmp #' ' ; empty block next to player?
000981  1  F0 06            beq @moveplayertopoint2
000983  1  C9 2E            cmp #'.' ; goal position next to player?
000985  1  F0 02            beq @moveplayertopoint2
000987  1  80 0D            bra @next ; no ' ' or '.' found next to player, is it a crate or a wall?
000989  1               @moveplayertopoint2:
000989  1                   ; move player to pointer 2
000989  1  20 07 0A         jsr moveplayeronfield
00098C  1  20 BD 09         jsr moveplayerposition
00098F  1               
00098F  1  20 C9 0B         jsr cls
000992  1               ;    jsr printfield
000992  1  20 9B 0C         jsr printfield2
000995  1               
000995  1  60               rts
000996  1               @next:
000996  1  A0 00            ldy #0
000998  1  B1 22            lda (ZP_PTR_2),y
00099A  1  C9 24            cmp #'$' ; crate next to player?
00099C  1  F0 06            beq @combinedmovecheck
00099E  1  C9 2A            cmp #'*' ; crate on goal next to player?
0009A0  1  F0 02            beq @combinedmovecheck
0009A2  1  80 18            bra @done ; something else not able to push
0009A4  1               @combinedmovecheck:
0009A4  1  B1 00            lda (ZP_PTR_1),y
0009A6  1  C9 20            cmp #' ' ; space after crate?
0009A8  1  F0 06            beq @combinedmove
0009AA  1  C9 2E            cmp #'.' ; goal after crate?
0009AC  1  F0 02            beq @combinedmove
0009AE  1  80 0C            bra @done ; nothing to move
0009B0  1               @combinedmove:
0009B0  1  20 C6 09         jsr movecrateonfield
0009B3  1  20 07 0A         jsr moveplayeronfield
0009B6  1  20 BD 09         jsr moveplayerposition
0009B9  1               
0009B9  1  20 9B 0C         jsr printfield2
0009BC  1               @done:
0009BC  1  60               rts
0009BD  1               
0009BD  1               moveplayerposition:
0009BD  1                   ; moves pointer 3 to position of pointer 2
0009BD  1  A5 22            lda ZP_PTR_2
0009BF  1  85 24            sta ZP_PTR_3
0009C1  1  A5 23            lda ZP_PTR_2+1
0009C3  1  85 25            sta ZP_PTR_3+1
0009C5  1  60               rts
0009C6  1               
0009C6  1               movecrateonfield:
0009C6  1                   ; copies (ZP_PTR_2) to (ZP_PTR_1)
0009C6  1                   ; and handles different crate move options (normal / crate on goal)
0009C6  1  A0 00            ldy #0
0009C8  1  B1 22            lda (ZP_PTR_2),y
0009CA  1                   ; was there a goal underneath the crate?
0009CA  1  C9 2A            cmp #'*'
0009CC  1  D0 1D            bne @crateonly
0009CE  1                   ; do we move to a goal position? (from goal to goal..)
0009CE  1  B1 00            lda (ZP_PTR_1),y
0009D0  1  C9 2E            cmp #'.'
0009D2  1  D0 0A            bne @movetonormalposition
0009D4  1               @movetogoalposition:
0009D4  1  A9 2A            lda #'*' ; crate on goal symbol
0009D6  1  91 00            sta (ZP_PTR_1),y
0009D8  1  A9 2E            lda #'.'
0009DA  1  91 22            sta (ZP_PTR_2),y
0009DC  1  80 28            bra @done
0009DE  1               @movetonormalposition:
0009DE  1  CE 6F 08         dec no_goalsreached ; -1 win points
0009E1  1  A9 24            lda #'$'; crate symbol
0009E3  1  91 00            sta (ZP_PTR_1),y
0009E5  1  A9 2E            lda #'.'
0009E7  1  91 22            sta (ZP_PTR_2),y
0009E9  1  80 1B            bra @done
0009EB  1               @crateonly:
0009EB  1                   ; is the destination a goal?
0009EB  1  B1 00            lda (ZP_PTR_1),y
0009ED  1  C9 2E            cmp #'.'
0009EF  1  D0 0D            bne @crateonly_nongoal
0009F1  1                   ; crate moves to goal, from a non-goal position
0009F1  1  EE 6F 08         inc no_goalsreached ; +1 to win
0009F4  1  A9 2A            lda #'*'
0009F6  1  91 00            sta (ZP_PTR_1),y
0009F8  1  A9 20            lda #' '
0009FA  1  91 22            sta (ZP_PTR_2),y
0009FC  1  80 08            bra @done
0009FE  1               @crateonly_nongoal:
0009FE  1  A9 24            lda #'$'
000A00  1  91 00            sta (ZP_PTR_1),y
000A02  1  A9 20            lda #' '; empty space to move the player in next
000A04  1  91 22            sta (ZP_PTR_2),y
000A06  1               @done:
000A06  1  60               rts
000A07  1               
000A07  1               moveplayeronfield:
000A07  1                   ; copies (ZP_PTR_3) to (ZP_PTR_2)
000A07  1                   ; and handles multiple player move options (normal / on goal)
000A07  1  A0 00            ldy #0
000A09  1  B1 24            lda (ZP_PTR_3),y
000A0B  1                   ; was there a goal underneath the player?
000A0B  1  C9 2B            cmp #'+'
000A0D  1  D0 1A            bne @playeronly
000A0F  1                   ; do we move to a goal position? (from goal to goal..)
000A0F  1  B1 22            lda (ZP_PTR_2),y
000A11  1  C9 2E            cmp #'.'
000A13  1  D0 0A            bne @movetonormalposition
000A15  1               @movetogoalposition:
000A15  1  A9 2B            lda #'+' ; player on goal symbol
000A17  1  91 22            sta (ZP_PTR_2),y
000A19  1  A9 2E            lda #'.'
000A1B  1  91 24            sta (ZP_PTR_3),y
000A1D  1  80 22            bra @done
000A1F  1               @movetonormalposition:
000A1F  1  A9 40            lda #'@'; crate symbol
000A21  1  91 22            sta (ZP_PTR_2),y
000A23  1  A9 2E            lda #'.'
000A25  1  91 24            sta (ZP_PTR_3),y
000A27  1  80 18            bra @done
000A29  1               @playeronly:
000A29  1                   ; is the destination a goal?
000A29  1  B1 22            lda (ZP_PTR_2),y
000A2B  1  C9 2E            cmp #'.'
000A2D  1  D0 0A            bne @playeronly_nongoal
000A2F  1                   ; player moves to goal, from a non-goal position
000A2F  1  A9 2B            lda #'+'
000A31  1  91 22            sta (ZP_PTR_2),y
000A33  1  A9 20            lda #' '
000A35  1  91 24            sta (ZP_PTR_3),y
000A37  1  80 08            bra @done
000A39  1               @playeronly_nongoal:
000A39  1  A9 40            lda #'@'
000A3B  1  91 22            sta (ZP_PTR_2),y
000A3D  1  A9 20            lda #' '; empty space
000A3F  1  91 24            sta (ZP_PTR_3),y
000A41  1               @done:
000A41  1  60               rts
000A42  1               
000A42  1               print:
000A42  1                   ; print from address ZP_PTR_1
000A42  1                   ; don't end with newline character
000A42  1  A0 00            ldy #0
000A44  1               @loop:
000A44  1  B1 00            lda (ZP_PTR_1),y ; load character from address
000A46  1  F0 06            beq @done        ; end at 0 character
000A48  1  20 D2 FF         jsr CHROUT
000A4B  1  C8               iny
000A4C  1  80 F6            bra @loop
000A4E  1               @done:
000A4E  1  60               rts
000A4F  1               
000A4F  1               printline:
000A4F  1                   ; print from address ZP_PTR_1
000A4F  1                   ; end with newline character
000A4F  1  20 42 0A         jsr print
000A52  1  A9 0D            lda #NEWLINE
000A54  1  20 D2 FF         jsr CHROUT
000A57  1  60               rts
000A58  1               
000A58  1               printwinstatement:
000A58  1  A9 5E            lda #<winstatement
000A5A  1  85 00            sta ZP_PTR_1
000A5C  1  A9 08            lda #>winstatement
000A5E  1  85 01            sta ZP_PTR_1+1
000A60  1  20 4F 0A         jsr printline
000A63  1  60               rts
000A64  1               
000A64  1               printdecimal:
000A64  1                   ; prints decimal from A register
000A64  1  A0 2F            ldy #$2f
000A66  1  A2 3A            ldx #$3a
000A68  1  38               sec
000A69  1               @loop1:
000A69  1  C8               iny
000A6A  1  E9 64            sbc #100
000A6C  1  B0 FB            bcs @loop1
000A6E  1               @loop2:
000A6E  1  CA               dex
000A6F  1  69 0A            adc #10
000A71  1  30 FB            bmi @loop2
000A73  1  69 2F            adc #$2f
000A75  1               
000A75  1                   ; Y = hundreds, X = tens, A = ones
000A75  1  48               pha
000A76  1  8A               txa
000A77  1  48               pha
000A78  1  98               tya
000A79  1  C9 30            cmp #$30 ; is it a '0' petscii?
000A7B  1  F0 03            beq @tens
000A7D  1  20 D2 FF         jsr CHROUT ; print Y
000A80  1               @tens:
000A80  1  68               pla
000A81  1  C9 30            cmp #$30 ; is it a '0' petscii?
000A83  1  F0 03            beq @ones
000A85  1  20 D2 FF         jsr CHROUT ; print X
000A88  1               @ones:
000A88  1  68               pla
000A89  1  20 D2 FF         jsr CHROUT ; print A
000A8C  1               
000A8C  1  60               rts
000A8D  1               
000A8D  1               selectlevel:
000A8D  1  A9 01            lda #1 ; start out with first level
000A8F  1  8D 6C 08         sta currentlevel
000A92  1               
000A92  1               @mainloop:
000A92  1  20 C9 0B         jsr cls
000A95  1                   ; print selection message
000A95  1  A9 1C            lda #<selectmessage
000A97  1  85 00            sta ZP_PTR_1
000A99  1  A9 08            lda #>selectmessage
000A9B  1  85 01            sta ZP_PTR_1+1
000A9D  1  20 42 0A         jsr print
000AA0  1                   ; print range
000AA0  1  20 D2 FF         jsr CHROUT
000AA3  1  A9 31            lda #'1'
000AA5  1  20 D2 FF         jsr CHROUT
000AA8  1  A9 2D            lda #'-'
000AAA  1  20 D2 FF         jsr CHROUT
000AAD  1  AD 6D 08         lda no_levels
000AB0  1  20 64 0A         jsr printdecimal
000AB3  1  A9 2D            lda #<selectendmessage
000AB5  1  85 00            sta ZP_PTR_1
000AB7  1  A9 08            lda #>selectendmessage
000AB9  1  85 01            sta ZP_PTR_1+1
000ABB  1  20 42 0A         jsr print
000ABE  1                   ; print level number
000ABE  1  AD 6C 08         lda currentlevel
000AC1  1  20 64 0A         jsr printdecimal
000AC4  1               
000AC4  1               @charloop:
000AC4  1  20 E4 FF         jsr GETIN
000AC7  1               @checkdown:
000AC7  1  C9 11            cmp #$11 ; down pressed
000AC9  1  F0 06            beq @down
000ACB  1  C9 9D            cmp #$9d ; left pressed
000ACD  1  F0 02            beq @down
000ACF  1  80 0C            bra @checkup
000AD1  1               @down:
000AD1  1                   ; down key pressed
000AD1  1  AD 6C 08         lda currentlevel
000AD4  1  C9 01            cmp #1
000AD6  1  F0 EC            beq @charloop   ; lowest value == 1
000AD8  1  CE 6C 08         dec currentlevel
000ADB  1  80 B5            bra @mainloop
000ADD  1               @checkup:
000ADD  1  C9 91            cmp #$91 ; up pressed
000ADF  1  F0 06            beq @up
000AE1  1  C9 1D            cmp #$1d ; right pressed
000AE3  1  F0 02            beq @up
000AE5  1  80 0D            bra @checkreturnkey
000AE7  1               @up:
000AE7  1                   ; up key pressed
000AE7  1  AD 6C 08         lda currentlevel
000AEA  1  CD 6D 08         cmp no_levels
000AED  1  F0 D5            beq @charloop   ; maximum value reached
000AEF  1  EE 6C 08         inc currentlevel
000AF2  1  80 9E            bra @mainloop
000AF4  1               @checkreturnkey:
000AF4  1  C9 0D            cmp #$0d
000AF6  1  D0 CC            bne @charloop
000AF8  1                   ; return key pressed - select this level
000AF8  1  20 C9 0B         jsr cls
000AFB  1  60               rts
000AFC  1               
000AFC  1               resetvars:
000AFC  1                   ; reset goals
000AFC  1  A9 00            lda #0
000AFE  1  8D 6F 08         sta no_goalsreached
000B01  1               
000B01  1                   ; load field pointer to first address at LOADSTART
000B01  1                   ; load 1st pointer to temp pointer ZP_PTR_1
000B01  1  A9 00            lda #<LOADSTART
000B03  1  85 00            sta ZP_PTR_1
000B05  1  A9 A0            lda #>LOADSTART
000B07  1  85 01            sta ZP_PTR_1+1
000B09  1               
000B09  1                   ; load number of levels, pointed to by ZP_PTR_1,0
000B09  1  A0 00            ldy #0
000B0B  1  B1 00            lda (ZP_PTR_1),y
000B0D  1  8D 6D 08         sta no_levels
000B10  1               
000B10  1  60               rts
000B11  1               
000B11  1               initfield:
000B11  1                   ; load field pointer to first address at LOADSTART
000B11  1                   ; load 1st pointer to temp pointer ZP_PTR_1
000B11  1  A9 00            lda #<LOADSTART
000B13  1  85 00            sta ZP_PTR_1
000B15  1  A9 A0            lda #>LOADSTART
000B17  1  85 01            sta ZP_PTR_1+1
000B19  1               
000B19  1                   ; skip to the first header, two bytes next
000B19  1  18               clc
000B1A  1  A5 00            lda ZP_PTR_1
000B1C  1  69 02            adc #2
000B1E  1  85 00            sta ZP_PTR_1
000B20  1               
000B20  1                   ; now advance pointer (currentlevel - 1) * HEADERSIZE to advance to the correct payload pointer to that level
000B20  1  AD 6C 08         lda currentlevel
000B23  1  AA               tax ; x contains the currentlevel now and will act as a counter
000B24  1               @loop:
000B24  1  CA               dex
000B25  1  F0 11            beq @fieldptrdone
000B27  1                   ; advance the field payload pointer
000B27  1  A5 00            lda ZP_PTR_1
000B29  1  18               clc
000B2A  1  69 0A            adc #LEVELHEADER
000B2C  1  85 00            sta ZP_PTR_1
000B2E  1  90 F4            bcc @loop   ; nothing to do for the high byte
000B30  1  A5 01            lda ZP_PTR_1+1
000B32  1  69 00            adc #$0     ; increase the high byte
000B34  1  85 01            sta ZP_PTR_1+1
000B36  1  80 EC            bra @loop
000B38  1               @fieldptrdone:
000B38  1  A0 00            ldy #0  ; index to the payload pointer itself
000B3A  1  B1 00            lda (ZP_PTR_1),y
000B3C  1  85 28            sta ZP_PTR_FIELD
000B3E  1  C8               iny
000B3F  1  B1 00            lda (ZP_PTR_1),y
000B41  1  85 29            sta ZP_PTR_FIELD+1
000B43  1  A0 02            ldy #2  ; index from payload pointer to width variable (low byte)
000B45  1  B1 00            lda (ZP_PTR_1),y
000B47  1  8D 70 08         sta fieldwidth
000B4A  1  A0 04            ldy #4  ; index from payload pointer to height variable (low byte)
000B4C  1  B1 00            lda (ZP_PTR_1),y
000B4E  1  8D 71 08         sta fieldheight
000B51  1  A0 06            ldy #6  ; index from payload pointer to goals in this level (low byte)
000B53  1  B1 00            lda (ZP_PTR_1),y
000B55  1  8D 6E 08         sta no_goals
000B58  1  A0 08            ldy #8  ; index from payload pointer to player ptr in this level
000B5A  1  B1 00            lda (ZP_PTR_1),y
000B5C  1  85 24            sta ZP_PTR_3
000B5E  1  C8               iny
000B5F  1  B1 00            lda (ZP_PTR_1),y
000B61  1  85 25            sta ZP_PTR_3+1
000B63  1               
000B63  1  60               rts
000B64  1               
000B64  1               printfield:
000B64  1                   ; no clearscreen, just print the field to screen on current position
000B64  1                   ; depends only on
000B64  1                   ; - field label for start of field
000B64  1               
000B64  1  A5 28            lda ZP_PTR_FIELD
000B66  1  85 00            sta ZP_PTR_1
000B68  1  A5 29            lda ZP_PTR_FIELD+1
000B6A  1  85 01            sta ZP_PTR_1+1
000B6C  1  A2 00            ldx #0 ; row counter
000B6E  1               @nextrow:
000B6E  1  A0 00            ldy #0 ; column counter
000B70  1               @row:
000B70  1  B1 00            lda (ZP_PTR_1),y
000B72  1  C9 40            cmp #'@'
000B74  1  F0 06            beq @character
000B76  1  C9 2B            cmp #'+'
000B78  1  F0 02            beq @character
000B7A  1  80 17            bra @normalcolor
000B7C  1               @character:
000B7C  1  48               pha
000B7D  1  A9 9E            lda #$9e ; YELLOW
000B7F  1  20 D2 FF         jsr CHROUT
000B82  1  68               pla
000B83  1  20 D2 FF         jsr CHROUT
000B86  1  A9 05            lda #$05 ; WHITE
000B88  1  20 D2 FF         jsr CHROUT
000B8B  1  C8               iny
000B8C  1  CC 70 08         cpy fieldwidth
000B8F  1  D0 DF            bne @row
000B91  1  80 09            bra @endline
000B93  1               @normalcolor:
000B93  1  20 D2 FF         jsr CHROUT
000B96  1  C8               iny
000B97  1  CC 70 08         cpy fieldwidth
000B9A  1  D0 D4            bne @row
000B9C  1               @endline:
000B9C  1  A9 0D            lda #NEWLINE
000B9E  1  20 D2 FF         jsr CHROUT
000BA1  1               
000BA1  1                   ; advance pointer to next row
000BA1  1  A5 00            lda ZP_PTR_1
000BA3  1  18               clc
000BA4  1  6D 70 08         adc fieldwidth
000BA7  1  85 00            sta ZP_PTR_1
000BA9  1  90 07            bcc @checklastrow ; no carry, don't increment high byte on pointer
000BAB  1  A5 01            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
000BAD  1  18               clc
000BAE  1  69 01            adc #1
000BB0  1  85 01            sta ZP_PTR_1+1
000BB2  1               @checklastrow:
000BB2  1                   ; last row?
000BB2  1  E8               inx
000BB3  1  EC 71 08         cpx fieldheight
000BB6  1  D0 B6            bne @nextrow
000BB8  1               
000BB8  1                   ; print quit message at the end of the field
000BB8  1  A9 0D            lda #NEWLINE
000BBA  1  20 D2 FF         jsr CHROUT
000BBD  1  A9 44            lda #<quitmessage
000BBF  1  85 00            sta ZP_PTR_1
000BC1  1  A9 08            lda #>quitmessage
000BC3  1  85 01            sta ZP_PTR_1+1
000BC5  1  20 4F 0A         jsr printline
000BC8  1               
000BC8  1  60               rts
000BC9  1               
000BC9  1               cls:
000BC9  1  A9 93            lda #CLEARSCREEN
000BCB  1  20 D2 FF         jsr CHROUT
000BCE  1  60               rts
000BCF  1               
000BCF  1               loadtiles:
000BCF  1               ; Build  16x16 256 color tiles in VRAM location $12000
000BCF  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000BD2  1  A9 11            lda #$11
000BD4  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 1
000BD7  1  A9 20            lda #$20
000BD9  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $20
000BDC  1  9C 20 9F         stz VERA_LOW                        ; Set Low Byte to $00
000BDF  1               
000BDF  1  A2 00            ldx #0
000BE1  1  BD BE 0D     :   lda tiledata,x                      ; index 0 / black tile
000BE4  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000BE7  1  E8               inx
000BE8  1  D0 F7            bne :-
000BEA  1                   ; load Brick data
000BEA  1  A2 00            ldx #0
000BEC  1  BD BE 0E     :   lda Brick,x                         ; index 1 / brick
000BEF  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000BF2  1  E8               inx
000BF3  1  D0 F7            bne :-
000BF5  1                   ; load player data
000BF5  1  A2 00            ldx #0
000BF7  1  BD BE 0F     :   lda player,x                        ; index 2 / player
000BFA  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000BFD  1  E8               inx
000BFE  1  D0 F7            bne :-
000C00  1                   ; load crate data
000C00  1  A2 00            ldx #0
000C02  1  BD BE 10     :   lda crate,x                         ; index 3 / crate (normal)
000C05  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000C08  1  E8               inx
000C09  1  D0 F7            bne :-
000C0B  1                   ; load goal data
000C0B  1  A2 00            ldx #0
000C0D  1  BD BE 11     :   lda goal,x                         ; index 4 / goal (normal)
000C10  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000C13  1  E8               inx
000C14  1  D0 F7            bne :-
000C16  1                   ; load crateongoal data
000C16  1  A2 00            ldx #0
000C18  1  BD BE 12     :   lda crateongoal,x                   ; index 5 / crate on goal
000C1B  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000C1E  1  E8               inx
000C1F  1  D0 F7            bne :-
000C21  1               
000C21  1  60               rts
000C22  1               
000C22  1               layerconfig:
000C22  1               ; Configure Layer 0
000C22  1  A9 03            lda #%00000011                      ; 32 x 32 tiles, 8 bits per pixel
000C24  1  8D 2D 9F         sta $9F2D
000C27  1  A9 20            lda #$20                            ; $20 points to $4000 in VRAM
000C29  1  8D 2E 9F         sta $9F2E                           ; Store to Map Base Pointer
000C2C  1               
000C2C  1  A9 93            lda #$93                            ; $48 points to $12000, Width and Height 16 pixel
000C2E  1  8D 2F 9F         sta $9F2F                           ; Store to Tile Base Pointer
000C31  1               
000C31  1               ; Fill the Layer 0 with all zeros (black)
000C31  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000C34  1  A9 10            lda #$10
000C36  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
000C39  1  A9 40            lda #$40
000C3B  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $40
000C3E  1  A9 00            lda #$0
000C40  1  8D 20 9F         sta VERA_LOW                        ; Set Low Byte to $00
000C43  1               
000C43  1  A9 00            lda #0
000C45  1  8D 23 9F         sta VERA_DATA0
000C48  1  8D 23 9F         sta VERA_DATA0
000C4B  1               
000C4B  1  A0 20            ldy #32
000C4D  1  A9 00            lda #0
000C4F  1  A2 20        :   ldx #32
000C51  1  8D 23 9F     :   sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000C54  1  8D 23 9F         sta VERA_DATA0                      ; Write Attribute
000C57  1  CA               dex
000C58  1  D0 F7            bne :-
000C5A  1  88               dey
000C5B  1  D0 F2            bne :--
000C5D  1               
000C5D  1               ; Turn on Layer 0
000C5D  1  AD 29 9F         lda $9F29
000C60  1  09 30            ora #%00110000                      ; Bits 4 and 5 are set to 1
000C62  1  8D 29 9F         sta $9F29                           ; So both Later 0 and 1 are turned on
000C65  1               
000C65  1               ; Change Layer 1 to 256 Color Mode
000C65  1  AD 34 9F         lda $9F34
000C68  1  09 08            ora #%001000                        ; Set bit 3 to 1, rest unchanged
000C6A  1  8D 34 9F         sta $9F34
000C6D  1               
000C6D  1               ; Clear Layer 1
000C6D  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000C70  1  A9 10            lda #$10
000C72  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
000C75  1  9C 21 9F         stz VERA_MID                        ; Set Middle Byte to $00
000C78  1  9C 20 9F         stz VERA_LOW                        ; Set Low Byte to $00
000C7B  1               
000C7B  1  A9 1E            lda #30
000C7D  1  85 02            sta $02                             ; save counter for rows
000C7F  1  A0 01            ldy #$01                            ; Color Attribute white on black background
000C81  1  A9 20            lda #$20                            ; Blank character
000C83  1  A2 00            ldx #0
000C85  1  8D 23 9F     :   sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000C88  1  8C 23 9F         sty VERA_DATA0                      ; Write Attribute
000C8B  1  E8               inx
000C8C  1  D0 F7            bne :-
000C8E  1  C6 02            dec $02
000C90  1  D0 F3            bne :-
000C92  1               
000C92  1               ; Scale Display x2 for resolution of 320 x 240 pixels
000C92  1  A9 40            lda #$40
000C94  1  8D 2A 9F         sta $9F2A
000C97  1  8D 2B 9F         sta $9F2B
000C9A  1               
000C9A  1  60               rts
000C9B  1               
000C9B  1               printfield2:
000C9B  1               ; prep variables for vera med/high bytes
000C9B  1               ;    topleft address for first tile is 0x04000
000C9B  1  A9 40            lda #$40
000C9D  1  8D 73 08         sta vera_byte_mid
000CA0  1  9C 72 08         stz vera_byte_low
000CA3  1               
000CA3  1               ; shift to the right (SCREENWIDTH - fieldwidth) /2 positions *2 to compensate for attribute
000CA3  1  A9 14            lda #SCREENWIDTH
000CA5  1  38               sec
000CA6  1  ED 70 08         sbc fieldwidth
000CA9  1  8D 72 08         sta vera_byte_low
000CAC  1               
000CAC  1               ; shift down number of rows (SCREENHEIGHT - fieldheight) /2 positions
000CAC  1  A9 0F            lda #SCREENHEIGHT
000CAE  1  38               sec
000CAF  1  ED 71 08         sbc fieldheight
000CB2  1  4A               lsr ; /2
000CB3  1  AA               tax ; transfer to counter
000CB4  1               @loop:
000CB4  1  E0 00            cpx #$0
000CB6  1  F0 16            beq @done ; exit loop when x == 0
000CB8  1  AD 72 08         lda vera_byte_low
000CBB  1  18               clc
000CBC  1  69 40            adc #$40    ; add row ADDRESS height for exactly one row down
000CBE  1  8D 72 08         sta vera_byte_low
000CC1  1  90 08            bcc @decrement  ; no need to change the high byte
000CC3  1  AD 73 08         lda vera_byte_mid
000CC6  1  69 00            adc #$0     ; add carry (so +1)
000CC8  1  8D 73 08         sta vera_byte_mid
000CCB  1               @decrement: ; next row
000CCB  1  CA               dex
000CCC  1  80 E6            bra @loop
000CCE  1               @done:
000CCE  1               
000CCE  1               ; First, prepare the pointers to the back-end field data
000CCE  1  A5 28            lda ZP_PTR_FIELD
000CD0  1  85 00            sta ZP_PTR_1
000CD2  1  A5 29            lda ZP_PTR_FIELD+1
000CD4  1  85 01            sta ZP_PTR_1+1
000CD6  1               
000CD6  1  A2 00            ldx #0 ; row counter
000CD8  1               @nextrow:
000CD8  1  A0 00            ldy #0 ; column counter
000CDA  1                   ; prepare vera pointers for this row
000CDA  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000CDD  1  A9 10            lda #$10
000CDF  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
000CE2  1  AD 73 08         lda vera_byte_mid
000CE5  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $40
000CE8  1  AD 72 08         lda vera_byte_low
000CEB  1  8D 20 9F         sta VERA_LOW                        ; Set Low Byte to $00
000CEE  1               
000CEE  1               @row:
000CEE  1  B1 00            lda (ZP_PTR_1),y
000CF0  1  C9 40            cmp #'@'
000CF2  1  F0 2A            beq @player
000CF4  1  C9 2B            cmp #'+'
000CF6  1  F0 26            beq @player
000CF8  1  C9 24            cmp #'$'
000CFA  1  F0 32            beq @crate
000CFC  1  C9 2E            cmp #'.'
000CFE  1  F0 4E            beq @goal
000D00  1  C9 2A            cmp #'*'
000D02  1  F0 3A            beq @crateongoal
000D04  1  C9 20            cmp #' '
000D06  1  F0 06            beq @ignore
000D08  1  C9 00            cmp #0
000D0A  1  F0 02            beq @ignore
000D0C  1  80 50            bra @wall
000D0E  1               @ignore:
000D0E  1                   ; ignore
000D0E  1  A9 00            lda #$0 ; black tile
000D10  1  8D 23 9F         sta VERA_DATA0
000D13  1  9C 23 9F         stz VERA_DATA0
000D16  1  C8               iny
000D17  1  CC 70 08         cpy fieldwidth
000D1A  1  D0 D2            bne @row
000D1C  1  80 4E            bra @endline
000D1E  1               @player:
000D1E  1  A9 02            lda #$2
000D20  1  8D 23 9F         sta VERA_DATA0
000D23  1  9C 23 9F         stz VERA_DATA0
000D26  1  C8               iny
000D27  1  CC 70 08         cpy fieldwidth
000D2A  1  D0 C2            bne @row
000D2C  1  80 3E            bra @endline
000D2E  1               @crate:
000D2E  1  A9 03            lda #$3
000D30  1  8D 23 9F         sta VERA_DATA0
000D33  1  9C 23 9F         stz VERA_DATA0
000D36  1  C8               iny
000D37  1  CC 70 08         cpy fieldwidth
000D3A  1  D0 B2            bne @row
000D3C  1  80 2E            bra @endline
000D3E  1               @crateongoal:
000D3E  1  A9 05            lda #$5
000D40  1  8D 23 9F         sta VERA_DATA0
000D43  1  9C 23 9F         stz VERA_DATA0
000D46  1  C8               iny
000D47  1  CC 70 08         cpy fieldwidth
000D4A  1  D0 A2            bne @row
000D4C  1  80 1E            bra @endline
000D4E  1               @goal:
000D4E  1  A9 04            lda #$4
000D50  1  8D 23 9F         sta VERA_DATA0
000D53  1  9C 23 9F         stz VERA_DATA0
000D56  1  C8               iny
000D57  1  CC 70 08         cpy fieldwidth
000D5A  1  D0 92            bne @row
000D5C  1  80 0E            bra @endline
000D5E  1               
000D5E  1               @wall:
000D5E  1  A9 01            lda #$1 ; load tile 1 ; brick
000D60  1  8D 23 9F         sta VERA_DATA0
000D63  1  9C 23 9F         stz VERA_DATA0
000D66  1               
000D66  1  C8               iny
000D67  1  CC 70 08         cpy fieldwidth
000D6A  1  D0 82            bne @row
000D6C  1               @endline:
000D6C  1                   ; advance pointer to next row
000D6C  1  A5 00            lda ZP_PTR_1
000D6E  1  18               clc
000D6F  1  6D 70 08         adc fieldwidth
000D72  1  85 00            sta ZP_PTR_1
000D74  1  90 07            bcc @checklastrow ; no carry, don't increment high byte on pointer
000D76  1  A5 01            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
000D78  1  18               clc
000D79  1  69 01            adc #1
000D7B  1  85 01            sta ZP_PTR_1+1
000D7D  1               @checklastrow:
000D7D  1                   ; last row?
000D7D  1                   ; increment vera pointer to next row
000D7D  1  AD 72 08         lda vera_byte_low
000D80  1  18               clc
000D81  1  69 40            adc #$40    ; add 40 - address to next row
000D83  1  8D 72 08         sta vera_byte_low
000D86  1  90 08            bcc @next3  ; no need to change the high byte
000D88  1  AD 73 08         lda vera_byte_mid
000D8B  1  69 00            adc #$0     ; add carry (so +1)
000D8D  1  8D 73 08         sta vera_byte_mid
000D90  1               @next3:
000D90  1  E8               inx
000D91  1  EC 71 08         cpx fieldheight
000D94  1  F0 03            beq @nextsection
000D96  1               
000D96  1  4C D8 0C         jmp @nextrow
000D99  1               @nextsection:
000D99  1  60               rts
000D9A  1               
000D9A  1               printdecimal2:
000D9A  1                   ; on entry A = value to print to standard out
000D9A  1  A2 FF            ldx #$ff
000D9C  1  38               sec
000D9D  1               @prdec100:
000D9D  1  E8               inx
000D9E  1  E9 64            sbc #100
000DA0  1  B0 FB            bcs @prdec100
000DA2  1  69 64            adc #100
000DA4  1  20 B5 0D         jsr @prdecdigit
000DA7  1  A2 FF            ldx #$ff
000DA9  1  38               sec
000DAA  1               @prdec10:
000DAA  1  E8               inx
000DAB  1  E9 0A            sbc #10
000DAD  1  B0 FB            bcs @prdec10
000DAF  1  69 0A            adc #10
000DB1  1  20 B5 0D         jsr @prdecdigit
000DB4  1  AA               tax
000DB5  1               @prdecdigit:
000DB5  1  48               pha
000DB6  1  8A               txa
000DB7  1  09 30            ora #'0'
000DB9  1  20 D2 FF         jsr CHROUT
000DBC  1  68               pla
000DBD  1  60               rts
000DBE  1               
000DBE  1               tiledata:
000DBE  1               black:
000DBE  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000DC2  1  00 00 00 00  
000DC6  1  00 00 00 00  
000DCE  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000DD2  1  00 00 00 00  
000DD6  1  00 00 00 00  
000DDE  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000DE2  1  00 00 00 00  
000DE6  1  00 00 00 00  
000DEE  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000DF2  1  00 00 00 00  
000DF6  1  00 00 00 00  
000DFE  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E02  1  00 00 00 00  
000E06  1  00 00 00 00  
000E0E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E12  1  00 00 00 00  
000E16  1  00 00 00 00  
000E1E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E22  1  00 00 00 00  
000E26  1  00 00 00 00  
000E2E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E32  1  00 00 00 00  
000E36  1  00 00 00 00  
000E3E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E42  1  00 00 00 00  
000E46  1  00 00 00 00  
000E4E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E52  1  00 00 00 00  
000E56  1  00 00 00 00  
000E5E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E62  1  00 00 00 00  
000E66  1  00 00 00 00  
000E6E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E72  1  00 00 00 00  
000E76  1  00 00 00 00  
000E7E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E82  1  00 00 00 00  
000E86  1  00 00 00 00  
000E8E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000E92  1  00 00 00 00  
000E96  1  00 00 00 00  
000E9E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000EA2  1  00 00 00 00  
000EA6  1  00 00 00 00  
000EAE  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000EB2  1  00 00 00 00  
000EB6  1  00 00 00 00  
000EBE  1               Brick:
000EBE  1  08 08 08 08      .byte 8,8,8,8,8,8,8,229,8,8,8,8,8,8,8,8
000EC2  1  08 08 08 E5  
000EC6  1  08 08 08 08  
000ECE  1  2A 2A 2A 2A      .byte 42,42,42,42,42,42,41,229,8,42,42,42,42,42,42,42
000ED2  1  2A 2A 29 E5  
000ED6  1  08 2A 2A 2A  
000EDE  1  2A 2A 2A 2A      .byte 42,42,42,42,42,42,41,229,8,42,44,42,42,42,42,42
000EE2  1  2A 2A 29 E5  
000EE6  1  08 2A 2C 2A  
000EEE  1  2A 2A 2C 2C      .byte 42,42,44,44,42,42,41,229,8,42,42,42,42,42,42,42
000EF2  1  2A 2A 29 E5  
000EF6  1  08 2A 2A 2A  
000EFE  1  2A 2A 2A 2A      .byte 42,42,42,42,42,42,41,229,8,42,42,42,42,42,42,42
000F02  1  2A 2A 29 E5  
000F06  1  08 2A 2A 2A  
000F0E  1  2A 2A 2A 2A      .byte 42,42,42,42,42,42,41,229,8,42,42,42,42,41,41,42
000F12  1  2A 2A 29 E5  
000F16  1  08 2A 2A 2A  
000F1E  1  29 29 29 29      .byte 41,41,41,41,41,41,41,229,8,41,41,41,41,41,41,41
000F22  1  29 29 29 E5  
000F26  1  08 29 29 29  
000F2E  1  E5 E5 E5 E5      .byte 229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229
000F32  1  E5 E5 E5 E5  
000F36  1  E5 E5 E5 E5  
000F3E  1  E5 08 08 08      .byte 229,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
000F42  1  08 08 08 08  
000F46  1  08 08 08 08  
000F4E  1  E5 08 08 2A      .byte 229,8,8,42,44,44,42,42,42,42,42,42,42,42,42,41
000F52  1  2C 2C 2A 2A  
000F56  1  2A 2A 2A 2A  
000F5E  1  E5 08 2A 2A      .byte 229,8,42,42,42,42,42,42,42,42,42,42,42,42,42,41
000F62  1  2A 2A 2A 2A  
000F66  1  2A 2A 2A 2A  
000F6E  1  E5 08 2A 2A      .byte 229,8,42,42,42,42,41,41,42,42,42,42,42,42,42,41
000F72  1  2A 2A 29 29  
000F76  1  2A 2A 2A 2A  
000F7E  1  E5 08 2A 2A      .byte 229,8,42,42,42,42,42,42,42,42,42,42,42,41,42,41
000F82  1  2A 2A 2A 2A  
000F86  1  2A 2A 2A 2A  
000F8E  1  E5 08 2A 2A      .byte 229,8,42,42,42,42,42,42,42,42,42,42,42,42,42,41
000F92  1  2A 2A 2A 2A  
000F96  1  2A 2A 2A 2A  
000F9E  1  E5 08 29 29      .byte 229,8,41,41,41,41,41,41,41,41,41,41,41,41,41,41
000FA2  1  29 29 29 29  
000FA6  1  29 29 29 29  
000FAE  1  E5 E5 E5 E5      .byte 229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229
000FB2  1  E5 E5 E5 E5  
000FB6  1  E5 E5 E5 E5  
000FBE  1               player:
000FBE  1  00 00 00 00  .incbin "player.bin"
000FC2  1  00 10 10 10  
000FC6  1  10 0B 00 00  
0010BE  1               crate:
0010BE  1  57 57 57 57  .incbin "crate.bin"
0010C2  1  57 57 57 57  
0010C6  1  57 57 57 57  
0011BE  1               goal:
0011BE  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0011C2  1  00 00 00 00  
0011C6  1  00 00 00 00  
0011CE  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0011D2  1  00 00 00 00  
0011D6  1  00 00 00 00  
0011DE  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0011E2  1  00 00 00 00  
0011E6  1  00 00 00 00  
0011EE  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0011F2  1  00 00 00 00  
0011F6  1  00 00 00 00  
0011FE  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001202  1  00 00 00 00  
001206  1  00 00 00 00  
00120E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001212  1  00 00 00 00  
001216  1  00 00 00 00  
00121E  1  00 00 00 00      .byte 0,0,0,0,0,0,$72,$72,$72,$72,0,0,0,0,0,0
001222  1  00 00 72 72  
001226  1  72 72 00 00  
00122E  1  00 00 00 00      .byte 0,0,0,0,0,0,$72,$72,$72,$72,0,0,0,0,0,0
001232  1  00 00 72 72  
001236  1  72 72 00 00  
00123E  1  00 00 00 00      .byte 0,0,0,0,0,0,$72,$72,$72,$72,0,0,0,0,0,0
001242  1  00 00 72 72  
001246  1  72 72 00 00  
00124E  1  00 00 00 00      .byte 0,0,0,0,0,0,$72,$72,$72,$72,0,0,0,0,0,0
001252  1  00 00 72 72  
001256  1  72 72 00 00  
00125E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001262  1  00 00 00 00  
001266  1  00 00 00 00  
00126E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001272  1  00 00 00 00  
001276  1  00 00 00 00  
00127E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001282  1  00 00 00 00  
001286  1  00 00 00 00  
00128E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001292  1  00 00 00 00  
001296  1  00 00 00 00  
00129E  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0012A2  1  00 00 00 00  
0012A6  1  00 00 00 00  
0012AE  1  00 00 00 00      .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0012B2  1  00 00 00 00  
0012B6  1  00 00 00 00  
0012BE  1               crateongoal:
0012BE  1  65 65 65 65  .incbin "crateongoal.bin"
0012C2  1  65 65 65 65  
0012C6  1  65 65 65 65  
0012BE  1               
