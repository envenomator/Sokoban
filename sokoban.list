ca65 V2.19 - Git ab8bb268
Main file   : sokoban.asm
Current file: sokoban.asm

000000r 1               .include "x16.inc"
000000r 2               .ifndef X16_INC
000000r 2               X16_INC  = 1
000000r 2               
000000r 2               .ifndef __CX16__
000000r 2               __CX16__ = 1
000000r 2               .endif
000000r 2               
000000r 2               SD_DEVICE   = 1
000000r 2               HOST_DEVICE = 8
000000r 2               DISK_DEVICE = HOST_DEVICE
000000r 2               
000000r 2               
000000r 2               ; RAM Addresses
000000r 2               
000000r 2               ; Kernal Registers
000000r 2               r0						= $02
000000r 2               r0L					= r0
000000r 2               r0H					= r0+1
000000r 2               r1						= $04
000000r 2               r1L					= r1
000000r 2               r1H					= r1+1
000000r 2               r2						= $06
000000r 2               r2L					= r2
000000r 2               r2H					= r2+1
000000r 2               r3						= $08
000000r 2               r3L					= r3
000000r 2               r3H					= r3+1
000000r 2               r4						= $0A
000000r 2               r4L					= r4
000000r 2               r4H					= r4+1
000000r 2               r5						= $0C
000000r 2               r5L					= r5
000000r 2               r5H					= r5+1
000000r 2               r6						= $0E
000000r 2               r6L					= r6
000000r 2               r6H					= r6+1
000000r 2               r7						= $10
000000r 2               r7L					= r7
000000r 2               r7H					= r7+1
000000r 2               r8						= $12
000000r 2               r8L					= r8
000000r 2               r8H					= r8+1
000000r 2               r9						= $14
000000r 2               r9L					= r9
000000r 2               r9H					= r9+1
000000r 2               r10					= $16
000000r 2               r10L					= r10
000000r 2               r10H					= r10+1
000000r 2               r11					= $18
000000r 2               r11L					= r11
000000r 2               r11H					= r11+1
000000r 2               r12					= $1A
000000r 2               r12L					= r12
000000r 2               r12H					= r12+1
000000r 2               r13					= $1C
000000r 2               r13L					= r13
000000r 2               r13H					= r13+1
000000r 2               r14					= $1E
000000r 2               r14L					= r14
000000r 2               r14H					= r14+1
000000r 2               r15					= $20
000000r 2               r15L					= r15
000000r 2               r15H					= r15+1
000000r 2               
000000r 2               ; Zero-Page userspace
000000r 2               ZP_PTR_1          = $00	; first four pointers for temporary use only
000000r 2               ZP_PTR_2          = $22
000000r 2               ZP_PTR_3          = $24
000000r 2               ZP_PTR_4          = $26
000000r 2               
000000r 2               ; I/O Registers
000000r 2               VERA_addr_low     = $9F20
000000r 2               VERA_addr_high    = $9F21
000000r 2               VERA_addr_bank    = $9F22
000000r 2               VERA_data0        = $9F23
000000r 2               VERA_data1        = $9F24
000000r 2               VERA_ctrl         = $9F25
000000r 2               VERA_ien          = $9F26
000000r 2               VERA_isr          = $9F27
000000r 2               VERA_irqline_l    = $9F28
000000r 2               VERA_dc_video     = $9F29
000000r 2               VERA_dc_hscale    = $9F2A
000000r 2               VERA_dc_vscale    = $9F2B
000000r 2               VERA_dc_border    = $9F2C
000000r 2               VERA_dc_hstart    = $9F29
000000r 2               VERA_dc_hstop     = $9F2A
000000r 2               VERA_dc_vsstart   = $9F2B
000000r 2               VERA_dc_vstop     = $9F2C
000000r 2               VERA_L0_config    = $9F2D
000000r 2               VERA_L0_mapbase   = $9F2E
000000r 2               VERA_L0_tilebase  = $9F2F
000000r 2               VERA_L0_hscroll_l = $9F30
000000r 2               VERA_L0_hscroll_h = $9F31
000000r 2               VERA_L0_vscroll_l = $9F32
000000r 2               VERA_L0_vscroll_h = $9F33
000000r 2               VERA_L1_config    = $9F34
000000r 2               VERA_L1_mapbase   = $9F35
000000r 2               VERA_L1_tilebase  = $9F36
000000r 2               VERA_L1_hscroll_l = $9F37
000000r 2               VERA_L1_hscroll_h = $9F38
000000r 2               VERA_L1_vscroll_l = $9F39
000000r 2               VERA_L1_vscroll_h = $9F3A
000000r 2               VERA_audio_ctrl   = $9F3B
000000r 2               VERA_audio_rate   = $9F3C
000000r 2               VERA_audio_data   = $9F3D
000000r 2               VERA_spi_data     = $9F3E
000000r 2               VERA_spi_ctrl     = $9F3F
000000r 2               
000000r 2               
000000r 2               ROM_BANK          = $9F60
000000r 2               RAM_BANK          = $9F61
000000r 2               
000000r 2               YM_reg            = $9FE0
000000r 2               YM_data           = $9FE1
000000r 2               
000000r 2               ; Emulator Registers
000000r 2               GIF_ctrl          = $9FB5
000000r 2               
000000r 2               ; ROM Banks
000000r 2               KERNAL_ROM_BANK   = 0
000000r 2               BASIC_ROM_BANK    = 4
000000r 2               
000000r 2               ; Banked Addresses
000000r 2               RAM_WIN           = $A000
000000r 2               RAM_WIN_SIZE      = $2000
000000r 2               ROM_WIN           = $C000
000000r 2               
000000r 2               ; Kernal Subroutines
000000r 2               CONSOLE_set_paging_message		:= $FED5
000000r 2               CONSOLE_put_image					:= $FED8
000000r 2               CONSOLE_init						:= $FEDB
000000r 2               CONSOLE_put_char					:= $FEDE
000000r 2               CONSOLE_get_char					:= $FEE1
000000r 2               MEMORY_FILL                   := $FEE4
000000r 2               MEMORY_COPY                   := $FEE7
000000r 2               MEMORY_CRC                    := $FEEA
000000r 2               MEMORY_DECOMPRESS             := $FEED
000000r 2               SPRITE_set_image					:= $FEF0
000000r 2               SPRITE_set_position				:= $FEF3
000000r 2               FB_init                 		:= $FEF6
000000r 2               FB_get_info             		:= $FEF9
000000r 2               FB_set_palette          		:= $FEFC
000000r 2               FB_cursor_position      		:= $FEFF
000000r 2               FB_cursor_next_line     		:= $FF02
000000r 2               FB_get_pixel            		:= $FF05
000000r 2               FB_get_pixels           		:= $FF08
000000r 2               FB_set_pixel            		:= $FF0B
000000r 2               FB_set_pixels           		:= $FF0E
000000r 2               FB_set_8_pixels         		:= $FF11
000000r 2               FB_set_8_pixels_opaque  		:= $FF14
000000r 2               FB_fill_pixels          		:= $FF17
000000r 2               FB_filter_pixels        		:= $FF1A
000000r 2               FB_move_pixels          		:= $FF1D
000000r 2               GRAPH_init							:= $FF20
000000r 2               GRAPH_clear							:= $FF23
000000r 2               GRAPH_set_window					:= $FF26
000000r 2               GRAPH_set_colors					:= $FF29
000000r 2               GRAPH_draw_line					:= $FF2C
000000r 2               GRAPH_draw_rect					:= $FF2F
000000r 2               GRAPH_move_rect					:= $FF32
000000r 2               GRAPH_draw_oval					:= $FF35
000000r 2               GRAPH_draw_image					:= $FF38
000000r 2               GRAPH_set_font						:= $FF3B
000000r 2               GRAPH_get_char_size				:= $FF3E
000000r 2               GRAPH_put_char						:= $FF41
000000r 2               MONITOR								:= $FF44
000000r 2               ENTER_BASIC							:= $FF47
000000r 2               CLOCK_SET_DATE_TIME           := $FF4D
000000r 2               CLOCK_GET_DATE_TIME           := $FF50
000000r 2               JOYSTICK_SCAN                 := $FF53
000000r 2               JOYSTICK_GET                  := $FF56
000000r 2               SCREEN_SET_MODE					:= $FF5F
000000r 2               SCREEN_SET_CHARSET				:= $FF62
000000r 2               
000000r 2               MOUSE_CONFIG                  := $FF68
000000r 2               MOUSE_GET			            := $FF6B
000000r 2               MOUSE_SCAN                    := $FF71
000000r 2               SCINIT                        := $FF81
000000r 2               IOINIT                        := $FF84
000000r 2               RAMTAS                        := $FF87
000000r 2               RESTOR                        := $FF8A
000000r 2               SETLFS                        := $FFBA
000000r 2               SETNAM                        := $FFBD
000000r 2               OPEN                          := $FFC0
000000r 2               CLOSE                         := $FFC3
000000r 2               CHKIN                         := $FFC6
000000r 2               CHKOUT                        := $FFC9
000000r 2               CLRCHN                        := $FFCC
000000r 2               CHRIN                         := $FFCF
000000r 2               CHROUT                        := $FFD2
000000r 2               LOAD                          := $FFD5
000000r 2               SAVE                          := $FFD8
000000r 2               SETTIM                        := $FFDB
000000r 2               RDTIM                         := $FFDE
000000r 2               STOP                          := $FFE1
000000r 2               GETIN                         := $FFE4
000000r 2               CLALL									:= $FFE7
000000r 2               UDTIM									:= $FFEA
000000r 2               SCREEN								:= $FFED
000000r 2               PLOT									:= $FFF0
000000r 2               IOBASE								:= $FFF3
000000r 2               
000000r 2               ; BASIC Vectors
000000r 2               BASIC_PANIC       := $C000
000000r 2               BASIC_INIT        := $C003
000000r 2               
000000r 2               
000000r 2               ; VRAM Addresses
000000r 2               VRAM_petscii   = $0F800
000000r 2               VRAM_psg       = $1F9C0
000000r 2               VRAM_palette   = $1FA00
000000r 2               VRAM_sprattr   = $1FC00
000000r 2               
000000r 2               ; IRQs
000000r 2               IRQVec         := $0314
000000r 2               BRKVec         := $0316
000000r 2               NMIVec         := $0318
000000r 2               
000000r 2               ;   Macros
000000r 2               
000000r 2               .macro VERA_SET_ADDR addr, stride
000000r 2               	.ifnblank stride
000000r 2                     .if stride < 0
000000r 2                        lda #((^addr) | $08 | ((0-stride) << 4))
000000r 2                     .else
000000r 2                        lda #((^addr) | (stride << 4))
000000r 2                     .endif
000000r 2               	.else
000000r 2               		lda #(^addr) | $10
000000r 2               	.endif
000000r 2               
000000r 2               	sta VERA_addr_bank
000000r 2               	lda #(>addr)
000000r 2               	sta VERA_addr_high
000000r 2               	lda #(<addr)
000000r 2               	sta VERA_addr_low
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .endif
000000r 2               
000000r 1               
000000r 1               ; constants
000000r 1               NEWLINE = $0D
000000r 1               UPPERCASE = $8E
000000r 1               CLEARSCREEN = 147
000000r 1               LEVELHEADER = 12
000000r 1               MAXUNDO = 10
000000r 1               SCREENWIDTH = 40        ; screen width/height in 16x16 tiles
000000r 1               SCREENHEIGHT = 30
000000r 1               RAMBANK = $a000         ; Ram Bank 0
000000r 1               
000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1               ; VERA Registers
00080D  1               VERA_LOW            = $9F20
00080D  1               VERA_MID            = $9F21
00080D  1               VERA_HIGH           = $9F22
00080D  1               VERA_DATA0          = $9F23
00080D  1               VERA_CTRL           = $9F25
00080D  1               
00080D  1  4C 04 09        jmp start
000810  1               
000810  1               ; string constants
000810  1  52 45 41 4C  quitaskmessage:      .byte "really quit? y/n",0
000814  1  4C 59 20 51  
000818  1  55 49 54 3F  
000821  1  53 45 4C 45  selectmessage:    .byte "select a level (1-",0
000825  1  43 54 20 41  
000829  1  20 4C 45 56  
000834  1  29 3A 20 00  selectendmessage: .byte "): ",0
000838  1  52 45 41 4C  resetmessage:     .byte "really reset level? y/n",0
00083C  1  4C 59 20 52  
000840  1  45 53 45 54  
000850  1  50 52 45 53  quitmessage:      .byte "press q to quit",0
000854  1  53 20 51 20  
000858  1  54 4F 20 51  
000860  1  4C 45 56 45  winstatement:     .byte "level complete! new level? y/n",0
000864  1  4C 20 43 4F  
000868  1  4D 50 4C 45  
00087F  1  28 43 29 32  help0:            .byte "(c)2021 venom",0
000883  1  30 32 31 20  
000887  1  56 45 4E 4F  
00088D  1  4B 45 59 42  help1:            .byte "keyboard shortcuts:",0
000891  1  4F 41 52 44  
000895  1  20 53 48 4F  
0008A1  1  43 55 52 53  help2:            .byte "cursor - moves player",0
0008A5  1  4F 52 20 2D  
0008A9  1  20 4D 4F 56  
0008B7  1  20 20 20 20  help3:            .byte "     q - quit",0
0008BB  1  20 51 20 2D  
0008BF  1  20 51 55 49  
0008C5  1  20 20 20 20  help4:            .byte "     u - undo move(s)",0
0008C9  1  20 55 20 2D  
0008CD  1  20 55 4E 44  
0008DB  1  20 20 20 20  help5:            .byte "     r - reset level",0
0008DF  1  20 52 20 2D  
0008E3  1  20 52 45 53  
0008F0  1               
0008F0  1               ; variables that the program uses during execution
0008F0  1  00           currentlevel:   .byte 0 ; will need to be filled somewhere in the future in the GUI, or asked from the user
0008F1  1  00           no_levels:      .byte 0 ; will be read by initfield
0008F2  1  00           no_goals:       .byte 0 ; will be read by initfield, depending on the currentlevel
0008F3  1  00           no_goalsreached:.byte 0 ; static now, reset for each game
0008F4  1  00           fieldwidth:     .byte 0 ; will be read by initfield, depending on the currentlevel
0008F5  1  00           fieldheight:    .byte 0 ; will be read by initfield, depending on the currentlevel
0008F6  1  00           vera_byte_low:  .byte 0
0008F7  1  00           vera_byte_mid:  .byte 0
0008F8  1  00 00 00 00  undostack:      .byte 0,0,0,0,0,0,0,0,0,0
0008FC  1  00 00 00 00  
000900  1  00 00        
000902  1  00           undoindex:      .byte 0
000903  1  00           undocounter:    .byte 0
000904  1               
000904  1               ; usage of zeropage address space:
000904  1               ; ZP_PTR_1 - temporary pointer
000904  1               ; ZP_PTR_2 - temporary pointer
000904  1               ; ZP_PTR_3 - position of player
000904  1               ZP_PTR_FIELD = $28
000904  1               temp = $30  ; used for temp 8/16 bit storage $30/$31
000904  1               ZP_PTR_UNDO = $32 ; used to point to the 'undo stack'
000904  1               
000904  1               start:
000904  1                   ; force uppercase
000904  1  A9 8E            lda #UPPERCASE
000906  1  20 D2 FF         jsr CHROUT
000909  1               
000909  1  20 E3 0E         jsr loadtiles       ; load tiles from normal memory to VRAM
00090C  1  20 77 10         jsr layerconfig     ; configure layer 0/1 on screen
00090F  1               
00090F  1  20 87 0D         jsr resetvars
000912  1  20 46 10         jsr cleartiles
000915  1               
000915  1  A9 BF            lda #<completescreen
000917  1  85 00            sta ZP_PTR_1
000919  1  A9 31            lda #>completescreen
00091B  1  85 01            sta ZP_PTR_1+1
00091D  1  20 7C 0F         jsr displaytileset
000920  1  60               rts
000921  1  20 B2 0F         jsr displaytitlescreen
000924  1  20 14 0D         jsr selectlevel
000927  1  20 46 10         jsr cleartiles      ; cls tiles
00092A  1               
00092A  1  20 AA 0D         jsr initfield       ; load correct startup values for selected field
00092D  1  20 BF 10         jsr printfield2
000930  1               
000930  1               keyloop:
000930  1  20 E4 FF         jsr GETIN
000933  1               @checkdown:
000933  1  C9 11            cmp #$11
000935  1  D0 05            bne @checkup
000937  1  20 3E 0B         jsr handledown
00093A  1  80 61            bra @done
00093C  1               @checkup:
00093C  1  C9 91            cmp #$91
00093E  1  D0 05            bne @checkleft
000940  1  20 D8 0A         jsr handleup
000943  1  80 58            bra @done
000945  1               @checkleft:
000945  1  C9 9D            cmp #$9d
000947  1  D0 05            bne @checkright
000949  1  20 7F 0A         jsr handleleft
00094C  1  80 4F            bra @done
00094E  1               @checkright:
00094E  1  C9 1D            cmp #$1d
000950  1  D0 05            bne @checkundo
000952  1  20 26 0A         jsr handleright
000955  1  80 46            bra @done
000957  1               @checkundo:
000957  1  C9 55            cmp #$55 ; 'u'
000959  1  D0 05            bne @checkreset
00095B  1  20 B0 09         jsr handle_undocommand
00095E  1  80 3D            bra @done
000960  1               @checkreset:
000960  1  C9 52            cmp #$52 ; 'r'
000962  1  D0 21            bne @checkquit
000964  1  20 0C 0A         jsr askreset
000967  1  B0 0B            bcs @resetgame
000969  1  20 DD 0E         jsr cls
00096C  1  20 46 10         jsr cleartiles
00096F  1  20 BF 10         jsr printfield2
000972  1  80 29            bra @done
000974  1               @resetgame:
000974  1  20 DD 0E         jsr cls
000977  1  20 46 10         jsr cleartiles
00097A  1  20 87 0D         jsr resetvars
00097D  1  20 AA 0D         jsr initfield
000980  1  20 BF 10         jsr printfield2
000983  1  80 AB            bra keyloop
000985  1               @checkquit:
000985  1  C9 51            cmp #$51 ; 'q'
000987  1  D0 14            bne @done
000989  1  20 F2 09         jsr askquit
00098C  1  B0 0B            bcs @exit
00098E  1  20 DD 0E         jsr cls
000991  1  20 46 10         jsr cleartiles
000994  1  20 BF 10         jsr printfield2
000997  1  80 04            bra @done
000999  1               @exit:
000999  1  20 6B 10         jsr resetlayerconfig
00099C  1  60               rts
00099D  1               @done:
00099D  1                   ; check if we have reached all goals
00099D  1  AD F2 08         lda no_goals
0009A0  1  CD F3 08         cmp no_goalsreached
0009A3  1  D0 08            bne @donenextkey
0009A5  1  20 D8 09         jsr asknewlevel
0009A8  1  B0 EF            bcs @exit
0009AA  1  4C 04 09         jmp start   ; reset game / let user decide on new level
0009AD  1               @donenextkey:
0009AD  1  4C 30 09         jmp keyloop
0009B0  1               
0009B0  1               handle_undocommand:
0009B0  1  20 0F 0C         jsr pull_undostack
0009B3  1                   ; x now contains previous move
0009B3  1                   ;   as #%000MUDRL - Multiple move / Up / Down / Right / Left
0009B3  1                   ; we will give x to the handle_undo_**** routine, so it can see the combined bit (4) and act on it
0009B3  1               @checkup:
0009B3  1  8A               txa
0009B4  1  29 08            and #%00001000
0009B6  1  F0 04            beq @checkdown
0009B8  1  20 03 0B         jsr handle_undo_up
0009BB  1  60               rts
0009BC  1               @checkdown:
0009BC  1  8A               txa
0009BD  1  29 04            and #%00000100
0009BF  1  F0 04            beq @checkright
0009C1  1  20 69 0B         jsr handle_undo_down
0009C4  1  60               rts
0009C5  1               @checkright:
0009C5  1  8A               txa
0009C6  1  29 02            and #%00000010
0009C8  1  F0 04            beq @checkleft
0009CA  1  20 46 0A         jsr handle_undo_right
0009CD  1  60               rts
0009CE  1               @checkleft:
0009CE  1  8A               txa
0009CF  1  29 01            and #%00000001
0009D1  1  F0 04            beq @emptystack
0009D3  1  20 9F 0A         jsr handle_undo_left
0009D6  1  60               rts
0009D7  1               @emptystack:
0009D7  1                   ; do nothing
0009D7  1  60               rts
0009D8  1               
0009D8  1               asknewlevel:
0009D8  1                   ; ask if the user would like to play a new level, and return clear carry on 'y'
0009D8  1  A9 60            lda #<winstatement
0009DA  1  85 00            sta ZP_PTR_1
0009DC  1  A9 08            lda #>winstatement
0009DE  1  85 01            sta ZP_PTR_1+1
0009E0  1  20 36 0F         jsr displaymessagescreen
0009E3  1               
0009E3  1               @keyloop:
0009E3  1  20 E4 FF         jsr GETIN
0009E6  1               @checkyes:
0009E6  1  C9 59            cmp #$59 ; Y
0009E8  1  D0 02            bne @checkno
0009EA  1  18               clc
0009EB  1  60               rts
0009EC  1               @checkno:
0009EC  1  C9 4E            cmp #$4e ; N
0009EE  1  D0 F3            bne @keyloop
0009F0  1  38               sec
0009F1  1  60               rts
0009F2  1               
0009F2  1               askquit:
0009F2  1                   ; ask if the user would like to quit, and return carry on 'y'
0009F2  1  A9 10            lda #<quitaskmessage
0009F4  1  85 00            sta ZP_PTR_1
0009F6  1  A9 08            lda #>quitaskmessage
0009F8  1  85 01            sta ZP_PTR_1+1
0009FA  1  20 36 0F         jsr displaymessagescreen
0009FD  1               
0009FD  1               @keyloop:
0009FD  1  20 E4 FF         jsr GETIN
000A00  1               @checkyes:
000A00  1  C9 59            cmp #$59 ; Y
000A02  1  D0 02            bne @checkno
000A04  1  38               sec
000A05  1  60               rts
000A06  1               @checkno:
000A06  1  C9 4E            cmp #$4e ; N
000A08  1  D0 F3            bne @keyloop
000A0A  1  18               clc
000A0B  1  60               rts
000A0C  1               
000A0C  1               askreset:
000A0C  1                   ; ask if the user would like to reset, and return carry on 'y'
000A0C  1  A9 38            lda #<resetmessage
000A0E  1  85 00            sta ZP_PTR_1
000A10  1  A9 08            lda #>resetmessage
000A12  1  85 01            sta ZP_PTR_1+1
000A14  1  20 36 0F         jsr displaymessagescreen
000A17  1               
000A17  1               @keyloop:
000A17  1  20 E4 FF         jsr GETIN
000A1A  1               @checkyes:
000A1A  1  C9 59            cmp #$59 ; Y
000A1C  1  D0 02            bne @checkno
000A1E  1  38               sec
000A1F  1  60               rts
000A20  1               @checkno:
000A20  1  C9 4E            cmp #$4e ; N
000A22  1  D0 F3            bne @keyloop
000A24  1  18               clc
000A25  1  60               rts
000A26  1               
000A26  1               handleright:
000A26  1                   ; pointers
000A26  1                   ; 3 - player
000A26  1                   ; 2 - block to the right of the player
000A26  1                   ; 1 - block to the right of that block
000A26  1               
000A26  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1x position
000A26  1  18               clc
000A27  1  A5 24            lda ZP_PTR_3
000A29  1  69 01            adc #$1               ; 1x position
000A2B  1  85 22            sta ZP_PTR_2
000A2D  1  A5 25            lda ZP_PTR_3+1
000A2F  1  69 00            adc #$0
000A31  1  85 23            sta ZP_PTR_2+1
000A33  1               
000A33  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2x position
000A33  1  18               clc
000A34  1  A5 24            lda ZP_PTR_3
000A36  1  69 02            adc #$2               ; 2x position
000A38  1  85 00            sta ZP_PTR_1
000A3A  1  A5 25            lda ZP_PTR_3+1
000A3C  1  69 00            adc #$0
000A3E  1  85 01            sta ZP_PTR_1+1
000A40  1               
000A40  1  A2 02            ldx #%00000010 ; right direction
000A42  1  20 A4 0B         jsr handlemove
000A45  1  60               rts
000A46  1               
000A46  1               handle_undo_right:
000A46  1                   ; 3 - player
000A46  1               
000A46  1  DA               phx ; store x to stack
000A47  1                   ; point 1 to player
000A47  1               
000A47  1  A5 24            lda ZP_PTR_3
000A49  1  85 00            sta ZP_PTR_1
000A4B  1  A5 25            lda ZP_PTR_3+1
000A4D  1  85 01            sta ZP_PTR_1+1
000A4F  1               
000A4F  1                   ; pointer 2 will point to the left of the player
000A4F  1                   ; so the player will move back to the left
000A4F  1  38               sec
000A50  1  A5 24            lda ZP_PTR_3
000A52  1  E9 01            sbc #$1
000A54  1  85 22            sta ZP_PTR_2
000A56  1  A5 25            lda ZP_PTR_3+1
000A58  1  E9 00            sbc #$0
000A5A  1  85 23            sta ZP_PTR_2+1
000A5C  1               
000A5C  1  20 77 0C         jsr moveplayeronfield
000A5F  1  20 2D 0C         jsr moveplayerposition
000A62  1               
000A62  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000A62  1  FA               plx
000A63  1  8A               txa
000A64  1  29 10            and #%00010000 ; was a crate moved in this move?
000A66  1  F0 10            beq @done
000A68  1               
000A68  1                   ; load pointer 2 to the right of the previous player's position
000A68  1  18               clc
000A69  1  A5 00            lda ZP_PTR_1
000A6B  1  69 01            adc #$1
000A6D  1  85 22            sta ZP_PTR_2
000A6F  1  A5 01            lda ZP_PTR_1+1
000A71  1  69 00            adc #$0
000A73  1  85 23            sta ZP_PTR_2+1
000A75  1               
000A75  1  20 36 0C         jsr movecrateonfield
000A78  1               @done:
000A78  1  20 DD 0E         jsr cls
000A7B  1  20 BF 10         jsr printfield2
000A7E  1  60               rts
000A7F  1               
000A7F  1               handleleft:
000A7F  1                   ; pointers
000A7F  1                   ; 3 - player
000A7F  1                   ; 2 - block to the left of the player
000A7F  1                   ; 1 - block to the left of that block
000A7F  1               
000A7F  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1x position
000A7F  1  38               sec
000A80  1  A5 24            lda ZP_PTR_3
000A82  1  E9 01            sbc #$1               ; 1x position
000A84  1  85 22            sta ZP_PTR_2
000A86  1  A5 25            lda ZP_PTR_3+1
000A88  1  E9 00            sbc #$0
000A8A  1  85 23            sta ZP_PTR_2+1
000A8C  1               
000A8C  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2x position
000A8C  1  38               sec
000A8D  1  A5 24            lda ZP_PTR_3
000A8F  1  E9 02            sbc #$2               ; 2x position
000A91  1  85 00            sta ZP_PTR_1
000A93  1  A5 25            lda ZP_PTR_3+1
000A95  1  E9 00            sbc #$0
000A97  1  85 01            sta ZP_PTR_1+1
000A99  1               
000A99  1  A2 01            ldx #%00000001 ; left direction
000A9B  1  20 A4 0B         jsr handlemove
000A9E  1               
000A9E  1               @done:
000A9E  1  60               rts
000A9F  1               
000A9F  1               handle_undo_left:
000A9F  1                   ; 3 - player
000A9F  1               
000A9F  1  DA               phx ; store x to stack
000AA0  1               
000AA0  1                   ; point 1 to player
000AA0  1  A5 24            lda ZP_PTR_3
000AA2  1  85 00            sta ZP_PTR_1
000AA4  1  A5 25            lda ZP_PTR_3+1
000AA6  1  85 01            sta ZP_PTR_1+1
000AA8  1               
000AA8  1                   ; pointer 2 will point to the right of the player
000AA8  1                   ; so the player will move back to the right
000AA8  1  18               clc
000AA9  1  A5 24            lda ZP_PTR_3
000AAB  1  69 01            adc #$1
000AAD  1  85 22            sta ZP_PTR_2
000AAF  1  A5 25            lda ZP_PTR_3+1
000AB1  1  69 00            adc #$0
000AB3  1  85 23            sta ZP_PTR_2+1
000AB5  1               
000AB5  1  20 77 0C         jsr moveplayeronfield
000AB8  1  20 2D 0C         jsr moveplayerposition
000ABB  1               
000ABB  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000ABB  1  FA               plx
000ABC  1  8A               txa
000ABD  1  29 10            and #%00010000 ; was a crate moved in this move?
000ABF  1  F0 10            beq @done
000AC1  1               
000AC1  1                   ; load pointer 2 to the left of the previous player's position
000AC1  1  38               sec
000AC2  1  A5 00            lda ZP_PTR_1
000AC4  1  E9 01            sbc #$1
000AC6  1  85 22            sta ZP_PTR_2
000AC8  1  A5 01            lda ZP_PTR_1+1
000ACA  1  E9 00            sbc #$0
000ACC  1  85 23            sta ZP_PTR_2+1
000ACE  1               
000ACE  1  20 36 0C         jsr movecrateonfield
000AD1  1               @done:
000AD1  1  20 DD 0E         jsr cls
000AD4  1  20 BF 10         jsr printfield2
000AD7  1  60               rts
000AD8  1               
000AD8  1               handleup:
000AD8  1                   ; pointers
000AD8  1                   ; 3 - player
000AD8  1                   ; 2 - block to the top of the player
000AD8  1                   ; 1 - block to the top of that block
000AD8  1               
000AD8  1                   ; ZP_PTR_2 = ZP_PTR_3 - 1xFIELDWIDTH
000AD8  1  AD F4 08         lda fieldwidth
000ADB  1  85 30            sta temp
000ADD  1  38               sec
000ADE  1  A5 24            lda ZP_PTR_3
000AE0  1  E5 30            sbc temp
000AE2  1  85 22            sta ZP_PTR_2
000AE4  1  A5 25            lda ZP_PTR_3+1
000AE6  1  E9 00            sbc #$0
000AE8  1  85 23            sta ZP_PTR_2+1
000AEA  1               
000AEA  1                   ; ZP_PTR_1 = ZP_PTR_1 - 2xFIELDWIDTH
000AEA  1  AD F4 08         lda fieldwidth
000AED  1  0A               asl ; 2x
000AEE  1  85 30            sta temp
000AF0  1  38               sec
000AF1  1  A5 24            lda ZP_PTR_3
000AF3  1  E5 30            sbc temp
000AF5  1  85 00            sta ZP_PTR_1
000AF7  1  A5 25            lda ZP_PTR_3+1
000AF9  1  E9 00            sbc #$0
000AFB  1  85 01            sta ZP_PTR_1+1
000AFD  1               
000AFD  1  A2 08            ldx #%00001000 ; up direction
000AFF  1  20 A4 0B         jsr handlemove
000B02  1               
000B02  1  60               rts
000B03  1               
000B03  1               handle_undo_up:
000B03  1                   ; 3 - player
000B03  1               
000B03  1  DA               phx ; store x to stack
000B04  1               
000B04  1                   ; point 1 to player
000B04  1  A5 24            lda ZP_PTR_3
000B06  1  85 00            sta ZP_PTR_1
000B08  1  A5 25            lda ZP_PTR_3+1
000B0A  1  85 01            sta ZP_PTR_1+1
000B0C  1               
000B0C  1                   ; pointer 2 will point to the position down of the player
000B0C  1                   ; so the player will move back down
000B0C  1  18               clc
000B0D  1  A5 24            lda ZP_PTR_3
000B0F  1  6D F4 08         adc fieldwidth
000B12  1  85 22            sta ZP_PTR_2
000B14  1  A5 25            lda ZP_PTR_3+1
000B16  1  69 00            adc #$0
000B18  1  85 23            sta ZP_PTR_2+1
000B1A  1               
000B1A  1  20 77 0C         jsr moveplayeronfield
000B1D  1  20 2D 0C         jsr moveplayerposition
000B20  1               
000B20  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000B20  1  FA               plx
000B21  1  8A               txa
000B22  1  29 10            and #%00010000 ; was a crate moved in this move?
000B24  1  F0 11            beq @done
000B26  1               
000B26  1                   ; load pointer 2 to the top of the previous player's position
000B26  1  38               sec
000B27  1  A5 00            lda ZP_PTR_1
000B29  1  ED F4 08         sbc fieldwidth
000B2C  1  85 22            sta ZP_PTR_2
000B2E  1  A5 01            lda ZP_PTR_1+1
000B30  1  E9 00            sbc #$0
000B32  1  85 23            sta ZP_PTR_2+1
000B34  1               
000B34  1  20 36 0C         jsr movecrateonfield
000B37  1               @done:
000B37  1  20 DD 0E         jsr cls
000B3A  1  20 BF 10         jsr printfield2
000B3D  1  60               rts
000B3E  1               
000B3E  1               handledown:
000B3E  1                   ; pointers
000B3E  1                   ; 3 - player
000B3E  1                   ; 2 - block to the bottom of the player
000B3E  1                   ; 1 - block to the bottom of that block
000B3E  1               
000B3E  1                   ; ZP_PTR_2 = ZP_PTR_3 + 1xFIELDWIDTH
000B3E  1  AD F4 08         lda fieldwidth
000B41  1  85 30            sta temp
000B43  1  18               clc
000B44  1  A5 24            lda ZP_PTR_3
000B46  1  65 30            adc temp
000B48  1  85 22            sta ZP_PTR_2
000B4A  1  A5 25            lda ZP_PTR_3+1
000B4C  1  69 00            adc #$0
000B4E  1  85 23            sta ZP_PTR_2+1
000B50  1               
000B50  1                   ; ZP_PTR_1 = ZP_PTR_1 + 2xFIELDWIDTH
000B50  1  AD F4 08         lda fieldwidth
000B53  1  0A               asl ; 2x
000B54  1  85 30            sta temp
000B56  1  18               clc
000B57  1  A5 24            lda ZP_PTR_3
000B59  1  65 30            adc temp
000B5B  1  85 00            sta ZP_PTR_1
000B5D  1  A5 25            lda ZP_PTR_3+1
000B5F  1  69 00            adc #$0
000B61  1  85 01            sta ZP_PTR_1+1
000B63  1               
000B63  1  A2 04            ldx #%00000100 ; down direction
000B65  1  20 A4 0B         jsr handlemove
000B68  1               
000B68  1  60               rts
000B69  1               
000B69  1               handle_undo_down:
000B69  1                   ; 3 - player
000B69  1               
000B69  1  DA               phx ; store x to stack
000B6A  1               
000B6A  1                   ; point 1 to player
000B6A  1  A5 24            lda ZP_PTR_3
000B6C  1  85 00            sta ZP_PTR_1
000B6E  1  A5 25            lda ZP_PTR_3+1
000B70  1  85 01            sta ZP_PTR_1+1
000B72  1               
000B72  1                   ; pointer 2 will point to the position up of the player
000B72  1                   ; so the player will move back up
000B72  1  38               sec
000B73  1  A5 24            lda ZP_PTR_3
000B75  1  ED F4 08         sbc fieldwidth
000B78  1  85 22            sta ZP_PTR_2
000B7A  1  A5 25            lda ZP_PTR_3+1
000B7C  1  E9 00            sbc #$0
000B7E  1  85 23            sta ZP_PTR_2+1
000B80  1               
000B80  1  20 77 0C         jsr moveplayeronfield
000B83  1  20 2D 0C         jsr moveplayerposition
000B86  1               
000B86  1                   ; check crate move, and if so, move it using pointer 2 -> 1
000B86  1  FA               plx
000B87  1  8A               txa
000B88  1  29 10            and #%00010000 ; was a crate moved in this move?
000B8A  1  F0 11            beq @done
000B8C  1               
000B8C  1                   ; load pointer 2 to the bottom of the previous player's position
000B8C  1  18               clc
000B8D  1  A5 00            lda ZP_PTR_1
000B8F  1  6D F4 08         adc fieldwidth
000B92  1  85 22            sta ZP_PTR_2
000B94  1  A5 01            lda ZP_PTR_1+1
000B96  1  69 00            adc #$0
000B98  1  85 23            sta ZP_PTR_2+1
000B9A  1               
000B9A  1  20 36 0C         jsr movecrateonfield
000B9D  1               @done:
000B9D  1  20 DD 0E         jsr cls
000BA0  1  20 BF 10         jsr printfield2
000BA3  1  60               rts
000BA4  1               
000BA4  1               handlemove:
000BA4  1                   ; pointers
000BA4  1                   ; 3 - points to the player position
000BA4  1                   ; 2 - points to the next block at the indicated direction
000BA4  1                   ; 1 - points to the block after that block
000BA4  1               
000BA4  1  DA               phx ; push x to stack with stored direction
000BA5  1               
000BA5  1  A0 00            ldy #0
000BA7  1  B1 22            lda (ZP_PTR_2),y
000BA9  1  C9 20            cmp #' ' ; empty block next to player?
000BAB  1  F0 06            beq @moveplayertopoint2
000BAD  1  C9 2E            cmp #'.' ; goal position next to player?
000BAF  1  F0 02            beq @moveplayertopoint2
000BB1  1  80 0C            bra @next ; no ' ' or '.' found next to player, is it a crate or a wall?
000BB3  1               @moveplayertopoint2:
000BB3  1                   ; move player to pointer 2
000BB3  1  20 77 0C         jsr moveplayeronfield
000BB6  1  20 2D 0C         jsr moveplayerposition
000BB9  1               
000BB9  1  FA               plx ; pull direction from the stack
000BBA  1  20 F2 0B         jsr push_undostack
000BBD  1  80 2A            bra @movecomplete
000BBF  1               @next:
000BBF  1  A0 00            ldy #0
000BC1  1  B1 22            lda (ZP_PTR_2),y
000BC3  1  C9 24            cmp #'$' ; crate next to player?
000BC5  1  F0 06            beq @combinedmovecheck
000BC7  1  C9 2A            cmp #'*' ; crate on goal next to player?
000BC9  1  F0 02            beq @combinedmovecheck
000BCB  1  80 23            bra @ignore ; something else not able to push
000BCD  1               @combinedmovecheck:
000BCD  1  B1 00            lda (ZP_PTR_1),y
000BCF  1  C9 20            cmp #' ' ; space after crate?
000BD1  1  F0 06            beq @combinedmove
000BD3  1  C9 2E            cmp #'.' ; goal after crate?
000BD5  1  F0 02            beq @combinedmove
000BD7  1  80 17            bra @ignore ; nothing to move
000BD9  1               @combinedmove:
000BD9  1  20 36 0C         jsr movecrateonfield
000BDC  1  20 77 0C         jsr moveplayeronfield
000BDF  1  20 2D 0C         jsr moveplayerposition
000BE2  1               
000BE2  1                   ; record combined move to undo stack
000BE2  1  68               pla
000BE3  1  09 10            ora #%00010000   ; set 'combined' bit 4
000BE5  1  AA               tax
000BE6  1  20 F2 0B         jsr push_undostack
000BE9  1               
000BE9  1               @movecomplete:
000BE9  1  20 BF 10         jsr printfield2
000BEC  1  20 DD 0E         jsr cls
000BEF  1  60               rts
000BF0  1               
000BF0  1               @ignore: ; nothing to move
000BF0  1  FA               plx  ; don't forget to remove the stacked x move
000BF1  1  60               rts
000BF2  1               
000BF2  1               push_undostack:
000BF2  1                   ; record single move to undo stack
000BF2  1                   ; x contains direction and single/multiple move
000BF2  1                   ; x = 0%000MUDRL - Multiple / Up / Down / Right / Left
000BF2  1                   ;
000BF2  1                   ; the stack index 'pointer' undoindex points to a new entry each time
000BF2  1  8A               txa
000BF3  1  AC 02 09         ldy undoindex
000BF6  1  91 32            sta (ZP_PTR_UNDO),y
000BF8  1               
000BF8  1  C0 09            cpy #MAXUNDO-1 ; at last physical item in memory? then loop around
000BFA  1  F0 05            beq @loopindex
000BFC  1  EE 02 09         inc undoindex
000BFF  1  80 03            bra @checkmaxcount
000C01  1                @loopindex:
000C01  1  9C 02 09         stz undoindex
000C04  1                @checkmaxcount:
000C04  1  AD 03 09         lda undocounter
000C07  1  C9 0A            cmp #MAXUNDO
000C09  1  F0 03            beq @done ; maximum count reached / stack will loop around
000C0B  1  EE 03 09         inc undocounter
000C0E  1                @done:
000C0E  1  60               rts
000C0F  1               
000C0F  1               pull_undostack:
000C0F  1                   ; remove single move from undo stack
000C0F  1                   ; afterwards, x contains direction and single/multiple move
000C0F  1                   ; x = 0%000MUDRL - Multiple / Up / Down / Right / Left
000C0F  1               
000C0F  1  AD 03 09         lda undocounter ; check if we have any moves pushed to the stack
000C12  1  D0 03            bne @stackedmoves
000C14  1  A2 00            ldx #$0 ; empty move, nothing in the stack
000C16  1  60               rts
000C17  1               
000C17  1               @stackedmoves:
000C17  1  CE 03 09         dec undocounter ; reduce the number pushed to the stack with 1
000C1A  1  AC 02 09         ldy undoindex
000C1D  1  C0 00            cpy #$0 ; index at first position?
000C1F  1  D0 04            bne @normalindex
000C21  1  A0 09            ldy #MAXUNDO-1 ; move it to the 'previous' index position in a circular manner
000C23  1  80 01            bra @next
000C25  1               @normalindex:
000C25  1  88               dey ; move it to the 'previous' index position
000C26  1               @next:
000C26  1  8C 02 09         sty undoindex
000C29  1                   ; y now points to the previous move, as an index to the stack memory
000C29  1  B1 32            lda (ZP_PTR_UNDO),y
000C2B  1  AA               tax
000C2C  1  60               rts
000C2D  1               
000C2D  1               moveplayerposition:
000C2D  1                   ; moves pointer 3 to position of pointer 2
000C2D  1  A5 22            lda ZP_PTR_2
000C2F  1  85 24            sta ZP_PTR_3
000C31  1  A5 23            lda ZP_PTR_2+1
000C33  1  85 25            sta ZP_PTR_3+1
000C35  1  60               rts
000C36  1               
000C36  1               movecrateonfield:
000C36  1                   ; copies (ZP_PTR_2) to (ZP_PTR_1)
000C36  1                   ; and handles different crate move options (normal / crate on goal)
000C36  1  A0 00            ldy #0
000C38  1  B1 22            lda (ZP_PTR_2),y
000C3A  1                   ; was there a goal underneath the crate?
000C3A  1  C9 2A            cmp #'*'
000C3C  1  D0 1D            bne @crateonly
000C3E  1                   ; do we move to a goal position? (from goal to goal..)
000C3E  1  B1 00            lda (ZP_PTR_1),y
000C40  1  C9 2E            cmp #'.'
000C42  1  D0 0A            bne @movetonormalposition
000C44  1               @movetogoalposition:
000C44  1  A9 2A            lda #'*' ; crate on goal symbol
000C46  1  91 00            sta (ZP_PTR_1),y
000C48  1  A9 2E            lda #'.'
000C4A  1  91 22            sta (ZP_PTR_2),y
000C4C  1  80 28            bra @done
000C4E  1               @movetonormalposition:
000C4E  1  CE F3 08         dec no_goalsreached ; -1 win points
000C51  1  A9 24            lda #'$'; crate symbol
000C53  1  91 00            sta (ZP_PTR_1),y
000C55  1  A9 2E            lda #'.'
000C57  1  91 22            sta (ZP_PTR_2),y
000C59  1  80 1B            bra @done
000C5B  1               @crateonly:
000C5B  1                   ; is the destination a goal?
000C5B  1  B1 00            lda (ZP_PTR_1),y
000C5D  1  C9 2E            cmp #'.'
000C5F  1  D0 0D            bne @crateonly_nongoal
000C61  1                   ; crate moves to goal, from a non-goal position
000C61  1  EE F3 08         inc no_goalsreached ; +1 to win
000C64  1  A9 2A            lda #'*'
000C66  1  91 00            sta (ZP_PTR_1),y
000C68  1  A9 20            lda #' '
000C6A  1  91 22            sta (ZP_PTR_2),y
000C6C  1  80 08            bra @done
000C6E  1               @crateonly_nongoal:
000C6E  1  A9 24            lda #'$'
000C70  1  91 00            sta (ZP_PTR_1),y
000C72  1  A9 20            lda #' '; empty space to move the player in next
000C74  1  91 22            sta (ZP_PTR_2),y
000C76  1               @done:
000C76  1  60               rts
000C77  1               
000C77  1               moveplayeronfield:
000C77  1                   ; copies (ZP_PTR_3) to (ZP_PTR_2)
000C77  1                   ; and handles multiple player move options (normal / on goal)
000C77  1  A0 00            ldy #0
000C79  1  B1 24            lda (ZP_PTR_3),y
000C7B  1                   ; was there a goal underneath the player?
000C7B  1  C9 2B            cmp #'+'
000C7D  1  D0 1A            bne @playeronly
000C7F  1                   ; do we move to a goal position? (from goal to goal..)
000C7F  1  B1 22            lda (ZP_PTR_2),y
000C81  1  C9 2E            cmp #'.'
000C83  1  D0 0A            bne @movetonormalposition
000C85  1               @movetogoalposition:
000C85  1  A9 2B            lda #'+' ; player on goal symbol
000C87  1  91 22            sta (ZP_PTR_2),y
000C89  1  A9 2E            lda #'.'
000C8B  1  91 24            sta (ZP_PTR_3),y
000C8D  1  80 22            bra @done
000C8F  1               @movetonormalposition:
000C8F  1  A9 40            lda #'@'; player symbol
000C91  1  91 22            sta (ZP_PTR_2),y
000C93  1  A9 2E            lda #'.'
000C95  1  91 24            sta (ZP_PTR_3),y
000C97  1  80 18            bra @done
000C99  1               @playeronly:
000C99  1                   ; is the destination a goal?
000C99  1  B1 22            lda (ZP_PTR_2),y
000C9B  1  C9 2E            cmp #'.'
000C9D  1  D0 0A            bne @playeronly_nongoal
000C9F  1                   ; player moves to goal, from a non-goal position
000C9F  1  A9 2B            lda #'+'
000CA1  1  91 22            sta (ZP_PTR_2),y
000CA3  1  A9 20            lda #' '
000CA5  1  91 24            sta (ZP_PTR_3),y
000CA7  1  80 08            bra @done
000CA9  1               @playeronly_nongoal:
000CA9  1  A9 40            lda #'@'
000CAB  1  91 22            sta (ZP_PTR_2),y
000CAD  1  A9 20            lda #' '; empty space
000CAF  1  91 24            sta (ZP_PTR_3),y
000CB1  1               @done:
000CB1  1  60               rts
000CB2  1               
000CB2  1               print:
000CB2  1                   ; console routines only
000CB2  1                   ; print from address ZP_PTR_1
000CB2  1                   ; don't end with newline character
000CB2  1  5A               phy
000CB3  1  A0 00            ldy #0
000CB5  1               @loop:
000CB5  1  B1 00            lda (ZP_PTR_1),y ; load character from address
000CB7  1  F0 06            beq @done        ; end at 0 character
000CB9  1  20 D2 FF         jsr CHROUT
000CBC  1  C8               iny
000CBD  1  80 F6            bra @loop
000CBF  1               @done:
000CBF  1  7A               ply
000CC0  1  60               rts
000CC1  1               
000CC1  1               printline:
000CC1  1                   ; console routines only
000CC1  1                   ; print from address ZP_PTR_1
000CC1  1                   ; end with newline character
000CC1  1  20 B2 0C         jsr print
000CC4  1  A9 0D            lda #NEWLINE
000CC6  1  20 D2 FF         jsr CHROUT
000CC9  1  60               rts
000CCA  1               
000CCA  1               printwinstatement:
000CCA  1                   ; console routines only
000CCA  1  A9 60            lda #<winstatement
000CCC  1  85 00            sta ZP_PTR_1
000CCE  1  A9 08            lda #>winstatement
000CD0  1  85 01            sta ZP_PTR_1+1
000CD2  1  20 C1 0C         jsr printline
000CD5  1  60               rts
000CD6  1               
000CD6  1               printdecimal:
000CD6  1                   ; prints decimal from A register
000CD6  1                   ; VERA control needs to be set up previously
000CD6  1  DA               phx
000CD7  1  5A               phy
000CD8  1  86 30            stx temp    ; keep color to print in
000CDA  1  A0 2F            ldy #$2f
000CDC  1  A2 3A            ldx #$3a
000CDE  1  38               sec
000CDF  1               @loop1:
000CDF  1  C8               iny
000CE0  1  E9 64            sbc #100
000CE2  1  B0 FB            bcs @loop1
000CE4  1               @loop2:
000CE4  1  CA               dex
000CE5  1  69 0A            adc #10
000CE7  1  30 FB            bmi @loop2
000CE9  1  69 2F            adc #$2f
000CEB  1               
000CEB  1                   ; Y = hundreds, X = tens, A = ones
000CEB  1  48               pha
000CEC  1  8A               txa
000CED  1  48               pha
000CEE  1  98               tya
000CEF  1  C9 30            cmp #$30 ; is it a '0' petscii?
000CF1  1  F0 08            beq @tens
000CF3  1               ;    jsr CHROUT ; print Y
000CF3  1  8D 23 9F         sta VERA_DATA0
000CF6  1  A5 30            lda temp
000CF8  1  8D 23 9F         sta VERA_DATA0
000CFB  1               @tens:
000CFB  1  68               pla
000CFC  1  C9 30            cmp #$30 ; is it a '0' petscii?
000CFE  1  F0 08            beq @ones
000D00  1               ;    jsr CHROUT ; print X
000D00  1  8D 23 9F         sta VERA_DATA0
000D03  1  A5 30            lda temp
000D05  1  8D 23 9F         sta VERA_DATA0
000D08  1               @ones:
000D08  1  68               pla
000D09  1               ;    jsr CHROUT ; print A
000D09  1  8D 23 9F         sta VERA_DATA0
000D0C  1  A5 30            lda temp
000D0E  1  8D 23 9F         sta VERA_DATA0
000D11  1               
000D11  1  7A               ply
000D12  1  FA               plx
000D13  1  60               rts
000D14  1               
000D14  1               selectlevel:
000D14  1  A9 01            lda #1 ; start out with first level
000D16  1  8D F0 08         sta currentlevel
000D19  1               
000D19  1               @mainloop:
000D19  1                   ; text prep to VERA
000D19  1  9C 25 9F         stz VERA_CTRL
000D1C  1  A2 09            ldx #$9 ; color brown
000D1E  1  A9 10            lda #$10
000D20  1  8D 22 9F         sta VERA_HIGH
000D23  1  A9 21            lda #<selectmessage
000D25  1  85 00            sta ZP_PTR_1
000D27  1  A9 08            lda #>selectmessage
000D29  1  85 01            sta ZP_PTR_1+1
000D2B  1  A9 2D            lda #45
000D2D  1  8D 21 9F         sta VERA_MID
000D30  1  A9 14            lda #10*2
000D32  1  8D 20 9F         sta VERA_LOW
000D35  1  20 65 0F         jsr printverastring
000D38  1               
000D38  1                   ; print range
000D38  1  AD F1 08         lda no_levels
000D3B  1  20 D6 0C         jsr printdecimal
000D3E  1  A9 34            lda #<selectendmessage
000D40  1  85 00            sta ZP_PTR_1
000D42  1  A9 08            lda #>selectendmessage
000D44  1  85 01            sta ZP_PTR_1+1
000D46  1  20 65 0F         jsr printverastring
000D49  1                   ; print level number
000D49  1  AD F0 08         lda currentlevel
000D4C  1  20 D6 0C         jsr printdecimal
000D4F  1               
000D4F  1               @charloop:
000D4F  1  20 E4 FF         jsr GETIN
000D52  1               @checkdown:
000D52  1  C9 11            cmp #$11 ; down pressed
000D54  1  F0 06            beq @down
000D56  1  C9 9D            cmp #$9d ; left pressed
000D58  1  F0 02            beq @down
000D5A  1  80 0C            bra @checkup
000D5C  1               @down:
000D5C  1                   ; down key pressed
000D5C  1  AD F0 08         lda currentlevel
000D5F  1  C9 01            cmp #1
000D61  1  F0 EC            beq @charloop   ; lowest value == 1
000D63  1  CE F0 08         dec currentlevel
000D66  1  80 B1            bra @mainloop
000D68  1               @checkup:
000D68  1  C9 91            cmp #$91 ; up pressed
000D6A  1  F0 06            beq @up
000D6C  1  C9 1D            cmp #$1d ; right pressed
000D6E  1  F0 02            beq @up
000D70  1  80 0D            bra @checkreturnkey
000D72  1               @up:
000D72  1                   ; up key pressed
000D72  1  AD F0 08         lda currentlevel
000D75  1  CD F1 08         cmp no_levels
000D78  1  F0 D5            beq @charloop   ; maximum value reached
000D7A  1  EE F0 08         inc currentlevel
000D7D  1  80 9A            bra @mainloop
000D7F  1               @checkreturnkey:
000D7F  1  C9 0D            cmp #$0d
000D81  1  D0 CC            bne @charloop
000D83  1                   ; return key pressed - select this level
000D83  1  20 DD 0E         jsr cls
000D86  1  60               rts
000D87  1               
000D87  1               resetvars:
000D87  1                   ; reset goals
000D87  1  A9 00            lda #0
000D89  1  8D F3 08         sta no_goalsreached
000D8C  1               
000D8C  1                   ; load field pointer to first address at LOADSTART
000D8C  1                   ; load 1st pointer to temp pointer ZP_PTR_1
000D8C  1  A9 BF            lda #<LOADSTART
000D8E  1  85 00            sta ZP_PTR_1
000D90  1  A9 47            lda #>LOADSTART
000D92  1  85 01            sta ZP_PTR_1+1
000D94  1               
000D94  1                   ; load number of levels, pointed to by ZP_PTR_1,0
000D94  1  A0 00            ldy #0
000D96  1  B1 00            lda (ZP_PTR_1),y
000D98  1  8D F1 08         sta no_levels
000D9B  1               
000D9B  1                   ; reset undo stack
000D9B  1  A9 F8            lda #<undostack
000D9D  1  85 32            sta ZP_PTR_UNDO
000D9F  1  A9 08            lda #>undostack
000DA1  1  85 33            sta ZP_PTR_UNDO+1
000DA3  1               
000DA3  1  9C 02 09         stz undoindex
000DA6  1  9C 03 09         stz undocounter
000DA9  1  60               rts
000DAA  1               
000DAA  1               initfield:
000DAA  1                   ; load field pointer to first address at LOADSTART
000DAA  1                   ; load 1st pointer to temp pointer ZP_PTR_1
000DAA  1  A9 BF            lda #<LOADSTART
000DAC  1  85 00            sta ZP_PTR_1
000DAE  1  A9 47            lda #>LOADSTART
000DB0  1  85 01            sta ZP_PTR_1+1
000DB2  1               
000DB2  1                   ; skip to the first header, two bytes next
000DB2  1  18               clc
000DB3  1  A5 00            lda ZP_PTR_1
000DB5  1  69 02            adc #2
000DB7  1  85 00            sta ZP_PTR_1
000DB9  1               
000DB9  1                   ; now advance pointer (currentlevel - 1) * HEADERSIZE to advance to the correct payload pointer to that level
000DB9  1  AD F0 08         lda currentlevel
000DBC  1  AA               tax ; x contains the currentlevel now and will act as a counter
000DBD  1               @loop:
000DBD  1  CA               dex
000DBE  1  F0 11            beq @fieldptrdone
000DC0  1                   ; advance the field payload pointer
000DC0  1  A5 00            lda ZP_PTR_1
000DC2  1  18               clc
000DC3  1  69 0C            adc #LEVELHEADER
000DC5  1  85 00            sta ZP_PTR_1
000DC7  1  90 F4            bcc @loop   ; nothing to do for the high byte
000DC9  1  A5 01            lda ZP_PTR_1+1
000DCB  1  69 00            adc #$0     ; increase the high byte
000DCD  1  85 01            sta ZP_PTR_1+1
000DCF  1  80 EC            bra @loop
000DD1  1               @fieldptrdone:
000DD1  1               
000DD1  1  A0 02            ldy #2  ; index from payload pointer to width variable (low byte)
000DD3  1  B1 00            lda (ZP_PTR_1),y
000DD5  1  8D F4 08         sta fieldwidth
000DD8  1  A0 04            ldy #4  ; index from payload pointer to height variable (low byte)
000DDA  1  B1 00            lda (ZP_PTR_1),y
000DDC  1  8D F5 08         sta fieldheight
000DDF  1  A0 06            ldy #6  ; index from payload pointer to goals in this level (low byte)
000DE1  1  B1 00            lda (ZP_PTR_1),y
000DE3  1  8D F2 08         sta no_goals
000DE6  1  A0 08            ldy #8  ; index from payload pointer to goals taken in this level (low byte)
000DE8  1  B1 00            lda (ZP_PTR_1),y
000DEA  1  8D F3 08         sta no_goalsreached
000DED  1  A0 0A            ldy #10  ; index from payload pointer to player offset in this level
000DEF  1               
000DEF  1  B1 00            lda (ZP_PTR_1),y
000DF1  1  18               clc
000DF2  1  69 00            adc #<RAMBANK
000DF4  1  85 24            sta ZP_PTR_3
000DF6  1  C8               iny
000DF7  1  B1 00            lda (ZP_PTR_1),y
000DF9  1  69 A0            adc #>RAMBANK
000DFB  1  85 25            sta ZP_PTR_3+1
000DFD  1                   ; ZP_PTR_3 now contains the actual address in memory of the player, not only the offset from the data
000DFD  1               
000DFD  1                   ; now copy the field data to the RAM bank
000DFD  1  AD F5 08         lda fieldheight
000E00  1  AA               tax ; create counter
000E01  1                   ; clear temp counter
000E01  1  64 30            stz temp
000E03  1  64 31            stz temp+1
000E05  1               
000E05  1               @multiply:
000E05  1                   ; add fieldwidth variable to temp at each iteration - temp = temp + (width * height)
000E05  1  A5 30            lda temp
000E07  1  18               clc
000E08  1  6D F4 08         adc fieldwidth
000E0B  1  85 30            sta temp
000E0D  1  A5 31            lda temp+1 ; don't forget the high byte
000E0F  1  69 00            adc #0
000E11  1  85 31            sta temp+1
000E13  1  CA               dex
000E14  1  D0 EF            bne @multiply
000E16  1               
000E16  1                   ; copy (temp) amount of bytes from current field pointer to Ram bank 0
000E16  1               
000E16  1                   ; currently ZP_PTR_1 is pointing to the selected field HEADER
000E16  1                   ; retrieve the field pointer from it, and let ZP_PTR_FIELD to that
000E16  1  A0 00            ldy #0
000E18  1  B1 00            lda (ZP_PTR_1),y
000E1A  1  85 28            sta ZP_PTR_FIELD
000E1C  1  C8               iny
000E1D  1  B1 00            lda (ZP_PTR_1),y
000E1F  1  85 29            sta ZP_PTR_FIELD+1
000E21  1                   ; now let this pointer start counting from LOADSTART, just as the offset in the input file references
000E21  1  A5 28            lda ZP_PTR_FIELD
000E23  1  18               clc
000E24  1  69 BF            adc #<LOADSTART
000E26  1  85 28            sta ZP_PTR_FIELD
000E28  1  A5 29            lda ZP_PTR_FIELD+1
000E2A  1  69 47            adc #>LOADSTART
000E2C  1  85 29            sta ZP_PTR_FIELD+1
000E2E  1               
000E2E  1                   ; set up destination pointer
000E2E  1  A9 00            lda #<RAMBANK
000E30  1  85 22            sta ZP_PTR_2
000E32  1  A9 A0            lda #>RAMBANK
000E34  1  85 23            sta ZP_PTR_2+1
000E36  1               
000E36  1  A0 00            ldy #0
000E38  1               @copybyte:
000E38  1                   ; copy one byte of data
000E38  1  B1 28            lda (ZP_PTR_FIELD),y
000E3A  1  91 22            sta (ZP_PTR_2),y
000E3C  1               
000E3C  1                   ; temp = temp -1
000E3C  1  A5 30            lda temp
000E3E  1  38               sec
000E3F  1  E9 01            sbc #1
000E41  1  85 30            sta temp
000E43  1  A5 31            lda temp+1
000E45  1  E9 00            sbc #0
000E47  1  85 31            sta temp+1
000E49  1               
000E49  1                   ; if temp==0 done
000E49  1  A5 31            lda temp+1
000E4B  1  D0 06            bne @copynextbyte
000E4D  1  A5 30            lda temp
000E4F  1  D0 02            bne @copynextbyte
000E51  1  80 1C            bra @done
000E53  1               @copynextbyte:
000E53  1  A5 28            lda ZP_PTR_FIELD
000E55  1  18               clc
000E56  1  69 01            adc #1
000E58  1  85 28            sta ZP_PTR_FIELD
000E5A  1  A5 29            lda ZP_PTR_FIELD+1
000E5C  1  69 00            adc #0
000E5E  1  85 29            sta ZP_PTR_FIELD+1
000E60  1  A5 22            lda ZP_PTR_2
000E62  1  18               clc
000E63  1  69 01            adc #1
000E65  1  85 22            sta ZP_PTR_2
000E67  1  A5 23            lda ZP_PTR_2+1
000E69  1  69 00            adc #0
000E6B  1  85 23            sta ZP_PTR_2+1
000E6D  1  80 C9            bra @copybyte
000E6F  1               @done:
000E6F  1               
000E6F  1                   ; prep the field pointer
000E6F  1  A9 00            lda #<RAMBANK
000E71  1  85 28            sta ZP_PTR_FIELD
000E73  1  A9 A0            lda #>RAMBANK
000E75  1  85 29            sta ZP_PTR_FIELD+1
000E77  1  60               rts
000E78  1               
000E78  1               printfield:
000E78  1                   ; console routines only
000E78  1                   ; no clearscreen, just print the field to screen on current position
000E78  1                   ; depends only on
000E78  1                   ; - field label for start of field
000E78  1               
000E78  1  A5 28            lda ZP_PTR_FIELD
000E7A  1  85 00            sta ZP_PTR_1
000E7C  1  A5 29            lda ZP_PTR_FIELD+1
000E7E  1  85 01            sta ZP_PTR_1+1
000E80  1  A2 00            ldx #0 ; row counter
000E82  1               @nextrow:
000E82  1  A0 00            ldy #0 ; column counter
000E84  1               @row:
000E84  1  B1 00            lda (ZP_PTR_1),y
000E86  1  C9 40            cmp #'@'
000E88  1  F0 06            beq @character
000E8A  1  C9 2B            cmp #'+'
000E8C  1  F0 02            beq @character
000E8E  1  80 17            bra @normalcolor
000E90  1               @character:
000E90  1  48               pha
000E91  1  A9 9E            lda #$9e ; YELLOW
000E93  1  20 D2 FF         jsr CHROUT
000E96  1  68               pla
000E97  1  20 D2 FF         jsr CHROUT
000E9A  1  A9 05            lda #$05 ; WHITE
000E9C  1  20 D2 FF         jsr CHROUT
000E9F  1  C8               iny
000EA0  1  CC F4 08         cpy fieldwidth
000EA3  1  D0 DF            bne @row
000EA5  1  80 09            bra @endline
000EA7  1               @normalcolor:
000EA7  1  20 D2 FF         jsr CHROUT
000EAA  1  C8               iny
000EAB  1  CC F4 08         cpy fieldwidth
000EAE  1  D0 D4            bne @row
000EB0  1               @endline:
000EB0  1  A9 0D            lda #NEWLINE
000EB2  1  20 D2 FF         jsr CHROUT
000EB5  1               
000EB5  1                   ; advance pointer to next row
000EB5  1  A5 00            lda ZP_PTR_1
000EB7  1  18               clc
000EB8  1  6D F4 08         adc fieldwidth
000EBB  1  85 00            sta ZP_PTR_1
000EBD  1  90 07            bcc @checklastrow ; no carry, don't increment high byte on pointer
000EBF  1  A5 01            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
000EC1  1  18               clc
000EC2  1  69 01            adc #1
000EC4  1  85 01            sta ZP_PTR_1+1
000EC6  1               @checklastrow:
000EC6  1                   ; last row?
000EC6  1  E8               inx
000EC7  1  EC F5 08         cpx fieldheight
000ECA  1  D0 B6            bne @nextrow
000ECC  1               
000ECC  1                   ; print quit message at the end of the field
000ECC  1  A9 0D            lda #NEWLINE
000ECE  1  20 D2 FF         jsr CHROUT
000ED1  1  A9 50            lda #<quitmessage
000ED3  1  85 00            sta ZP_PTR_1
000ED5  1  A9 08            lda #>quitmessage
000ED7  1  85 01            sta ZP_PTR_1+1
000ED9  1  20 C1 0C         jsr printline
000EDC  1               
000EDC  1  60               rts
000EDD  1               
000EDD  1               cls:
000EDD  1  A9 93            lda #CLEARSCREEN
000EDF  1  20 D2 FF         jsr CHROUT
000EE2  1  60               rts
000EE3  1               
000EE3  1               loadtiles:
000EE3  1               ; Build  16x16 256 color tiles in VRAM location $12000
000EE3  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000EE6  1  A9 11            lda #$11
000EE8  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 1
000EEB  1  A9 20            lda #$20
000EED  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $20
000EF0  1  9C 20 9F         stz VERA_LOW                        ; Set Low Byte to $00
000EF3  1               
000EF3  1  A2 00            ldx #0
000EF5  1  BD BF 41     :   lda tiledata,x                      ; index 0 / black tile
000EF8  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000EFB  1  E8               inx
000EFC  1  D0 F7            bne :-
000EFE  1                   ; load Brick data
000EFE  1  A2 00            ldx #0
000F00  1  BD BF 42     :   lda Brick,x                         ; index 1 / brick
000F03  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000F06  1  E8               inx
000F07  1  D0 F7            bne :-
000F09  1                   ; load player data
000F09  1  A2 00            ldx #0
000F0B  1  BD BF 43     :   lda player,x                        ; index 2 / player
000F0E  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000F11  1  E8               inx
000F12  1  D0 F7            bne :-
000F14  1                   ; load crate data
000F14  1  A2 00            ldx #0
000F16  1  BD BF 44     :   lda crate,x                         ; index 3 / crate (normal)
000F19  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000F1C  1  E8               inx
000F1D  1  D0 F7            bne :-
000F1F  1                   ; load goal data
000F1F  1  A2 00            ldx #0
000F21  1  BD BF 45     :   lda goal,x                         ; index 4 / goal (normal)
000F24  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000F27  1  E8               inx
000F28  1  D0 F7            bne :-
000F2A  1                   ; load crateongoal data
000F2A  1  A2 00            ldx #0
000F2C  1  BD BF 46     :   lda crateongoal,x                   ; index 5 / crate on goal
000F2F  1  8D 23 9F         sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
000F32  1  E8               inx
000F33  1  D0 F7            bne :-
000F35  1               
000F35  1  60               rts
000F36  1               
000F36  1               
000F36  1               displaymessagescreen:
000F36  1                   ; temp store pointer to the requested text
000F36  1  A5 00            lda ZP_PTR_1
000F38  1  48               pha
000F39  1  A5 01            lda ZP_PTR_1+1
000F3B  1  48               pha
000F3C  1               
000F3C  1  A9 BF            lda #<messagescreen
000F3E  1  85 00            sta ZP_PTR_1
000F40  1  A9 21            lda #>messagescreen
000F42  1  85 01            sta ZP_PTR_1+1
000F44  1  20 7C 0F         jsr displaytileset
000F47  1                   ; now display the string at ZP_PTR_1 in the middle and return
000F47  1  68               pla
000F48  1  85 01            sta ZP_PTR_1+1
000F4A  1  68               pla
000F4B  1  85 00            sta ZP_PTR_1
000F4D  1  9C 25 9F         stz VERA_CTRL
000F50  1                   ;lda #%00100000
000F50  1  A9 10            lda #$10
000F52  1  8D 22 9F         sta VERA_HIGH
000F55  1  A9 1C            lda #28
000F57  1  8D 21 9F         sta VERA_MID
000F5A  1  A9 38            lda #28*2
000F5C  1  8D 20 9F         sta VERA_LOW
000F5F  1  A2 09            ldx #$9 ; color brown
000F61  1  20 65 0F         jsr printverastring
000F64  1  60               rts
000F65  1               
000F65  1               printverastring:
000F65  1                   ; ZP_PTR_1 is pointing to the string
000F65  1                   ; x contains color of the text
000F65  1  A0 00            ldy #0
000F67  1               @loop:
000F67  1  B1 00            lda (ZP_PTR_1),y
000F69  1  F0 10            beq @end
000F6B  1  C9 40            cmp #$40
000F6D  1  90 03            bcc @output
000F6F  1               @AZ:
000F6F  1  38               sec
000F70  1  E9 40            sbc #$40
000F72  1               @output:
000F72  1  8D 23 9F         sta VERA_DATA0
000F75  1  8E 23 9F         stx VERA_DATA0
000F78  1  C8               iny
000F79  1  80 EC            bra @loop
000F7B  1               @end:
000F7B  1  60               rts
000F7C  1               
000F7C  1               displaytileset:
000F7C  1               ; Fill the Layer 0 with the tileset pointed to by ZP_PTR_1
000F7C  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
000F7F  1  A9 10            lda #$10
000F81  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
000F84  1  A9 40            lda #$40
000F86  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $40
000F89  1  A9 00            lda #$0
000F8B  1  8D 20 9F         sta VERA_LOW                        ; Set Low Byte to $00
000F8E  1               
000F8E  1  A0 20            ldy #32
000F90  1               @outerloop:
000F90  1  A2 40            ldx #64
000F92  1               @innerloop:
000F92  1  5A               phy
000F93  1  A0 00            ldy #0
000F95  1  B1 00            lda (ZP_PTR_1),y                    ; load byte from tileset
000F97  1  8D 23 9F         sta VERA_DATA0
000F9A  1  9C 23 9F         stz VERA_DATA0                      ; zero it's attribute
000F9D  1  7A               ply
000F9E  1               
000F9E  1                   ; increase pointer to next byte in the set
000F9E  1  A5 00            lda ZP_PTR_1
000FA0  1  18               clc
000FA1  1  69 02            adc #$2
000FA3  1  85 00            sta ZP_PTR_1
000FA5  1  A5 01            lda ZP_PTR_1+1
000FA7  1  69 00            adc #$0
000FA9  1  85 01            sta ZP_PTR_1+1
000FAB  1               
000FAB  1  CA               dex
000FAC  1  D0 E4            bne @innerloop
000FAE  1  88               dey
000FAF  1  D0 DF            bne @outerloop
000FB1  1               
000FB1  1  60               rts
000FB2  1               
000FB2  1               displaytitlescreen:
000FB2  1  A9 BF            lda #<titlescreen
000FB4  1  85 00            sta ZP_PTR_1
000FB6  1  A9 11            lda #>titlescreen
000FB8  1  85 01            sta ZP_PTR_1+1
000FBA  1  20 7C 0F         jsr displaytileset
000FBD  1               
000FBD  1  9C 25 9F         stz VERA_CTRL
000FC0  1  A2 09            ldx #$9 ; color brown
000FC2  1  A9 10            lda #$10
000FC4  1  8D 22 9F         sta VERA_HIGH
000FC7  1               
000FC7  1  A9 7F            lda #<help0
000FC9  1  85 00            sta ZP_PTR_1
000FCB  1  A9 08            lda #>help0
000FCD  1  85 01            sta ZP_PTR_1+1
000FCF  1  A9 17            lda #23
000FD1  1  8D 21 9F         sta VERA_MID
000FD4  1  A9 64            lda #50*2
000FD6  1  8D 20 9F         sta VERA_LOW
000FD9  1  20 65 0F         jsr printverastring
000FDC  1               
000FDC  1  A9 8D            lda #<help1
000FDE  1  85 00            sta ZP_PTR_1
000FE0  1  A9 08            lda #>help1
000FE2  1  85 01            sta ZP_PTR_1+1
000FE4  1  A9 1E            lda #30
000FE6  1  8D 21 9F         sta VERA_MID
000FE9  1  A9 64            lda #50*2
000FEB  1  8D 20 9F         sta VERA_LOW
000FEE  1  20 65 0F         jsr printverastring
000FF1  1               
000FF1  1  A9 A1            lda #<help2
000FF3  1  85 00            sta ZP_PTR_1
000FF5  1  A9 08            lda #>help2
000FF7  1  85 01            sta ZP_PTR_1+1
000FF9  1  A9 20            lda #32
000FFB  1  8D 21 9F         sta VERA_MID
000FFE  1  A9 64            lda #50*2
001000  1  8D 20 9F         sta VERA_LOW
001003  1  20 65 0F         jsr printverastring
001006  1               
001006  1  A9 B7            lda #<help3
001008  1  85 00            sta ZP_PTR_1
00100A  1  A9 08            lda #>help3
00100C  1  85 01            sta ZP_PTR_1+1
00100E  1  A9 21            lda #33
001010  1  8D 21 9F         sta VERA_MID
001013  1  A9 64            lda #50*2
001015  1  8D 20 9F         sta VERA_LOW
001018  1  20 65 0F         jsr printverastring
00101B  1               
00101B  1  A9 C5            lda #<help4
00101D  1  85 00            sta ZP_PTR_1
00101F  1  A9 08            lda #>help4
001021  1  85 01            sta ZP_PTR_1+1
001023  1  A9 22            lda #34
001025  1  8D 21 9F         sta VERA_MID
001028  1  A9 64            lda #50*2
00102A  1  8D 20 9F         sta VERA_LOW
00102D  1  20 65 0F         jsr printverastring
001030  1               
001030  1  A9 DB            lda #<help5
001032  1  85 00            sta ZP_PTR_1
001034  1  A9 08            lda #>help5
001036  1  85 01            sta ZP_PTR_1+1
001038  1  A9 23            lda #35
00103A  1  8D 21 9F         sta VERA_MID
00103D  1  A9 64            lda #50*2
00103F  1  8D 20 9F         sta VERA_LOW
001042  1  20 65 0F         jsr printverastring
001045  1  60               rts
001046  1               
001046  1               cleartiles:
001046  1               ; Fill the Layer 0 with all zeros (black)
001046  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
001049  1  A9 10            lda #$10
00104B  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
00104E  1  A9 40            lda #$40
001050  1  8D 21 9F         sta VERA_MID                        ; Set Middle Byte to $40
001053  1  A9 00            lda #$0
001055  1  8D 20 9F         sta VERA_LOW                        ; Set Low Byte to $00
001058  1               
001058  1  A0 20            ldy #32
00105A  1  A9 00            lda #0
00105C  1  A2 40        :   ldx #64
00105E  1  8D 23 9F     :   sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
001061  1  8D 23 9F         sta VERA_DATA0                      ; Write Attribute
001064  1  CA               dex
001065  1  D0 F7            bne :-
001067  1  88               dey
001068  1  D0 F2            bne :--
00106A  1               
00106A  1  60               rts
00106B  1               
00106B  1               resetlayerconfig:
00106B  1               ; Change Layer 1 to 8 Color Mode
00106B  1  AD 34 9F         lda $9F34
00106E  1  29 F7            and #%11110111                        ; Set bit 3 to 0, rest unchanged
001070  1  8D 34 9F         sta $9F34
001073  1               
001073  1  20 DD 0E         jsr cls
001076  1  60               rts
001077  1               
001077  1               layerconfig:
001077  1               ; Configure Layer 0
001077  1  A9 53            lda #%01010011                      ; 64 x 64 tiles, 8 bits per pixel
001079  1  8D 2D 9F         sta $9F2D
00107C  1  A9 20            lda #$20                            ; $20 points to $4000 in VRAM
00107E  1  8D 2E 9F         sta $9F2E                           ; Store to Map Base Pointer
001081  1               
001081  1  A9 93            lda #$93                            ; $48 points to $12000, Width and Height 16 pixel
001083  1  8D 2F 9F         sta $9F2F                           ; Store to Tile Base Pointer
001086  1               
001086  1  20 46 10         jsr cleartiles
001089  1               
001089  1               ; Turn on Layer 0
001089  1  AD 29 9F         lda $9F29
00108C  1  09 30            ora #%00110000                      ; Bits 4 and 5 are set to 1
00108E  1  8D 29 9F         sta $9F29                           ; So both Later 0 and 1 are turned on
001091  1               
001091  1               ; Change Layer 1 to 256 Color Mode
001091  1  AD 34 9F         lda $9F34
001094  1  09 08            ora #%001000                        ; Set bit 3 to 1, rest unchanged
001096  1  8D 34 9F         sta $9F34
001099  1               
001099  1               ; Clear Layer 1
001099  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
00109C  1  A9 10            lda #$10
00109E  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
0010A1  1  9C 21 9F         stz VERA_MID                        ; Set Middle Byte to $00
0010A4  1  9C 20 9F         stz VERA_LOW                        ; Set Low Byte to $00
0010A7  1               
0010A7  1  A9 1E            lda #30
0010A9  1  85 02            sta $02                             ; save counter for rows
0010AB  1  A0 01            ldy #$01                            ; Color Attribute white on black background
0010AD  1  A9 20            lda #$20                            ; Blank character
0010AF  1  A2 00            ldx #0
0010B1  1  8D 23 9F     :   sta VERA_DATA0                      ; Write to VRAM with +1 Autoincrement
0010B4  1  8C 23 9F         sty VERA_DATA0                      ; Write Attribute
0010B7  1  E8               inx
0010B8  1  D0 F7            bne :-
0010BA  1  C6 02            dec $02
0010BC  1  D0 F3            bne :-
0010BE  1               
0010BE  1               ; Scale Display x2 for resolution of 320 x 240 pixels
0010BE  1               ;    lda #$40
0010BE  1               ;    sta $9F2A
0010BE  1               ;    sta $9F2B
0010BE  1               
0010BE  1  60               rts
0010BF  1               
0010BF  1               printfield2:
0010BF  1               ; prep variables for vera med/high bytes
0010BF  1               ;    topleft address for first tile is 0x04000
0010BF  1  A9 40            lda #$40
0010C1  1  8D F7 08         sta vera_byte_mid
0010C4  1  9C F6 08         stz vera_byte_low
0010C7  1               
0010C7  1               ; shift to the right (SCREENWIDTH - fieldwidth) /2 positions *2 to compensate for attribute
0010C7  1  A9 28            lda #SCREENWIDTH
0010C9  1  38               sec
0010CA  1  ED F4 08         sbc fieldwidth
0010CD  1  4A               lsr ; /2
0010CE  1  0A               asl ; *2 - so uneven widths result in an even address and we don't end up in parameter space of the TILEMAP
0010CF  1  8D F6 08         sta vera_byte_low
0010D2  1               
0010D2  1               ; shift down number of rows (SCREENHEIGHT - fieldheight) /2 positions
0010D2  1  A9 1E            lda #SCREENHEIGHT
0010D4  1  38               sec
0010D5  1  ED F5 08         sbc fieldheight
0010D8  1  4A               lsr ; /2
0010D9  1  AA               tax ; transfer number of rows down to counter
0010DA  1               @loop:
0010DA  1  E0 00            cpx #$0 ; any rows down (left)?
0010DC  1  F0 16            beq @done ; exit loop when x == 0
0010DE  1                   ; go 64 tiles further down - 64 * (1 address + 1 parameter of tile) = 128 / $80
0010DE  1  AD F6 08         lda vera_byte_low
0010E1  1  18               clc
0010E2  1  69 80            adc #$80    ; add row <<<ADDRESS>>> height for exactly one row down
0010E4  1  8D F6 08         sta vera_byte_low
0010E7  1  90 08            bcc @decrement  ; no need to change the high byte
0010E9  1  AD F7 08         lda vera_byte_mid
0010EC  1  69 00            adc #$0     ; add carry (so +1)
0010EE  1  8D F7 08         sta vera_byte_mid
0010F1  1               @decrement: ; next row
0010F1  1  CA               dex
0010F2  1  80 E6            bra @loop
0010F4  1               @done:
0010F4  1               
0010F4  1               ; prepare the pointers to the back-end field data, so we know what to display
0010F4  1  A5 28            lda ZP_PTR_FIELD
0010F6  1  85 00            sta ZP_PTR_1
0010F8  1  A5 29            lda ZP_PTR_FIELD+1
0010FA  1  85 01            sta ZP_PTR_1+1
0010FC  1               
0010FC  1               ; start displaying the selected field
0010FC  1               ; (vera_byte_mid / vera_byte_low) is the address for the top-left position on-screen in the tile map
0010FC  1  A2 00            ldx #0 ; row counter
0010FE  1               @nextrow:
0010FE  1  A0 00            ldy #0 ; column counter
001100  1                   ; prepare vera pointers for this row
001100  1  9C 25 9F         stz VERA_CTRL                       ; Use Data Register 0
001103  1  A9 10            lda #$10
001105  1  8D 22 9F         sta VERA_HIGH                       ; Set Increment to 1, High Byte to 0
001108  1  AD F7 08         lda vera_byte_mid
00110B  1  8D 21 9F         sta VERA_MID
00110E  1  AD F6 08         lda vera_byte_low
001111  1  8D 20 9F         sta VERA_LOW
001114  1               
001114  1               @row:
001114  1                   ; sweep the field, row by row, indexed by column y
001114  1  B1 00            lda (ZP_PTR_1),y
001116  1  C9 40            cmp #'@'
001118  1  F0 2A            beq @player
00111A  1  C9 2B            cmp #'+'
00111C  1  F0 26            beq @player
00111E  1  C9 24            cmp #'$'
001120  1  F0 32            beq @crate
001122  1  C9 2E            cmp #'.'
001124  1  F0 4E            beq @goal
001126  1  C9 2A            cmp #'*'
001128  1  F0 3A            beq @crateongoal
00112A  1  C9 20            cmp #' '
00112C  1  F0 06            beq @ignore
00112E  1  C9 00            cmp #0
001130  1  F0 02            beq @ignore
001132  1  80 50            bra @wall
001134  1               @ignore:
001134  1                   ; ignore
001134  1  A9 00            lda #$0 ; black tile
001136  1  8D 23 9F         sta VERA_DATA0
001139  1  9C 23 9F         stz VERA_DATA0
00113C  1  C8               iny
00113D  1  CC F4 08         cpy fieldwidth
001140  1  D0 D2            bne @row
001142  1  80 4E            bra @endline
001144  1               @player:
001144  1  A9 02            lda #$2
001146  1  8D 23 9F         sta VERA_DATA0
001149  1  9C 23 9F         stz VERA_DATA0
00114C  1  C8               iny
00114D  1  CC F4 08         cpy fieldwidth
001150  1  D0 C2            bne @row
001152  1  80 3E            bra @endline
001154  1               @crate:
001154  1  A9 03            lda #$3
001156  1  8D 23 9F         sta VERA_DATA0
001159  1  9C 23 9F         stz VERA_DATA0
00115C  1  C8               iny
00115D  1  CC F4 08         cpy fieldwidth
001160  1  D0 B2            bne @row
001162  1  80 2E            bra @endline
001164  1               @crateongoal:
001164  1  A9 05            lda #$5
001166  1  8D 23 9F         sta VERA_DATA0
001169  1  9C 23 9F         stz VERA_DATA0
00116C  1  C8               iny
00116D  1  CC F4 08         cpy fieldwidth
001170  1  D0 A2            bne @row
001172  1  80 1E            bra @endline
001174  1               @goal:
001174  1  A9 04            lda #$4
001176  1  8D 23 9F         sta VERA_DATA0
001179  1  9C 23 9F         stz VERA_DATA0
00117C  1  C8               iny
00117D  1  CC F4 08         cpy fieldwidth
001180  1  D0 92            bne @row
001182  1  80 0E            bra @endline
001184  1               
001184  1               @wall:
001184  1  A9 01            lda #$1 ; load tile 1 ; brick
001186  1  8D 23 9F         sta VERA_DATA0
001189  1  9C 23 9F         stz VERA_DATA0
00118C  1               
00118C  1  C8               iny
00118D  1  CC F4 08         cpy fieldwidth
001190  1  D0 82            bne @row
001192  1               @endline:
001192  1                   ; advance pointer to next row in the field
001192  1  A5 00            lda ZP_PTR_1
001194  1  18               clc
001195  1  6D F4 08         adc fieldwidth
001198  1  85 00            sta ZP_PTR_1
00119A  1  90 06            bcc @checklastrow ; no carry, don't increment high byte on pointer
00119C  1  A5 01            lda ZP_PTR_1+1 ; carry to high byte if carry set ;-)
00119E  1  69 00            adc #0
0011A0  1  85 01            sta ZP_PTR_1+1
0011A2  1               @checklastrow:
0011A2  1                   ; last row?
0011A2  1                   ; increment vera pointer to next row
0011A2  1  AD F6 08         lda vera_byte_low
0011A5  1  18               clc
0011A6  1  69 80            adc #$80    ; add address delta to next row - 64 tiles * 2 = 128 / $80
0011A8  1  8D F6 08         sta vera_byte_low
0011AB  1  90 08            bcc @next3  ; no need to change the high byte
0011AD  1  AD F7 08         lda vera_byte_mid
0011B0  1  69 00            adc #$0     ; add carry (so +1)
0011B2  1  8D F7 08         sta vera_byte_mid
0011B5  1               @next3:
0011B5  1  E8               inx
0011B6  1  EC F5 08         cpx fieldheight
0011B9  1  F0 03            beq @nextsection
0011BB  1               
0011BB  1  4C FE 10         jmp @nextrow
0011BE  1               @nextsection:
0011BE  1  60               rts
0011BF  1               
0011BF  1               titlescreen:
0011BF  1  00 00 01 00  .incbin "tiles/titlescreen.bin"
0011C3  1  01 00 01 00  
0011C7  1  00 00 00 00  
0021BF  1               messagescreen:
0021BF  1  00 00 00 00  .incbin "tiles/messagescreen.bin"
0021C3  1  00 00 00 00  
0021C7  1  00 00 00 00  
0031BF  1               completescreen:
0031BF  1  00 00 00 00  .incbin "tiles/complete.bin"
0031C3  1  00 00 00 00  
0031C7  1  00 00 00 00  
0041BF  1               tiledata:
0041BF  1               black:
0041BF  1  00 00 00 00  .incbin "tiles/black.bin"
0041C3  1  00 00 00 00  
0041C7  1  00 00 00 00  
0042BF  1               Brick:
0042BF  1  08 08 08 08  .incbin "tiles/brick.bin"
0042C3  1  08 08 08 E5  
0042C7  1  08 08 08 08  
0043BF  1               player:
0043BF  1  00 00 00 00  .incbin "tiles/player.bin"
0043C3  1  00 10 10 10  
0043C7  1  10 0B 00 00  
0044BF  1               crate:
0044BF  1  57 57 57 57  .incbin "tiles/crate.bin"
0044C3  1  57 57 57 57  
0044C7  1  57 57 57 57  
0045BF  1               goal:
0045BF  1  00 00 00 00  .incbin "tiles/goal.bin"
0045C3  1  00 00 00 00  
0045C7  1  00 00 00 00  
0046BF  1               crateongoal:
0046BF  1  57 57 57 57  .incbin "tiles/crateongoal.bin"
0046C3  1  57 57 57 57  
0046C7  1  57 57 57 57  
0047BF  1               LOADSTART:
0047BF  1  4E 00 AA 03  .incbin "levels.bin"
0047C3  1  07 00 06 00  
0047C7  1  02 00 01 00  
005D29  1               
005D29  1               
